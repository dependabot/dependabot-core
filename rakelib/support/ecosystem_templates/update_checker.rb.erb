# typed: strict
# frozen_string_literal: true

require "dependabot/update_checkers"
require "dependabot/update_checkers/base"

module Dependabot
  module <%= ecosystem_module %>
    class UpdateChecker < Dependabot::UpdateCheckers::Base
      extend T::Sig

      sig { override.returns(T.nilable(T.any(String, Gem::Version))) }
      def latest_version
        # TODO: Implement logic to find the latest version
        # This should check the package registry/repository for updates
        nil
      end

      sig { override.returns(T.nilable(T.any(String, Gem::Version))) }
      def latest_resolvable_version
        # TODO: Implement logic to find the latest resolvable version
        # This might be the same as latest_version for simple ecosystems
        latest_version
      end

      sig { override.returns(T.nilable(String)) }
      def latest_resolvable_version_with_no_unlock
        # TODO: Implement logic for version resolution without unlocking
        dependency.version
      end

      sig { override.returns(T::Array[T::Hash[Symbol, T.untyped]]) }
      def updated_requirements
        # TODO: Implement logic to update requirements
        # Return updated requirement hashes
        dependency.requirements
      end

      private

      sig { override.returns(T::Boolean) }
      def latest_version_resolvable_with_full_unlock?
        # TODO: Implement resolvability check
        false
      end

      sig { override.returns(T::Array[Dependabot::Dependency]) }
      def updated_dependencies_after_full_unlock
        # TODO: Return updated dependencies if full unlock is needed
        []
      end
    end
  end
end

Dependabot::UpdateCheckers.register("<%= ecosystem_name %>", Dependabot::<%= ecosystem_module %>::UpdateChecker)
