# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `parseconfig` gem.
# Please instead update this file by running `bin/tapioca gem parseconfig`.

# Note: A group is a set of parameters defined for a subpart of a
# config file
#
# source://parseconfig//lib/parseconfig.rb#19
class ParseConfig
  # Initialize the class with the path to the 'config_file'
  # The class objects are dynamically generated by the
  # name of the 'param' in the config file.  Therefore, if
  # the config file is 'param = value' then the itializer
  # will eval "@param = value"
  #
  # @return [ParseConfig] a new instance of ParseConfig
  #
  # source://parseconfig//lib/parseconfig.rb#31
  def initialize(config_file = T.unsafe(nil), separator = T.unsafe(nil), comments = T.unsafe(nil)); end

  # Public: Compare this ParseConfig to some other ParseConfig. For two config to
  # be equivalent, they must have the same sections with the same parameters
  #
  # other - The other ParseConfig.
  #
  # Returns true if ParseConfig are equivalent and false if they differ.
  #
  # @return [Boolean]
  #
  # source://parseconfig//lib/parseconfig.rb#204
  def ==(other); end

  # This method is a shortcut to accessing the @params variable
  #
  # source://parseconfig//lib/parseconfig.rb#121
  def [](param); end

  # This method adds an element to the config object (not the config file)
  # By adding a Hash, you create a new group
  #
  # source://parseconfig//lib/parseconfig.rb#137
  def add(param_name, value, override = T.unsafe(nil)); end

  # Add parameters to a group. Note that parameters with the same name
  # could be placed in different groups
  #
  # source://parseconfig//lib/parseconfig.rb#164
  def add_to_group(group, param_name, value); end

  # Returns the value of attribute config_file.
  #
  # source://parseconfig//lib/parseconfig.rb#23
  def config_file; end

  # Sets the attribute config_file
  #
  # @param value the value to set the attribute config_file to.
  #
  # source://parseconfig//lib/parseconfig.rb#23
  def config_file=(_arg0); end

  # Public: Compare this ParseConfig to some other ParseConfig. For two config to
  # be equivalent, they must have the same sections with the same parameters
  #
  # other - The other ParseConfig.
  #
  # Returns true if ParseConfig are equivalent and false if they differ.
  #
  # @return [Boolean]
  #
  # source://parseconfig//lib/parseconfig.rb#204
  def eql?(other); end

  # List available sub-groups of the config.
  #
  # source://parseconfig//lib/parseconfig.rb#131
  def get_groups; end

  # This method returns all parameters/groups defined in a config file.
  #
  # source://parseconfig//lib/parseconfig.rb#126
  def get_params; end

  # This method will provide the value held by the object "@param"
  # where "@param" is actually the name of the param in the config
  # file.
  #
  # DEPRECATED - will be removed in future versions
  #
  # source://parseconfig//lib/parseconfig.rb#114
  def get_value(param); end

  # Returns the value of attribute groups.
  #
  # source://parseconfig//lib/parseconfig.rb#23
  def groups; end

  # Sets the attribute groups
  #
  # @param value the value to set the attribute groups to.
  #
  # source://parseconfig//lib/parseconfig.rb#23
  def groups=(_arg0); end

  # Import data from the config to our config object.
  #
  # source://parseconfig//lib/parseconfig.rb#54
  def import_config; end

  # Returns the value of attribute params.
  #
  # source://parseconfig//lib/parseconfig.rb#23
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://parseconfig//lib/parseconfig.rb#23
  def params=(_arg0); end

  # Validate the config file, and contents
  #
  # source://parseconfig//lib/parseconfig.rb#45
  def validate_config; end

  # Writes out the config file to output_stream
  #
  # source://parseconfig//lib/parseconfig.rb#172
  def write(output_stream = T.unsafe(nil), quoted = T.unsafe(nil)); end
end

# source://parseconfig//lib/parseconfig.rb#21
ParseConfig::Version = T.let(T.unsafe(nil), String)
