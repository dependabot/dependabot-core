# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspec-its` gem.
# Please instead update this file by running `bin/tapioca gem rspec-its`.


# source://rspec-its//lib/rspec/its/version.rb#1
module RSpec; end

module RSpec::Core::SharedContext
  include ::RSpec::Its
end

# source://rspec-its//lib/rspec/its/version.rb#2
module RSpec::Its
  # Creates a nested example group named by the submitted `attribute`,
  # and then generates an example using the submitted block.
  #
  # The attribute can be a `Symbol` or a `String`. Given a `String`
  # with dots, the result is as though you concatenated that `String`
  # onto the subject in an expression.
  #
  # When the subject is a `Hash`, you can refer to the Hash keys by
  # specifying a `Symbol` or `String` in an array.
  #
  # With an implicit subject, `is_expected` can be used as an alternative
  # to `should` (e.g. for one-liner use). An `are_expected` alias is also
  # supplied.
  #
  # With an implicit subject, `will` can be used as an alternative
  # to `expect { subject.attribute }.to matcher` (e.g. for one-liner use).
  #
  # With an implicit subject, `will_not` can be used as an alternative
  # to `expect { subject.attribute }.to_not matcher` (e.g. for one-liner use).
  #
  # You can pass more than one argument on the `its` block to add
  # some metadata to the generated example
  #
  # Note that this method does not modify `subject` in any way, so if you
  # refer to `subject` in `let` or `before` blocks, you're still
  # referring to the outer subject.
  #
  # @example
  #
  #   # This ...
  #   describe Array do
  #   its(:size) { should eq(0) }
  #   end
  #
  #   # ... generates the same runtime structure as this:
  #   describe Array do
  #   describe "size" do
  #   it "should eq(0)" do
  #   subject.size.should eq(0)
  #   end
  #   end
  #   end
  # @example
  #
  #   describe Person do
  #   subject do
  #   Person.new.tap do |person|
  #   person.phone_numbers << "555-1212"
  #   end
  #   end
  #
  #   its("phone_numbers.first") { should eq("555-1212") }
  #   end
  # @example
  #
  #   describe "a configuration Hash" do
  #   subject do
  #   { :max_users => 3,
  #   'admin' => :all_permissions.
  #   'john_doe' => {:permissions => [:read, :write]}}
  #   end
  #
  #   its([:max_users]) { should eq(3) }
  #   its(['admin']) { should eq(:all_permissions) }
  #   its(['john_doe', :permissions]) { should eq([:read, :write]) }
  #
  #   # You can still access its regular methods this way:
  #   its(:keys) { should include(:max_users) }
  #   its(:count) { should eq(2) }
  #   end
  # @example
  #
  #   describe Array do
  #   its(:size) { is_expected.to eq(0) }
  #   end
  # @example
  #
  #   describe Array do
  #   its(:foo) { will raise_error(NoMethodError) }
  #   end
  # @example
  #
  #   describe Array do
  #   its(:size) { will_not raise_error }
  #   end
  # @example
  #
  #   # This ...
  #   describe Array do
  #   its(:size, :focus) { should eq(0) }
  #   end
  #
  #   # ... generates the same runtime structure as this:
  #   describe Array do
  #   describe "size" do
  #   it "should eq(0)", :focus do
  #   subject.size.should eq(0)
  #   end
  #   end
  #   end
  # @example
  #
  #   describe Person do
  #   subject { Person.new }
  #   before { subject.age = 25 }
  #   its(:age) { should eq(25) }
  #   end
  #
  # source://rspec-its//lib/rspec/its.rb#121
  def its(attribute, *options, &block); end
end

# source://rspec-its//lib/rspec/its/version.rb#3
RSpec::Its::VERSION = T.let(T.unsafe(nil), String)
