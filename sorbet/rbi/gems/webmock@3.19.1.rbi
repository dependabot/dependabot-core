# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `webmock` gem.
# Please instead update this file by running `bin/tapioca gem webmock`.

# source://webmock//lib/webmock/http_lib_adapters/net_http_response.rb#18
module Net::WebMockHTTPResponse
  # source://webmock//lib/webmock/http_lib_adapters/net_http_response.rb#19
  def read_body(dest = T.unsafe(nil), &block); end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#208
class StubSocket
  # @return [StubSocket] a new instance of StubSocket
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#212
  def initialize(*args); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#220
  def close; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#216
  def closed?; end

  # Returns the value of attribute continue_timeout.
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#210
  def continue_timeout; end

  # Sets the attribute continue_timeout
  #
  # @param value the value to set the attribute continue_timeout to.
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#210
  def continue_timeout=(_arg0); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#228
  def io; end

  # Returns the value of attribute read_timeout.
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#210
  def read_timeout; end

  # Sets the attribute read_timeout
  #
  # @param value the value to set the attribute read_timeout to.
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#210
  def read_timeout=(_arg0); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#225
  def readuntil(*args); end

  # Returns the value of attribute write_timeout.
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#210
  def write_timeout; end

  # Sets the attribute write_timeout
  #
  # @param value the value to set the attribute write_timeout to.
  #
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#210
  def write_timeout=(_arg0); end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#232
class StubSocket::StubIO
  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#237
  def cipher; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#234
  def peer_cert; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#235
  def peeraddr; end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#233
  def setsockopt(*args); end

  # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#236
  def ssl_version; end
end

# source://webmock//lib/webmock/deprecation.rb#3
module WebMock
  include ::WebMock::API
  extend ::WebMock::API

  def after_request(*args, &block); end
  def allow_net_connect!(*args, &block); end
  def disable_net_connect!(*args, &block); end
  def net_connect_allowed?(*args, &block); end
  def registered_request?(*args, &block); end
  def reset_callbacks(*args, &block); end
  def reset_webmock(*args, &block); end

  class << self
    # source://webmock//lib/webmock/webmock.rb#143
    def after_request(options = T.unsafe(nil), &block); end

    # source://webmock//lib/webmock/webmock.rb#46
    def allow_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#30
    def disable!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#51
    def disable_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#51
    def disallow_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#38
    def enable!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#46
    def enable_net_connect!(options = T.unsafe(nil)); end

    # source://webmock//lib/webmock/webmock.rb#155
    def globally_stub_request(order = T.unsafe(nil), &block); end

    # source://webmock//lib/webmock/webmock.rb#109
    def hide_body_diff!; end

    # source://webmock//lib/webmock/webmock.rb#117
    def hide_stubbing_instructions!; end

    # @private
    #
    # source://webmock//lib/webmock/webmock.rb#5
    def included(clazz); end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/webmock.rb#63
    def net_connect_allowed?(uri = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/webmock.rb#85
    def net_connect_explicit_allowed?(allowed, uri = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/webmock.rb#75
    def net_http_connect_on_start?(uri); end

    # source://webmock//lib/webmock/webmock.rb#151
    def print_executed_requests; end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/webmock.rb#147
    def registered_request?(request_signature); end

    # source://webmock//lib/webmock/api.rb#14
    def request(method, uri); end

    # source://webmock//lib/webmock/webmock.rb#129
    def reset!; end

    # source://webmock//lib/webmock/webmock.rb#139
    def reset_callbacks; end

    # source://webmock//lib/webmock/webmock.rb#134
    def reset_webmock; end

    # source://webmock//lib/webmock/webmock.rb#105
    def show_body_diff!; end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/webmock.rb#113
    def show_body_diff?; end

    # source://webmock//lib/webmock/webmock.rb#121
    def show_stubbing_instructions!; end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/webmock.rb#125
    def show_stubbing_instructions?; end

    # source://webmock//lib/webmock/webmock.rb#26
    def version; end
  end
end

# source://webmock//lib/webmock/api.rb#4
module WebMock::API
  extend ::WebMock::API

  # source://webmock//lib/webmock/api.rb#14
  def a_request(method, uri); end

  # source://webmock//lib/webmock/api.rb#31
  def assert_not_requested(*args, &block); end

  # source://webmock//lib/webmock/api.rb#22
  def assert_requested(*args, &block); end

  # source://webmock//lib/webmock/api.rb#59
  def hash_excluding(*args); end

  # Similar to RSpec::Mocks::ArgumentMatchers#hash_including()
  #
  # Matches a hash that includes the specified key(s) or key/value pairs.
  # Ignores any additional keys.
  #
  # @example
  #
  #   object.should_receive(:message).with(hash_including(:key => val))
  #   object.should_receive(:message).with(hash_including(:key))
  #   object.should_receive(:message).with(hash_including(:key, :key2 => val2))
  #
  # source://webmock//lib/webmock/api.rb#51
  def hash_including(*args); end

  # source://webmock//lib/webmock/api.rb#31
  def refute_requested(*args, &block); end

  # source://webmock//lib/webmock/api.rb#67
  def remove_request_stub(stub); end

  # source://webmock//lib/webmock/api.rb#71
  def reset_executed_requests!; end

  # source://webmock//lib/webmock/api.rb#7
  def stub_http_request(method, uri); end

  # source://webmock//lib/webmock/api.rb#7
  def stub_request(method, uri); end

  private

  # this is a based on RSpec::Mocks::ArgumentMatchers#anythingize_lonely_keys
  #
  # source://webmock//lib/webmock/api.rb#104
  def anythingize_lonely_keys(*args); end

  # source://webmock//lib/webmock/api.rb#95
  def assert_request_not_requested(request, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/api.rb#86
  def assert_request_requested(request, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/api.rb#77
  def convert_uri_method_and_options_to_request_and_options(method, uri, options, &block); end

  class << self
    # source://webmock//lib/webmock/api.rb#14
    def request(method, uri); end
  end
end

# source://webmock//lib/webmock/assertion_failure.rb#4
class WebMock::AssertionFailure
  class << self
    # Returns the value of attribute error_class.
    #
    # source://webmock//lib/webmock/assertion_failure.rb#7
    def error_class; end

    # Sets the attribute error_class
    #
    # @param value the value to set the attribute error_class to.
    #
    # source://webmock//lib/webmock/assertion_failure.rb#7
    def error_class=(_arg0); end

    # @raise [@error_class]
    #
    # source://webmock//lib/webmock/assertion_failure.rb#8
    def failure(message); end
  end
end

# source://webmock//lib/webmock/request_pattern.rb#252
class WebMock::BodyPattern
  include ::WebMock::RSpecMatcherDetector

  # @return [BodyPattern] a new instance of BodyPattern
  #
  # source://webmock//lib/webmock/request_pattern.rb#270
  def initialize(pattern); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#280
  def matches?(body, content_type = T.unsafe(nil)); end

  # Returns the value of attribute pattern.
  #
  # source://webmock//lib/webmock/request_pattern.rb#268
  def pattern; end

  # source://webmock//lib/webmock/request_pattern.rb#297
  def to_s; end

  private

  # source://webmock//lib/webmock/request_pattern.rb#319
  def assert_non_multipart_body(content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#303
  def body_as_hash(body, content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#314
  def body_format(content_type); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#378
  def empty_string?(string); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#358
  def matching_body_array?(query_parameters, pattern, content_type); end

  # Compare two hashes for equality
  #
  # For two hashes to match they must have the same length and all
  # values must match when compared using `#===`.
  #
  # The following hashes are examples of matches:
  #
  #     {a: /\d+/} and {a: '123'}
  #
  #     {a: '123'} and {a: '123'}
  #
  #     {a: {b: /\d+/}} and {a: {b: '123'}}
  #
  #     {a: {b: 'wow'}} and {a: {b: 'wow'}}
  #
  # @param query_parameters [Hash] typically the result of parsing
  #   JSON, XML or URL encoded parameters.
  # @param pattern [Hash] which contains keys with a string, hash or
  #   regular expression value to use for comparison.
  # @return [Boolean] true if the paramaters match the comparison
  #   hash, false if not.
  #
  # source://webmock//lib/webmock/request_pattern.rb#348
  def matching_body_hashes?(query_parameters, pattern, content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#370
  def matching_values(actual, expected, content_type); end

  # source://webmock//lib/webmock/request_pattern.rb#382
  def normalize_hash(hash); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#386
  def url_encoded_body?(content_type); end
end

# source://webmock//lib/webmock/request_pattern.rb#255
WebMock::BodyPattern::BODY_FORMATS = T.let(T.unsafe(nil), Hash)

# source://webmock//lib/webmock/callback_registry.rb#4
class WebMock::CallbackRegistry
  class << self
    # source://webmock//lib/webmock/callback_registry.rb#7
    def add_callback(options, block); end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/callback_registry.rb#32
    def any_callbacks?; end

    # source://webmock//lib/webmock/callback_registry.rb#11
    def callbacks; end

    # source://webmock//lib/webmock/callback_registry.rb#15
    def invoke_callbacks(options, request_signature, response); end

    # source://webmock//lib/webmock/callback_registry.rb#28
    def reset; end
  end
end

# source://webmock//lib/webmock/config.rb#4
class WebMock::Config
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Config] a new instance of Config
  #
  # source://webmock//lib/webmock/config.rb#7
  def initialize; end

  # Returns the value of attribute allow.
  #
  # source://webmock//lib/webmock/config.rb#14
  def allow; end

  # Sets the attribute allow
  #
  # @param value the value to set the attribute allow to.
  #
  # source://webmock//lib/webmock/config.rb#14
  def allow=(_arg0); end

  # Returns the value of attribute allow_localhost.
  #
  # source://webmock//lib/webmock/config.rb#13
  def allow_localhost; end

  # Sets the attribute allow_localhost
  #
  # @param value the value to set the attribute allow_localhost to.
  #
  # source://webmock//lib/webmock/config.rb#13
  def allow_localhost=(_arg0); end

  # Returns the value of attribute allow_net_connect.
  #
  # source://webmock//lib/webmock/config.rb#12
  def allow_net_connect; end

  # Sets the attribute allow_net_connect
  #
  # @param value the value to set the attribute allow_net_connect to.
  #
  # source://webmock//lib/webmock/config.rb#12
  def allow_net_connect=(_arg0); end

  # Returns the value of attribute net_http_connect_on_start.
  #
  # source://webmock//lib/webmock/config.rb#15
  def net_http_connect_on_start; end

  # Sets the attribute net_http_connect_on_start
  #
  # @param value the value to set the attribute net_http_connect_on_start to.
  #
  # source://webmock//lib/webmock/config.rb#15
  def net_http_connect_on_start=(_arg0); end

  # Returns the value of attribute query_values_notation.
  #
  # source://webmock//lib/webmock/config.rb#17
  def query_values_notation; end

  # Sets the attribute query_values_notation
  #
  # @param value the value to set the attribute query_values_notation to.
  #
  # source://webmock//lib/webmock/config.rb#17
  def query_values_notation=(_arg0); end

  # Returns the value of attribute show_body_diff.
  #
  # source://webmock//lib/webmock/config.rb#18
  def show_body_diff; end

  # Sets the attribute show_body_diff
  #
  # @param value the value to set the attribute show_body_diff to.
  #
  # source://webmock//lib/webmock/config.rb#18
  def show_body_diff=(_arg0); end

  # Returns the value of attribute show_stubbing_instructions.
  #
  # source://webmock//lib/webmock/config.rb#16
  def show_stubbing_instructions; end

  # Sets the attribute show_stubbing_instructions
  #
  # @param value the value to set the attribute show_stubbing_instructions to.
  #
  # source://webmock//lib/webmock/config.rb#16
  def show_stubbing_instructions=(_arg0); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://webmock//lib/webmock/deprecation.rb#4
class WebMock::Deprecation
  class << self
    # source://webmock//lib/webmock/deprecation.rb#6
    def warning(message); end
  end
end

# source://webmock//lib/webmock/response.rb#149
class WebMock::DynamicResponse < ::WebMock::Response
  # @return [DynamicResponse] a new instance of DynamicResponse
  #
  # source://webmock//lib/webmock/response.rb#152
  def initialize(responder); end

  # source://webmock//lib/webmock/response.rb#156
  def evaluate(request_signature); end

  # Returns the value of attribute responder.
  #
  # source://webmock//lib/webmock/response.rb#150
  def responder; end

  # Sets the attribute responder
  #
  # @param value the value to set the attribute responder to.
  #
  # source://webmock//lib/webmock/response.rb#150
  def responder=(_arg0); end
end

# source://webmock//lib/webmock/util/hash_validator.rb#4
class WebMock::HashValidator
  # @return [HashValidator] a new instance of HashValidator
  #
  # source://webmock//lib/webmock/util/hash_validator.rb#5
  def initialize(hash); end

  # This code is based on https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/hash/keys.rb
  #
  # source://webmock//lib/webmock/util/hash_validator.rb#10
  def validate_keys(*valid_keys); end
end

# source://webmock//lib/webmock/request_pattern.rb#391
class WebMock::HeadersPattern
  # @return [HeadersPattern] a new instance of HeadersPattern
  #
  # source://webmock//lib/webmock/request_pattern.rb#392
  def initialize(pattern); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#396
  def matches?(headers); end

  # source://webmock//lib/webmock/request_pattern.rb#412
  def pp_to_s; end

  # source://webmock//lib/webmock/request_pattern.rb#408
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#418
  def empty_headers?(headers); end
end

# source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter.rb#4
class WebMock::HttpLibAdapter
  class << self
    # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter.rb#5
    def adapter_for(lib); end
  end
end

# source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#4
class WebMock::HttpLibAdapterRegistry
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [HttpLibAdapterRegistry] a new instance of HttpLibAdapterRegistry
  #
  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#9
  def initialize; end

  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#17
  def each_adapter(&block); end

  # Returns the value of attribute http_lib_adapters.
  #
  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#7
  def http_lib_adapters; end

  # Sets the attribute http_lib_adapters
  #
  # @param value the value to set the attribute http_lib_adapters to.
  #
  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#7
  def http_lib_adapters=(_arg0); end

  # source://webmock//lib/webmock/http_lib_adapters/http_lib_adapter_registry.rb#13
  def register(lib, adapter); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#10
module WebMock::HttpLibAdapters; end

# source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#15
class WebMock::HttpLibAdapters::ExconAdapter < ::WebMock::HttpLibAdapter
  class << self
    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#37
    def add_excon_stub; end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#120
    def body_from(params); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#110
    def build_request(params); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#81
    def connection_params_from(hash); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#33
    def disable!; end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#29
    def enable!; end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#54
    def handle_request(params); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#140
    def mock_response(real); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#74
    def new_excon_connection(params); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#148
    def perform_callbacks(request, response, options = T.unsafe(nil)); end

    # @raise [Excon::Errors::Timeout]
    #
    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#129
    def real_response(mock); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#47
    def remove_excon_stub; end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#87
    def request_params_from(hash); end

    # source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#96
    def to_query(hash); end
  end
end

# source://webmock//lib/webmock/http_lib_adapters/excon_adapter.rb#16
WebMock::HttpLibAdapters::ExconAdapter::PARAMS_TO_DELETE = T.let(T.unsafe(nil), Array)

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#11
class WebMock::HttpLibAdapters::NetHttpAdapter < ::WebMock::HttpLibAdapter
  class << self
    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#23
    def disable!; end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#16
    def enable!; end
  end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#14
WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetHTTP = Net::HTTP

# source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#4
module WebMock::Matchers; end

# this is a based on RSpec::Mocks::ArgumentMatchers::AnyArgMatcher
#
# source://webmock//lib/webmock/matchers/any_arg_matcher.rb#6
class WebMock::Matchers::AnyArgMatcher
  # @return [AnyArgMatcher] a new instance of AnyArgMatcher
  #
  # source://webmock//lib/webmock/matchers/any_arg_matcher.rb#7
  def initialize(ignore); end

  # source://webmock//lib/webmock/matchers/any_arg_matcher.rb#10
  def ==(other); end
end

# Base class for Hash matchers
# https://github.com/rspec/rspec-mocks/blob/master/lib/rspec/mocks/argument_matchers.rb
#
# source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#7
class WebMock::Matchers::HashArgumentMatcher
  # @return [HashArgumentMatcher] a new instance of HashArgumentMatcher
  #
  # source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#8
  def initialize(expected); end

  # source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#12
  def ==(_actual, &block); end

  class << self
    # source://webmock//lib/webmock/matchers/hash_argument_matcher.rb#18
    def from_rspec_matcher(matcher); end
  end
end

# this is a based on RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher
# https://github.com/rspec/rspec-mocks/blob/master/lib/rspec/mocks/argument_matchers.rb
#
# source://webmock//lib/webmock/matchers/hash_excluding_matcher.rb#7
class WebMock::Matchers::HashExcludingMatcher < ::WebMock::Matchers::HashArgumentMatcher
  # source://webmock//lib/webmock/matchers/hash_excluding_matcher.rb#8
  def ==(actual); end

  # source://webmock//lib/webmock/matchers/hash_excluding_matcher.rb#12
  def inspect; end
end

# this is a based on RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher
# https://github.com/rspec/rspec-mocks/blob/master/lib/rspec/mocks/argument_matchers.rb
#
# source://webmock//lib/webmock/matchers/hash_including_matcher.rb#7
class WebMock::Matchers::HashIncludingMatcher < ::WebMock::Matchers::HashArgumentMatcher
  # source://webmock//lib/webmock/matchers/hash_including_matcher.rb#8
  def ==(actual); end

  # source://webmock//lib/webmock/matchers/hash_including_matcher.rb#14
  def inspect; end
end

# source://webmock//lib/webmock/request_pattern.rb#95
class WebMock::MethodPattern
  # @return [MethodPattern] a new instance of MethodPattern
  #
  # source://webmock//lib/webmock/request_pattern.rb#96
  def initialize(pattern); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#100
  def matches?(method); end

  # source://webmock//lib/webmock/request_pattern.rb#104
  def to_s; end
end

# source://webmock//lib/webmock/errors.rb#5
class WebMock::NetConnectNotAllowedError < ::Exception
  # @return [NetConnectNotAllowedError] a new instance of NetConnectNotAllowedError
  #
  # source://webmock//lib/webmock/errors.rb#6
  def initialize(request_signature); end
end

# source://webmock//lib/webmock/http_lib_adapters/net_http.rb#242
module WebMock::NetHTTPUtility
  class << self
    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#281
    def check_right_http_connection; end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#272
    def get_uri(net_http, path = T.unsafe(nil)); end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#285
    def puts_warning_for_right_http_if_needed; end

    # source://webmock//lib/webmock/http_lib_adapters/net_http.rb#244
    def request_signature_from_request(net_http, request, body = T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/request_pattern.rb#5
module WebMock::RSpecMatcherDetector
  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#10
  def rSpecHashExcludingMatcher?(matcher); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#6
  def rSpecHashIncludingMatcher?(matcher); end
end

# source://webmock//lib/webmock/rack_response.rb#4
class WebMock::RackResponse < ::WebMock::Response
  # @return [RackResponse] a new instance of RackResponse
  #
  # source://webmock//lib/webmock/rack_response.rb#5
  def initialize(app); end

  # source://webmock//lib/webmock/rack_response.rb#21
  def body_from_rack_response(response); end

  # source://webmock//lib/webmock/rack_response.rb#28
  def build_rack_env(request); end

  # source://webmock//lib/webmock/rack_response.rb#9
  def evaluate(request); end

  # source://webmock//lib/webmock/rack_response.rb#63
  def session; end

  # source://webmock//lib/webmock/rack_response.rb#67
  def session_options; end
end

# source://webmock//lib/webmock/request_body_diff.rb#7
class WebMock::RequestBodyDiff
  # @return [RequestBodyDiff] a new instance of RequestBodyDiff
  #
  # source://webmock//lib/webmock/request_body_diff.rb#9
  def initialize(request_signature, request_stub); end

  # source://webmock//lib/webmock/request_body_diff.rb#14
  def body_diff; end

  private

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_body_diff.rb#57
  def parseable_json?(body_pattern); end

  # Returns the value of attribute request_signature.
  #
  # source://webmock//lib/webmock/request_body_diff.rb#20
  def request_signature; end

  # source://webmock//lib/webmock/request_body_diff.rb#33
  def request_signature_body_hash; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_body_diff.rb#25
  def request_signature_diffable?; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_body_diff.rb#49
  def request_signature_parseable_json?; end

  # Returns the value of attribute request_stub.
  #
  # source://webmock//lib/webmock/request_body_diff.rb#20
  def request_stub; end

  # source://webmock//lib/webmock/request_body_diff.rb#43
  def request_stub_body; end

  # source://webmock//lib/webmock/request_body_diff.rb#37
  def request_stub_body_hash; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_body_diff.rb#29
  def request_stub_diffable?; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_body_diff.rb#53
  def request_stub_parseable_json?; end
end

# source://webmock//lib/webmock/request_execution_verifier.rb#4
class WebMock::RequestExecutionVerifier
  # @return [RequestExecutionVerifier] a new instance of RequestExecutionVerifier
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#8
  def initialize(request_pattern = T.unsafe(nil), expected_times_executed = T.unsafe(nil), at_least_times_executed = T.unsafe(nil), at_most_times_executed = T.unsafe(nil)); end

  # Returns the value of attribute at_least_times_executed.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def at_least_times_executed; end

  # Sets the attribute at_least_times_executed
  #
  # @param value the value to set the attribute at_least_times_executed to.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def at_least_times_executed=(_arg0); end

  # Returns the value of attribute at_most_times_executed.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def at_most_times_executed; end

  # Sets the attribute at_most_times_executed
  #
  # @param value the value to set the attribute at_most_times_executed to.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def at_most_times_executed=(_arg0); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#38
  def description; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#28
  def does_not_match?; end

  # Returns the value of attribute expected_times_executed.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def expected_times_executed; end

  # Sets the attribute expected_times_executed
  #
  # @param value the value to set the attribute expected_times_executed to.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def expected_times_executed=(_arg0); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#42
  def failure_message; end

  # source://webmock//lib/webmock/request_execution_verifier.rb#46
  def failure_message_when_negated; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#15
  def matches?; end

  # Returns the value of attribute request_pattern.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def request_pattern; end

  # Sets the attribute request_pattern
  #
  # @param value the value to set the attribute request_pattern to.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def request_pattern=(_arg0); end

  # Returns the value of attribute times_executed.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def times_executed; end

  # Sets the attribute times_executed
  #
  # @param value the value to set the attribute times_executed to.
  #
  # source://webmock//lib/webmock/request_execution_verifier.rb#6
  def times_executed=(_arg0); end

  private

  # source://webmock//lib/webmock/request_execution_verifier.rb#56
  def failure_message_phrase(is_negated = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#62
  def quantity_phrase(is_negated = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_execution_verifier.rb#74
  def times(times); end

  class << self
    # source://webmock//lib/webmock/request_execution_verifier.rb#50
    def executed_requests_message; end
  end
end

# source://webmock//lib/webmock/request_pattern.rb#15
class WebMock::RequestPattern
  # @return [RequestPattern] a new instance of RequestPattern
  #
  # source://webmock//lib/webmock/request_pattern.rb#19
  def initialize(method, uri, options = T.unsafe(nil)); end

  # Returns the value of attribute body_pattern.
  #
  # source://webmock//lib/webmock/request_pattern.rb#17
  def body_pattern; end

  # Returns the value of attribute headers_pattern.
  #
  # source://webmock//lib/webmock/request_pattern.rb#17
  def headers_pattern; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#35
  def matches?(request_signature); end

  # Returns the value of attribute method_pattern.
  #
  # source://webmock//lib/webmock/request_pattern.rb#17
  def method_pattern; end

  # source://webmock//lib/webmock/request_pattern.rb#45
  def to_s; end

  # Returns the value of attribute uri_pattern.
  #
  # source://webmock//lib/webmock/request_pattern.rb#17
  def uri_pattern; end

  # @raise [ArgumentError]
  #
  # source://webmock//lib/webmock/request_pattern.rb#28
  def with(options = T.unsafe(nil), &block); end

  private

  # source://webmock//lib/webmock/request_pattern.rb#57
  def assign_options(options); end

  # source://webmock//lib/webmock/request_pattern.rb#80
  def create_uri_pattern(uri); end

  # source://webmock//lib/webmock/request_pattern.rb#66
  def set_basic_auth_as_headers!(options); end

  # source://webmock//lib/webmock/request_pattern.rb#74
  def validate_basic_auth!(basic_auth); end
end

# source://webmock//lib/webmock/request_registry.rb#5
class WebMock::RequestRegistry
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [RequestRegistry] a new instance of RequestRegistry
  #
  # source://webmock//lib/webmock/request_registry.rb#10
  def initialize; end

  # Returns the value of attribute requested_signatures.
  #
  # source://webmock//lib/webmock/request_registry.rb#8
  def requested_signatures; end

  # Sets the attribute requested_signatures
  #
  # @param value the value to set the attribute requested_signatures to.
  #
  # source://webmock//lib/webmock/request_registry.rb#8
  def requested_signatures=(_arg0); end

  # source://webmock//lib/webmock/request_registry.rb#14
  def reset!; end

  # source://webmock//lib/webmock/request_registry.rb#18
  def times_executed(request_pattern); end

  # source://webmock//lib/webmock/request_registry.rb#24
  def to_s; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://webmock//lib/webmock/request_signature.rb#5
class WebMock::RequestSignature
  # @return [RequestSignature] a new instance of RequestSignature
  #
  # source://webmock//lib/webmock/request_signature.rb#10
  def initialize(method, uri, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_signature.rb#34
  def ==(other); end

  # Returns the value of attribute body.
  #
  # source://webmock//lib/webmock/request_signature.rb#7
  def body; end

  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://webmock//lib/webmock/request_signature.rb#7
  def body=(_arg0); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_signature.rb#34
  def eql?(other); end

  # source://webmock//lib/webmock/request_signature.rb#30
  def hash; end

  # Returns the value of attribute headers.
  #
  # source://webmock//lib/webmock/request_signature.rb#8
  def headers; end

  # source://webmock//lib/webmock/request_signature.rb#26
  def headers=(headers); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_signature.rb#43
  def json_headers?; end

  # Returns the value of attribute method.
  #
  # source://webmock//lib/webmock/request_signature.rb#7
  def method; end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://webmock//lib/webmock/request_signature.rb#7
  def method=(_arg0); end

  # source://webmock//lib/webmock/request_signature.rb#16
  def to_s; end

  # Returns the value of attribute uri.
  #
  # source://webmock//lib/webmock/request_signature.rb#7
  def uri; end

  # Sets the attribute uri
  #
  # @param value the value to set the attribute uri to.
  #
  # source://webmock//lib/webmock/request_signature.rb#7
  def uri=(_arg0); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_signature.rb#39
  def url_encoded?; end

  private

  # source://webmock//lib/webmock/request_signature.rb#49
  def assign_options(options); end
end

# source://webmock//lib/webmock/request_signature_snippet.rb#6
class WebMock::RequestSignatureSnippet
  # @return [RequestSignatureSnippet] a new instance of RequestSignatureSnippet
  #
  # source://webmock//lib/webmock/request_signature_snippet.rb#10
  def initialize(request_signature); end

  # Returns the value of attribute request_signature.
  #
  # source://webmock//lib/webmock/request_signature_snippet.rb#8
  def request_signature; end

  # Returns the value of attribute request_stub.
  #
  # source://webmock//lib/webmock/request_signature_snippet.rb#8
  def request_stub; end

  # source://webmock//lib/webmock/request_signature_snippet.rb#22
  def request_stubs; end

  # source://webmock//lib/webmock/request_signature_snippet.rb#15
  def stubbing_instructions; end

  private

  # source://webmock//lib/webmock/request_signature_snippet.rb#35
  def add_body_diff(stub, text); end

  # source://webmock//lib/webmock/request_signature_snippet.rb#54
  def pretty_print_to_string(string_to_print); end

  # source://webmock//lib/webmock/request_signature_snippet.rb#45
  def request_params; end

  # source://webmock//lib/webmock/request_signature_snippet.rb#40
  def signature_stub_body_diff(stub); end
end

# source://webmock//lib/webmock/request_stub.rb#4
class WebMock::RequestStub
  # @return [RequestStub] a new instance of RequestStub
  #
  # source://webmock//lib/webmock/request_stub.rb#8
  def initialize(method, uri); end

  # source://webmock//lib/webmock/request_stub.rb#65
  def and_raise(*exceptions); end

  # source://webmock//lib/webmock/request_stub.rb#19
  def and_return(*response_hashes, &block); end

  # @raise [ArgumentError]
  #
  # source://webmock//lib/webmock/request_stub.rb#29
  def and_return_json(*response_hashes); end

  # source://webmock//lib/webmock/request_stub.rb#73
  def and_timeout; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_stub.rb#90
  def has_responses?; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_stub.rb#108
  def matches?(request_signature); end

  # Returns the value of attribute request_pattern.
  #
  # source://webmock//lib/webmock/request_stub.rb#6
  def request_pattern; end

  # Sets the attribute request_pattern
  #
  # @param value the value to set the attribute request_pattern to.
  #
  # source://webmock//lib/webmock/request_stub.rb#6
  def request_pattern=(_arg0); end

  # source://webmock//lib/webmock/request_stub.rb#79
  def response; end

  # source://webmock//lib/webmock/request_stub.rb#94
  def then; end

  # source://webmock//lib/webmock/request_stub.rb#98
  def times(number); end

  # source://webmock//lib/webmock/request_stub.rb#61
  def to_rack(app, options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/request_stub.rb#65
  def to_raise(*exceptions); end

  # source://webmock//lib/webmock/request_stub.rb#19
  def to_return(*response_hashes, &block); end

  # @raise [ArgumentError]
  #
  # source://webmock//lib/webmock/request_stub.rb#29
  def to_return_json(*response_hashes); end

  # source://webmock//lib/webmock/request_stub.rb#112
  def to_s; end

  # source://webmock//lib/webmock/request_stub.rb#73
  def to_timeout; end

  # source://webmock//lib/webmock/request_stub.rb#14
  def with(params = T.unsafe(nil), &block); end

  class << self
    # source://webmock//lib/webmock/request_stub.rb#116
    def from_request_signature(signature); end
  end
end

# source://webmock//lib/webmock/response.rb#17
class WebMock::Response
  # @return [Response] a new instance of Response
  #
  # source://webmock//lib/webmock/response.rb#18
  def initialize(options = T.unsafe(nil)); end

  # source://webmock//lib/webmock/response.rb#97
  def ==(other); end

  # source://webmock//lib/webmock/response.rb#40
  def body; end

  # source://webmock//lib/webmock/response.rb#44
  def body=(body); end

  # source://webmock//lib/webmock/response.rb#88
  def evaluate(request_signature); end

  # source://webmock//lib/webmock/response.rb#58
  def exception; end

  # source://webmock//lib/webmock/response.rb#62
  def exception=(exception); end

  # source://webmock//lib/webmock/response.rb#29
  def headers; end

  # source://webmock//lib/webmock/response.rb#33
  def headers=(headers); end

  # source://webmock//lib/webmock/response.rb#78
  def options=(options); end

  # @raise [@exception]
  #
  # source://webmock//lib/webmock/response.rb#70
  def raise_error_if_any; end

  # source://webmock//lib/webmock/response.rb#74
  def should_timeout; end

  # source://webmock//lib/webmock/response.rb#50
  def status; end

  # source://webmock//lib/webmock/response.rb#54
  def status=(status); end

  private

  # source://webmock//lib/webmock/response.rb#115
  def assert_valid_body!; end

  # source://webmock//lib/webmock/response.rb#128
  def read_raw_response(io); end

  # source://webmock//lib/webmock/response.rb#107
  def stringify_body!; end
end

# source://webmock//lib/webmock/response.rb#145
class WebMock::Response::InvalidBody < ::StandardError; end

# source://webmock//lib/webmock/response.rb#7
class WebMock::ResponseFactory
  class << self
    # source://webmock//lib/webmock/response.rb#8
    def response_for(options); end
  end
end

# source://webmock//lib/webmock/responses_sequence.rb#5
class WebMock::ResponsesSequence
  # @return [ResponsesSequence] a new instance of ResponsesSequence
  #
  # source://webmock//lib/webmock/responses_sequence.rb#9
  def initialize(responses); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/responses_sequence.rb#15
  def end?; end

  # source://webmock//lib/webmock/responses_sequence.rb#19
  def next_response; end

  # Returns the value of attribute times_to_repeat.
  #
  # source://webmock//lib/webmock/responses_sequence.rb#7
  def times_to_repeat; end

  # Sets the attribute times_to_repeat
  #
  # @param value the value to set the attribute times_to_repeat to.
  #
  # source://webmock//lib/webmock/responses_sequence.rb#7
  def times_to_repeat=(_arg0); end

  private

  # source://webmock//lib/webmock/responses_sequence.rb#31
  def increase_position; end
end

# source://webmock//lib/webmock/stub_registry.rb#5
class WebMock::StubRegistry
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [StubRegistry] a new instance of StubRegistry
  #
  # source://webmock//lib/webmock/stub_registry.rb#10
  def initialize; end

  # source://webmock//lib/webmock/stub_registry.rb#14
  def global_stubs; end

  # source://webmock//lib/webmock/stub_registry.rb#22
  def register_global_stub(order = T.unsafe(nil), &block); end

  # source://webmock//lib/webmock/stub_registry.rb#50
  def register_request_stub(stub); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/stub_registry.rb#61
  def registered_request?(request_signature); end

  # source://webmock//lib/webmock/stub_registry.rb#55
  def remove_request_stub(stub); end

  # Returns the value of attribute request_stubs.
  #
  # source://webmock//lib/webmock/stub_registry.rb#8
  def request_stubs; end

  # Sets the attribute request_stubs
  #
  # @param value the value to set the attribute request_stubs to.
  #
  # source://webmock//lib/webmock/stub_registry.rb#8
  def request_stubs=(_arg0); end

  # source://webmock//lib/webmock/stub_registry.rb#18
  def reset!; end

  # source://webmock//lib/webmock/stub_registry.rb#65
  def response_for_request(request_signature); end

  private

  # source://webmock//lib/webmock/stub_registry.rb#79
  def evaluate_response_for_request(response, request_signature); end

  # source://webmock//lib/webmock/stub_registry.rb#72
  def request_stub_for(request_signature); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://webmock//lib/webmock/stub_request_snippet.rb#4
class WebMock::StubRequestSnippet
  # @return [StubRequestSnippet] a new instance of StubRequestSnippet
  #
  # source://webmock//lib/webmock/stub_request_snippet.rb#5
  def initialize(request_stub); end

  # source://webmock//lib/webmock/stub_request_snippet.rb#9
  def body_pattern; end

  # source://webmock//lib/webmock/stub_request_snippet.rb#13
  def to_s(with_response = T.unsafe(nil)); end
end

# source://webmock//lib/webmock/request_pattern.rb#177
class WebMock::URIAddressablePattern < ::WebMock::URIPattern
  # source://webmock//lib/webmock/request_pattern.rb#178
  def add_query_params(query_params); end

  private

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#203
  def matches_with_variations?(uri); end

  # source://webmock//lib/webmock/request_pattern.rb#199
  def pattern_inspect; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#189
  def pattern_matches?(uri); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#215
  def template_matches_uri?(template, uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#161
class WebMock::URICallablePattern < ::WebMock::URIPattern
  private

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#164
  def pattern_matches?(uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#110
class WebMock::URIPattern
  include ::WebMock::RSpecMatcherDetector

  # @return [URIPattern] a new instance of URIPattern
  #
  # source://webmock//lib/webmock/request_pattern.rb#113
  def initialize(pattern); end

  # source://webmock//lib/webmock/request_pattern.rb#125
  def add_query_params(query_params); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#140
  def matches?(uri); end

  # source://webmock//lib/webmock/request_pattern.rb#144
  def to_s; end

  private

  # source://webmock//lib/webmock/request_pattern.rb#152
  def pattern_inspect; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#156
  def query_params_matches?(uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#169
class WebMock::URIRegexpPattern < ::WebMock::URIPattern
  private

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#172
  def pattern_matches?(uri); end
end

# source://webmock//lib/webmock/request_pattern.rb#222
class WebMock::URIStringPattern < ::WebMock::URIPattern
  # source://webmock//lib/webmock/request_pattern.rb#223
  def add_query_params(query_params); end

  private

  # source://webmock//lib/webmock/request_pattern.rb#246
  def pattern_inspect; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/request_pattern.rb#234
  def pattern_matches?(uri); end
end

# source://webmock//lib/webmock/util/query_mapper.rb#3
module WebMock::Util; end

# source://webmock//lib/webmock/util/hash_counter.rb#7
class WebMock::Util::HashCounter
  # @return [HashCounter] a new instance of HashCounter
  #
  # source://webmock//lib/webmock/util/hash_counter.rb#10
  def initialize; end

  # source://webmock//lib/webmock/util/hash_counter.rb#38
  def each(&block); end

  # source://webmock//lib/webmock/util/hash_counter.rb#24
  def get(key); end

  # Returns the value of attribute hash.
  #
  # source://webmock//lib/webmock/util/hash_counter.rb#8
  def hash; end

  # Sets the attribute hash
  #
  # @param value the value to set the attribute hash to.
  #
  # source://webmock//lib/webmock/util/hash_counter.rb#8
  def hash=(_arg0); end

  # source://webmock//lib/webmock/util/hash_counter.rb#17
  def put(key, num = T.unsafe(nil)); end

  # source://webmock//lib/webmock/util/hash_counter.rb#30
  def select(&block); end
end

# source://webmock//lib/webmock/util/hash_keys_stringifier.rb#5
class WebMock::Util::HashKeysStringifier
  class << self
    # source://webmock//lib/webmock/util/hash_keys_stringifier.rb#7
    def stringify_keys!(arg, options = T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/util/headers.rb#9
class WebMock::Util::Headers
  class << self
    # source://webmock//lib/webmock/util/headers.rb#61
    def basic_auth_header(*credentials); end

    # source://webmock//lib/webmock/util/headers.rb#57
    def decode_userinfo_from_header(header); end

    # source://webmock//lib/webmock/util/headers.rb#15
    def normalize_headers(headers); end

    # source://webmock//lib/webmock/util/headers.rb#65
    def normalize_name(name); end

    # source://webmock//lib/webmock/util/headers.rb#42
    def pp_headers_string(headers); end

    # source://webmock//lib/webmock/util/headers.rb#28
    def sorted_headers_string(headers); end
  end
end

# source://webmock//lib/webmock/util/headers.rb#13
WebMock::Util::Headers::JOIN = T.let(T.unsafe(nil), String)

# source://webmock//lib/webmock/util/headers.rb#12
WebMock::Util::Headers::NONSTANDARD_HEADER_DELIMITER = T.let(T.unsafe(nil), String)

# source://webmock//lib/webmock/util/headers.rb#11
WebMock::Util::Headers::STANDARD_HEADER_DELIMITER = T.let(T.unsafe(nil), String)

# source://webmock//lib/webmock/util/json.rb#12
class WebMock::Util::JSON
  class << self
    # Ensure that ":" and "," are always followed by a space
    #
    # source://webmock//lib/webmock/util/json.rb#28
    def convert_json_to_yaml(json); end

    # source://webmock//lib/webmock/util/json.rb#15
    def parse(json); end

    # source://webmock//lib/webmock/util/json.rb#23
    def unescape(str); end
  end
end

# source://webmock//lib/webmock/util/json.rb#13
class WebMock::Util::JSON::ParseError < ::StandardError; end

# source://webmock//lib/webmock/util/query_mapper.rb#4
class WebMock::Util::QueryMapper
  class << self
    # source://webmock//lib/webmock/util/query_mapper.rb#81
    def collect_query_hash(query_array, empty_accumulator, options); end

    # source://webmock//lib/webmock/util/query_mapper.rb#74
    def collect_query_parts(query); end

    # source://webmock//lib/webmock/util/query_mapper.rb#221
    def dehash(hash); end

    # source://webmock//lib/webmock/util/query_mapper.rb#106
    def fill_accumulator_for_dot(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#95
    def fill_accumulator_for_flat(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#102
    def fill_accumulator_for_flat_array(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#125
    def fill_accumulator_for_subscript(accumulator, key, value); end

    # source://webmock//lib/webmock/util/query_mapper.rb#63
    def normalize_query_hash(query_hash, empty_accumulator, options); end

    # Converts the query component to a Hash value.
    #
    # @example
    #   WebMock::Util::QueryMapper.query_to_values("?one=1&two=2&three=3")
    #   #=> {"one" => "1", "two" => "2", "three" => "3"}
    #   WebMock::Util::QueryMapper("?one[two][three]=four").query_values
    #   #=> {"one" => {"two" => {"three" => "four"}}}
    #   WebMock::Util::QueryMapper.query_to_values("?one.two.three=four",
    #   :notation => :dot
    #   )
    #   #=> {"one" => {"two" => {"three" => "four"}}}
    #   WebMock::Util::QueryMapper.query_to_values("?one[two][three]=four",
    #   :notation => :flat
    #   )
    #   #=> {"one[two][three]" => "four"}
    #   WebMock::Util::QueryMapper.query_to_values("?one.two.three=four",
    #   :notation => :flat
    #   )
    #   #=> {"one.two.three" => "four"}
    #   WebMock::Util::QueryMapper(
    #   "?one[two][three][]=four&one[two][three][]=five"
    #   )
    #   #=> {"one" => {"two" => {"three" => ["four", "five"]}}}
    #   WebMock::Util::QueryMapper.query_to_values(
    #   "?one=two&one=three").query_values(:notation => :flat_array)
    #   #=> [['one', 'two'], ['one', 'three']]
    # @option [Symbol]
    # @param [Symbol] [Hash] a customizable set of options
    # @return [Hash, Array] The query string parsed as a Hash or Array object.
    #
    # source://webmock//lib/webmock/util/query_mapper.rb#42
    def query_to_values(query, options = T.unsafe(nil)); end

    # new_query_values have form [['key1', 'value1'], ['key2', 'value2']]
    #
    # source://webmock//lib/webmock/util/query_mapper.rb#247
    def to_query(parent, value, options = T.unsafe(nil)); end

    # Sets the query component for this URI from a Hash object.
    # This method produces a query string using the :subscript notation.
    # An empty Hash will result in a nil query.
    #
    # @param new_query_values [Hash, #to_hash, Array] The new query values.
    #
    # source://webmock//lib/webmock/util/query_mapper.rb#179
    def values_to_query(new_query_values, options = T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/util/uri.rb#7
class WebMock::Util::URI
  class << self
    # source://webmock//lib/webmock/util/uri.rb#67
    def encode_unsafe_chars_in_userinfo(userinfo); end

    # source://webmock//lib/webmock/util/uri.rb#28
    def heuristic_parse(uri); end

    # @return [Boolean]
    #
    # source://webmock//lib/webmock/util/uri.rb#71
    def is_uri_localhost?(uri); end

    # source://webmock//lib/webmock/util/uri.rb#32
    def normalize_uri(uri); end

    # source://webmock//lib/webmock/util/uri.rb#78
    def sort_query_values(query_values); end

    # source://webmock//lib/webmock/util/uri.rb#59
    def strip_default_port_from_uri_string(uri_string); end

    # source://webmock//lib/webmock/util/uri.rb#89
    def uris_encoded_and_unencoded(uris); end

    # source://webmock//lib/webmock/util/uri.rb#83
    def uris_with_inferred_port_and_without(uris); end

    # source://webmock//lib/webmock/util/uri.rb#98
    def uris_with_scheme_and_without(uris); end

    # source://webmock//lib/webmock/util/uri.rb#104
    def uris_with_trailing_slash_and_without(uris); end

    # source://webmock//lib/webmock/util/uri.rb#38
    def variations_of_uri_as_strings(uri_object, only_with_scheme: T.unsafe(nil)); end
  end
end

# source://webmock//lib/webmock/util/uri.rb#12
WebMock::Util::URI::ADDRESSABLE_URIS = T.let(T.unsafe(nil), Hash)

# source://webmock//lib/webmock/util/uri.rb#8
module WebMock::Util::URI::CharacterClasses; end

# source://webmock//lib/webmock/util/uri.rb#9
WebMock::Util::URI::CharacterClasses::USERINFO = T.let(T.unsafe(nil), String)

# source://webmock//lib/webmock/util/uri.rb#16
WebMock::Util::URI::NORMALIZED_URIS = T.let(T.unsafe(nil), Hash)

# source://webmock//lib/webmock/util/values_stringifier.rb#3
class WebMock::Util::ValuesStringifier
  class << self
    # source://webmock//lib/webmock/util/values_stringifier.rb#4
    def stringify_values(value); end
  end
end

# source://webmock//lib/webmock/version.rb#4
WebMock::VERSION = T.let(T.unsafe(nil), String)

# source://webmock//lib/webmock/util/version_checker.rb#28
class WebMock::VersionChecker
  # @return [VersionChecker] a new instance of VersionChecker
  #
  # source://webmock//lib/webmock/util/version_checker.rb#29
  def initialize(library_name, library_version, min_patch_level, max_minor_version = T.unsafe(nil), unsupported_versions = T.unsafe(nil)); end

  # source://webmock//lib/webmock/util/version_checker.rb#45
  def check_version!; end

  private

  # source://webmock//lib/webmock/util/version_checker.rb#109
  def colorize(text, color_code); end

  # source://webmock//lib/webmock/util/version_checker.rb#86
  def compare_version; end

  # source://webmock//lib/webmock/util/version_checker.rb#105
  def parse_version(version); end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/util/version_checker.rb#57
  def too_high?; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/util/version_checker.rb#53
  def too_low?; end

  # @return [Boolean]
  #
  # source://webmock//lib/webmock/util/version_checker.rb#61
  def unsupported_version?; end

  # source://webmock//lib/webmock/util/version_checker.rb#98
  def version_requirement; end

  # source://webmock//lib/webmock/util/version_checker.rb#70
  def warn_about_too_high; end

  # source://webmock//lib/webmock/util/version_checker.rb#65
  def warn_about_too_low; end

  # source://webmock//lib/webmock/util/version_checker.rb#76
  def warn_about_unsupported_version; end

  # source://webmock//lib/webmock/util/version_checker.rb#82
  def warn_in_red(text); end
end
