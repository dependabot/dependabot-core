# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `excon` gem.
# Please instead update this file by running `bin/tapioca gem excon`.

# Define defaults first so they will be available to other files
#
# source://excon//lib/excon/version.rb#3
module Excon
  class << self
    # source://excon//lib/excon.rb#260
    def connect(url, params = T.unsafe(nil), &block); end

    # @return [Hash] defaults for Excon connections
    #
    # source://excon//lib/excon.rb#49
    def defaults; end

    # Change defaults for Excon connections
    #
    # @return [Hash] defaults for Excon connections
    #
    # source://excon//lib/excon.rb#55
    def defaults=(new_defaults); end

    # source://excon//lib/excon.rb#260
    def delete(url, params = T.unsafe(nil), &block); end

    # source://excon//lib/excon.rb#59
    def display_warning(warning); end

    # source://excon//lib/excon.rb#260
    def get(url, params = T.unsafe(nil), &block); end

    # source://excon//lib/excon.rb#260
    def head(url, params = T.unsafe(nil), &block); end

    # Status of mocking
    #
    # source://excon//lib/excon.rb#75
    def mock; end

    # Change the status of mocking
    # false is the default and works as expected
    # true returns a value from stubs or raises
    #
    # source://excon//lib/excon.rb#83
    def mock=(new_mock); end

    # Initializes a new keep-alive session for a given remote host
    #
    # @param url [String] The destination URL
    # @param params [Hash<Symbol, >] One or more option params to set on the Connection instance
    # @return [Connection] A new Excon::Connection instance
    # @see Connection#initialize
    #
    # source://excon//lib/excon.rb#119
    def new(url, params = T.unsafe(nil)); end

    # source://excon//lib/excon.rb#260
    def options(url, params = T.unsafe(nil), &block); end

    # source://excon//lib/excon.rb#260
    def patch(url, params = T.unsafe(nil), &block); end

    # source://excon//lib/excon.rb#260
    def post(url, params = T.unsafe(nil), &block); end

    # source://excon//lib/excon.rb#260
    def put(url, params = T.unsafe(nil), &block); end

    # source://excon//lib/excon.rb#70
    def set_raise_on_warnings!(should_raise); end

    # @return [String] The filesystem path to the SSL Certificate Authority
    #
    # source://excon//lib/excon.rb#89
    def ssl_ca_path; end

    # Change path to the SSL Certificate Authority
    #
    # @return [String] The filesystem path to the SSL Certificate Authority
    #
    # source://excon//lib/excon.rb#96
    def ssl_ca_path=(new_ssl_ca_path); end

    # @return [true, false] Whether or not to verify the peer's SSL certificate / chain
    #
    # source://excon//lib/excon.rb#102
    def ssl_verify_peer; end

    # Change the status of ssl peer verification
    #
    # @see Excon#ssl_verify_peer (attr_reader)
    #
    # source://excon//lib/excon.rb#109
    def ssl_verify_peer=(new_ssl_verify_peer); end

    # push an additional stub onto the list to check for mock requests
    #
    # @param request_params [Hash<Symbol, >] request params to match against, omitted params match all
    # @param response_params [Hash<Symbol, >] response params to return from matched request or block to call with params
    #
    # source://excon//lib/excon.rb#148
    def stub(request_params = T.unsafe(nil), response_params = T.unsafe(nil), &block); end

    # get a stub matching params or nil
    #
    # @param request_params [Hash<Symbol, >] request params to match against, omitted params match all
    # @return [Hash<Symbol, >] response params to return from matched request or block to call with params
    #
    # source://excon//lib/excon.rb#192
    def stub_for(request_params = T.unsafe(nil)); end

    # get a list of defined stubs
    #
    # source://excon//lib/excon.rb#239
    def stubs; end

    # source://excon//lib/excon.rb#260
    def trace(url, params = T.unsafe(nil), &block); end

    # remove first/oldest stub matching request_params or nil if none match
    #
    # @param request_params [Hash<Symbol, >] request params to match against, omitted params match all
    # @return [Hash<Symbol, >] response params from deleted stub
    #
    # source://excon//lib/excon.rb#251
    def unstub(request_params = T.unsafe(nil)); end
  end
end

# source://excon//lib/excon/constants.rb#12
Excon::CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

# source://excon//lib/excon/constants.rb#4
Excon::CR_NL = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/connection.rb#5
class Excon::Connection
  include ::Excon::Utils

  # Initializes a new Connection instance
  #
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash<Symbol, >] One or more optional params
  # @return [Connection] a new instance of Connection
  #
  # source://excon//lib/excon/connection.rb#64
  def initialize(params = T.unsafe(nil)); end

  # Sends the supplied requests to the destination host using pipelining in
  # batches of @limit [Numeric] requests. This is your soft file descriptor
  # limit by default, typically 256.
  #
  # @param pipeline_params [Array<Hash>] An array of one or more optional params, override defaults set in Connection.new, see #request for details
  #
  # source://excon//lib/excon/connection.rb#358
  def batch_requests(pipeline_params, limit = T.unsafe(nil)); end

  # source://excon//lib/excon/connection.rb#379
  def connect(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#10
  def connection; end

  # source://excon//lib/excon/connection.rb#14
  def connection=(new_params); end

  # Returns the value of attribute data.
  #
  # source://excon//lib/excon/connection.rb#8
  def data; end

  # source://excon//lib/excon/connection.rb#379
  def delete(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#109
  def error_call(datum); end

  # source://excon//lib/excon/connection.rb#379
  def get(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#379
  def head(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#395
  def inspect; end

  # source://excon//lib/excon/connection.rb#37
  def logger; end

  # source://excon//lib/excon/connection.rb#42
  def logger=(logger); end

  # source://excon//lib/excon/connection.rb#379
  def options(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#19
  def params; end

  # source://excon//lib/excon/connection.rb#23
  def params=(new_params); end

  # source://excon//lib/excon/connection.rb#379
  def patch(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#379
  def post(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#28
  def proxy; end

  # source://excon//lib/excon/connection.rb#32
  def proxy=(new_proxy); end

  # source://excon//lib/excon/connection.rb#379
  def put(params = T.unsafe(nil), &block); end

  # Sends the supplied request to the destination host.
  #
  # @option params
  # @option params
  # @option params
  # @option params
  # @param params [Hash<Symbol, >] One or more optional params, override defaults set in Connection.new
  # @yield [chunk] @see Response#self.parse
  #
  # source://excon//lib/excon/connection.rb#230
  def request(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#115
  def request_call(datum); end

  # Sends the supplied requests to the destination host using pipelining.
  #
  # @param pipeline_params [Array<Hash>] An array of one or more optional params, override defaults set in Connection.new, see #request for details
  #
  # source://excon//lib/excon/connection.rb#331
  def requests(pipeline_params); end

  # source://excon//lib/excon/connection.rb#369
  def reset; end

  # source://excon//lib/excon/connection.rb#209
  def response_call(datum); end

  # source://excon//lib/excon/connection.rb#390
  def retry_limit; end

  # source://excon//lib/excon/connection.rb#385
  def retry_limit=(new_retry_limit); end

  # source://excon//lib/excon/connection.rb#379
  def trace(params = T.unsafe(nil), &block); end

  # source://excon//lib/excon/connection.rb#409
  def valid_request_keys(middlewares); end

  private

  # source://excon//lib/excon/connection.rb#415
  def detect_content_length(body); end

  # source://excon//lib/excon/connection.rb#529
  def proxy_from_env; end

  # source://excon//lib/excon/connection.rb#516
  def proxy_match_host_port(host, port); end

  # source://excon//lib/excon/connection.rb#508
  def raise_socket_error(error); end

  # source://excon//lib/excon/connection.rb#466
  def response(datum = T.unsafe(nil)); end

  # source://excon//lib/excon/connection.rb#557
  def setup_proxy; end

  # source://excon//lib/excon/connection.rb#477
  def socket(datum = T.unsafe(nil)); end

  # source://excon//lib/excon/connection.rb#488
  def sockets; end

  # source://excon//lib/excon/connection.rb#427
  def valid_middleware_keys(middlewares); end

  # source://excon//lib/excon/connection.rb#440
  def validate_params(validation, params, middlewares); end

  class << self
    # source://webmock/3.19.1/lib/webmock/http_lib_adapters/excon_adapter.rb#157
    def new(args = T.unsafe(nil)); end
  end
end

# these come last as they rely on the above
#
# source://excon//lib/excon/constants.rb#139
Excon::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://excon//lib/excon/constants.rb#6
Excon::DEFAULT_CA_FILE = T.let(T.unsafe(nil), String)

# 1 megabyte
#
# source://excon//lib/excon/constants.rb#8
Excon::DEFAULT_CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

# source://excon//lib/excon/constants.rb#15
Excon::DEFAULT_REDIRECT_LIMIT = T.let(T.unsafe(nil), Integer)

# source://excon//lib/excon/constants.rb#19
Excon::DEFAULT_RETRY_ERRORS = T.let(T.unsafe(nil), Array)

# source://excon//lib/excon/constants.rb#17
Excon::DEFAULT_RETRY_LIMIT = T.let(T.unsafe(nil), Integer)

# source://excon//lib/excon/constants.rb#115
Excon::DEPRECATED_VALID_REQUEST_KEYS = T.let(T.unsafe(nil), Hash)

# Excon exception classes
#
# source://excon//lib/excon/error.rb#4
class Excon::Error < ::StandardError
  class << self
    # Messages for nicer exceptions, from rfc2616
    #
    # source://excon//lib/excon/error.rb#174
    def status_error(request, response); end

    # source://excon//lib/excon/error.rb#127
    def status_errors; end
  end
end

# 202
#
# source://excon//lib/excon/error.rb#89
class Excon::Error::Accepted < ::Excon::Error::Success; end

# 502
#
# source://excon//lib/excon/error.rb#123
class Excon::Error::BadGateway < ::Excon::Error::Server; end

# 400
#
# source://excon//lib/excon/error.rb#101
class Excon::Error::BadRequest < ::Excon::Error::Client; end

# Certificate related errors
#
# source://excon//lib/excon/error.rb#27
class Excon::Error::Certificate < ::Excon::Error::Socket
  # @return [Certificate] a new instance of Certificate
  #
  # source://excon//lib/excon/error.rb#28
  def initialize(socket_error = T.unsafe(nil)); end
end

# source://excon//lib/excon/error.rb#82
class Excon::Error::Client < ::Excon::Error::HTTPStatus; end

# 409
#
# source://excon//lib/excon/error.rb#110
class Excon::Error::Conflict < ::Excon::Error::Client; end

# 100
#
# source://excon//lib/excon/error.rb#85
class Excon::Error::Continue < ::Excon::Error::Informational; end

# 201
#
# source://excon//lib/excon/error.rb#88
class Excon::Error::Created < ::Excon::Error::Success; end

# 417
#
# source://excon//lib/excon/error.rb#118
class Excon::Error::ExpectationFailed < ::Excon::Error::Client; end

# 403
#
# source://excon//lib/excon/error.rb#104
class Excon::Error::Forbidden < ::Excon::Error::Client; end

# 302
#
# source://excon//lib/excon/error.rb#96
class Excon::Error::Found < ::Excon::Error::Redirection; end

# 504
#
# source://excon//lib/excon/error.rb#125
class Excon::Error::GatewayTimeout < ::Excon::Error::Server; end

# 410
#
# source://excon//lib/excon/error.rb#111
class Excon::Error::Gone < ::Excon::Error::Client; end

# Base class for HTTP Error classes
#
# source://excon//lib/excon/error.rb#68
class Excon::Error::HTTPStatus < ::Excon::Error
  # @return [HTTPStatus] a new instance of HTTPStatus
  #
  # source://excon//lib/excon/error.rb#71
  def initialize(msg, request = T.unsafe(nil), response = T.unsafe(nil)); end

  # Returns the value of attribute request.
  #
  # source://excon//lib/excon/error.rb#69
  def request; end

  # Returns the value of attribute response.
  #
  # source://excon//lib/excon/error.rb#69
  def response; end
end

# HTTP Error classes
#
# source://excon//lib/excon/error.rb#79
class Excon::Error::Informational < ::Excon::Error::HTTPStatus; end

# 500
#
# source://excon//lib/excon/error.rb#121
class Excon::Error::InternalServerError < ::Excon::Error::Server; end

# source://excon//lib/excon/error.rb#49
class Excon::Error::InvalidHeaderKey < ::Excon::Error; end

# source://excon//lib/excon/error.rb#50
class Excon::Error::InvalidHeaderValue < ::Excon::Error; end

# source://excon//lib/excon/error.rb#8
class Excon::Error::InvalidStub < ::Excon::Error; end

# 411
#
# source://excon//lib/excon/error.rb#112
class Excon::Error::LengthRequired < ::Excon::Error::Client; end

# 405
#
# source://excon//lib/excon/error.rb#106
class Excon::Error::MethodNotAllowed < ::Excon::Error::Client; end

# 301
#
# source://excon//lib/excon/error.rb#95
class Excon::Error::MovedPermanently < ::Excon::Error::Redirection; end

# 300
#
# source://excon//lib/excon/error.rb#94
class Excon::Error::MultipleChoices < ::Excon::Error::Redirection; end

# 204
#
# source://excon//lib/excon/error.rb#91
class Excon::Error::NoContent < ::Excon::Error::Success; end

# 203
#
# source://excon//lib/excon/error.rb#90
class Excon::Error::NonAuthoritativeInformation < ::Excon::Error::Success; end

# 406
#
# source://excon//lib/excon/error.rb#107
class Excon::Error::NotAcceptable < ::Excon::Error::Client; end

# 404
#
# source://excon//lib/excon/error.rb#105
class Excon::Error::NotFound < ::Excon::Error::Client; end

# 501
#
# source://excon//lib/excon/error.rb#122
class Excon::Error::NotImplemented < ::Excon::Error::Server; end

# 304
#
# source://excon//lib/excon/error.rb#98
class Excon::Error::NotModified < ::Excon::Error::Redirection; end

# 200
#
# source://excon//lib/excon/error.rb#87
class Excon::Error::OK < ::Excon::Error::Success; end

# 206
#
# source://excon//lib/excon/error.rb#93
class Excon::Error::PartialContent < ::Excon::Error::Success; end

# 402
#
# source://excon//lib/excon/error.rb#103
class Excon::Error::PaymentRequired < ::Excon::Error::Client; end

# 412
#
# source://excon//lib/excon/error.rb#113
class Excon::Error::PreconditionFailed < ::Excon::Error::Client; end

# 407
#
# source://excon//lib/excon/error.rb#108
class Excon::Error::ProxyAuthenticationRequired < ::Excon::Error::Client; end

# source://excon//lib/excon/error.rb#54
class Excon::Error::ProxyConnectionError < ::Excon::Error
  # @return [ProxyConnectionError] a new instance of ProxyConnectionError
  #
  # source://excon//lib/excon/error.rb#57
  def initialize(msg, request = T.unsafe(nil), response = T.unsafe(nil)); end

  # Returns the value of attribute request.
  #
  # source://excon//lib/excon/error.rb#55
  def request; end

  # Returns the value of attribute response.
  #
  # source://excon//lib/excon/error.rb#55
  def response; end
end

# source://excon//lib/excon/error.rb#64
class Excon::Error::ProxyParse < ::Excon::Error; end

# source://excon//lib/excon/error.rb#81
class Excon::Error::Redirection < ::Excon::Error::HTTPStatus; end

# 413
#
# source://excon//lib/excon/error.rb#114
class Excon::Error::RequestEntityTooLarge < ::Excon::Error::Client; end

# 408
#
# source://excon//lib/excon/error.rb#109
class Excon::Error::RequestTimeout < ::Excon::Error::Client; end

# 414
#
# source://excon//lib/excon/error.rb#115
class Excon::Error::RequestURITooLong < ::Excon::Error::Client; end

# 416
#
# source://excon//lib/excon/error.rb#117
class Excon::Error::RequestedRangeNotSatisfiable < ::Excon::Error::Client; end

# 205
#
# source://excon//lib/excon/error.rb#92
class Excon::Error::ResetContent < ::Excon::Error::Success; end

# source://excon//lib/excon/error.rb#52
class Excon::Error::ResponseParse < ::Excon::Error; end

# 303
#
# source://excon//lib/excon/error.rb#97
class Excon::Error::SeeOther < ::Excon::Error::Redirection; end

# source://excon//lib/excon/error.rb#83
class Excon::Error::Server < ::Excon::Error::HTTPStatus; end

# 503
#
# source://excon//lib/excon/error.rb#124
class Excon::Error::ServiceUnavailable < ::Excon::Error::Server; end

# Socket related errors
#
# source://excon//lib/excon/error.rb#12
class Excon::Error::Socket < ::Excon::Error
  # @return [Socket] a new instance of Socket
  #
  # source://excon//lib/excon/error.rb#15
  def initialize(socket_error = T.unsafe(nil)); end

  # Returns the value of attribute socket_error.
  #
  # source://excon//lib/excon/error.rb#13
  def socket_error; end
end

# source://excon//lib/excon/error.rb#7
class Excon::Error::StubNotFound < ::Excon::Error; end

# source://excon//lib/excon/error.rb#80
class Excon::Error::Success < ::Excon::Error::HTTPStatus; end

# 101
#
# source://excon//lib/excon/error.rb#86
class Excon::Error::SwitchingProtocols < ::Excon::Error::Informational; end

# 307
#
# source://excon//lib/excon/error.rb#100
class Excon::Error::TemporaryRedirect < ::Excon::Error::Redirection; end

# source://excon//lib/excon/error.rb#51
class Excon::Error::Timeout < ::Excon::Error; end

# source://excon//lib/excon/error.rb#65
class Excon::Error::TooManyRedirects < ::Excon::Error; end

# 429
#
# source://excon//lib/excon/error.rb#120
class Excon::Error::TooManyRequests < ::Excon::Error::Client; end

# 401
#
# source://excon//lib/excon/error.rb#102
class Excon::Error::Unauthorized < ::Excon::Error::Client; end

# 422
#
# source://excon//lib/excon/error.rb#119
class Excon::Error::UnprocessableEntity < ::Excon::Error::Client; end

# 415
#
# source://excon//lib/excon/error.rb#116
class Excon::Error::UnsupportedMediaType < ::Excon::Error::Client; end

# 305
#
# source://excon//lib/excon/error.rb#99
class Excon::Error::UseProxy < ::Excon::Error::Redirection; end

# source://excon//lib/excon/error.rb#9
class Excon::Error::Warning < ::Excon::Error; end

# Legacy
#
# source://excon//lib/excon/error.rb#199
module Excon::Errors
  class << self
    # source://excon//lib/excon/error.rb#225
    def status_error(request, response); end
  end
end

# source://excon//lib/excon/error.rb#222
Excon::Errors::Accepted = Excon::Error::Accepted

# source://excon//lib/excon/error.rb#222
Excon::Errors::BadGateway = Excon::Error::BadGateway

# source://excon//lib/excon/error.rb#222
Excon::Errors::BadRequest = Excon::Error::BadRequest

# source://excon//lib/excon/error.rb#222
Excon::Errors::CertificateError = Excon::Error::Certificate

# source://excon//lib/excon/error.rb#222
Excon::Errors::ClientError = Excon::Error::Client

# source://excon//lib/excon/error.rb#222
Excon::Errors::Conflict = Excon::Error::Conflict

# source://excon//lib/excon/error.rb#222
Excon::Errors::Continue = Excon::Error::Continue

# source://excon//lib/excon/error.rb#222
Excon::Errors::Created = Excon::Error::Created

# source://excon//lib/excon/error.rb#200
Excon::Errors::Error = Excon::Error

# source://excon//lib/excon/error.rb#222
Excon::Errors::ExpectationFailed = Excon::Error::ExpectationFailed

# source://excon//lib/excon/error.rb#222
Excon::Errors::Forbidden = Excon::Error::Forbidden

# source://excon//lib/excon/error.rb#222
Excon::Errors::Found = Excon::Error::Found

# source://excon//lib/excon/error.rb#222
Excon::Errors::GatewayTimeout = Excon::Error::GatewayTimeout

# source://excon//lib/excon/error.rb#222
Excon::Errors::Gone = Excon::Error::Gone

# source://excon//lib/excon/error.rb#222
Excon::Errors::HTTPStatusError = Excon::Error::HTTPStatus

# source://excon//lib/excon/error.rb#222
Excon::Errors::Informational = Excon::Error::Informational

# source://excon//lib/excon/error.rb#222
Excon::Errors::InternalServerError = Excon::Error::InternalServerError

# source://excon//lib/excon/error.rb#222
Excon::Errors::InvalidHeaderKey = Excon::Error::InvalidHeaderKey

# source://excon//lib/excon/error.rb#222
Excon::Errors::InvalidHeaderValue = Excon::Error::InvalidHeaderValue

# source://excon//lib/excon/error.rb#222
Excon::Errors::InvalidStub = Excon::Error::InvalidStub

# source://excon//lib/excon/error.rb#222
Excon::Errors::LengthRequired = Excon::Error::LengthRequired

# source://excon//lib/excon/error.rb#222
Excon::Errors::MethodNotAllowed = Excon::Error::MethodNotAllowed

# source://excon//lib/excon/error.rb#222
Excon::Errors::MovedPermanently = Excon::Error::MovedPermanently

# source://excon//lib/excon/error.rb#222
Excon::Errors::MultipleChoices = Excon::Error::MultipleChoices

# source://excon//lib/excon/error.rb#222
Excon::Errors::NoContent = Excon::Error::NoContent

# source://excon//lib/excon/error.rb#222
Excon::Errors::NonAuthoritativeInformation = Excon::Error::NonAuthoritativeInformation

# source://excon//lib/excon/error.rb#222
Excon::Errors::NotAcceptable = Excon::Error::NotAcceptable

# source://excon//lib/excon/error.rb#222
Excon::Errors::NotFound = Excon::Error::NotFound

# source://excon//lib/excon/error.rb#222
Excon::Errors::NotImplemented = Excon::Error::NotImplemented

# source://excon//lib/excon/error.rb#222
Excon::Errors::NotModified = Excon::Error::NotModified

# source://excon//lib/excon/error.rb#222
Excon::Errors::OK = Excon::Error::OK

# source://excon//lib/excon/error.rb#222
Excon::Errors::PartialContent = Excon::Error::PartialContent

# source://excon//lib/excon/error.rb#222
Excon::Errors::PaymentRequired = Excon::Error::PaymentRequired

# source://excon//lib/excon/error.rb#222
Excon::Errors::PreconditionFailed = Excon::Error::PreconditionFailed

# source://excon//lib/excon/error.rb#222
Excon::Errors::ProxyAuthenticationRequired = Excon::Error::ProxyAuthenticationRequired

# source://excon//lib/excon/error.rb#222
Excon::Errors::ProxyConnectionError = Excon::Error::ProxyConnectionError

# source://excon//lib/excon/error.rb#222
Excon::Errors::ProxyParse = Excon::Error::ProxyParse

# source://excon//lib/excon/error.rb#222
Excon::Errors::Redirection = Excon::Error::Redirection

# source://excon//lib/excon/error.rb#222
Excon::Errors::RequestEntityTooLarge = Excon::Error::RequestEntityTooLarge

# source://excon//lib/excon/error.rb#222
Excon::Errors::RequestTimeout = Excon::Error::RequestTimeout

# source://excon//lib/excon/error.rb#222
Excon::Errors::RequestURITooLong = Excon::Error::RequestURITooLong

# source://excon//lib/excon/error.rb#222
Excon::Errors::RequestedRangeNotSatisfiable = Excon::Error::RequestedRangeNotSatisfiable

# source://excon//lib/excon/error.rb#222
Excon::Errors::ResetContent = Excon::Error::ResetContent

# source://excon//lib/excon/error.rb#222
Excon::Errors::ResponseParse = Excon::Error::ResponseParse

# source://excon//lib/excon/error.rb#222
Excon::Errors::SeeOther = Excon::Error::SeeOther

# source://excon//lib/excon/error.rb#222
Excon::Errors::ServerError = Excon::Error::Server

# source://excon//lib/excon/error.rb#222
Excon::Errors::ServiceUnavailable = Excon::Error::ServiceUnavailable

# source://excon//lib/excon/error.rb#222
Excon::Errors::SocketError = Excon::Error::Socket

# source://excon//lib/excon/error.rb#222
Excon::Errors::StubNotFound = Excon::Error::StubNotFound

# source://excon//lib/excon/error.rb#222
Excon::Errors::Success = Excon::Error::Success

# source://excon//lib/excon/error.rb#222
Excon::Errors::SwitchingProtocols = Excon::Error::SwitchingProtocols

# source://excon//lib/excon/error.rb#222
Excon::Errors::TemporaryRedirect = Excon::Error::TemporaryRedirect

# source://excon//lib/excon/error.rb#222
Excon::Errors::Timeout = Excon::Error::Timeout

# source://excon//lib/excon/error.rb#222
Excon::Errors::TooManyRedirects = Excon::Error::TooManyRedirects

# source://excon//lib/excon/error.rb#222
Excon::Errors::TooManyRequests = Excon::Error::TooManyRequests

# source://excon//lib/excon/error.rb#222
Excon::Errors::Unauthorized = Excon::Error::Unauthorized

# source://excon//lib/excon/error.rb#222
Excon::Errors::UnprocessableEntity = Excon::Error::UnprocessableEntity

# source://excon//lib/excon/error.rb#222
Excon::Errors::UnsupportedMediaType = Excon::Error::UnsupportedMediaType

# source://excon//lib/excon/error.rb#222
Excon::Errors::UseProxy = Excon::Error::UseProxy

# source://excon//lib/excon/error.rb#222
Excon::Errors::Warning = Excon::Error::Warning

# source://excon//lib/excon/constants.rb#25
Excon::FORCE_ENC = T.let(T.unsafe(nil), TrueClass)

# source://excon//lib/excon/constants.rb#31
Excon::HTTPS = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/constants.rb#27
Excon::HTTP_1_1 = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/constants.rb#29
Excon::HTTP_VERBS = T.let(T.unsafe(nil), Array)

# source://excon//lib/excon/headers.rb#3
class Excon::Headers < ::Hash
  # @return [Headers] a new instance of Headers
  #
  # source://excon//lib/excon/headers.rb#24
  def initialize; end

  # source://excon//lib/excon/headers.rb#29
  def [](key); end

  # source://excon//lib/excon/headers.rb#33
  def []=(key, value); end

  # source://excon//lib/excon/headers.rb#40
  def assoc(obj); end

  # source://excon//lib/excon/headers.rb#45
  def delete(key, &proc); end

  # source://excon//lib/excon/headers.rb#50
  def fetch(key, default = T.unsafe(nil), &proc); end

  # @return [Boolean]
  #
  # source://excon//lib/excon/headers.rb#58
  def has_key?(key); end

  # @return [Boolean]
  #
  # source://excon//lib/excon/headers.rb#58
  def key?(key); end

  # @return [Boolean]
  #
  # source://excon//lib/excon/headers.rb#58
  def member?(key); end

  # source://excon//lib/excon/headers.rb#64
  def merge(other_hash); end

  # source://excon//lib/excon/headers.rb#68
  def merge!(other_hash); end

  def raw_assoc(_arg0); end
  def raw_delete(_arg0); end
  def raw_fetch(*_arg0); end
  def raw_has_key?(_arg0); end
  def raw_include?(_arg0); end
  def raw_key?(_arg0); end
  def raw_member?(_arg0); end
  def raw_merge(*_arg0); end
  def raw_merge!(*_arg0); end
  def raw_reader(_arg0); end
  def raw_rehash; end
  def raw_store(_arg0, _arg1); end
  def raw_values_at(*_arg0); end
  def raw_writer(_arg0, _arg1); end

  # source://excon//lib/excon/headers.rb#75
  def rehash; end

  # source://excon//lib/excon/headers.rb#33
  def store(key, value); end

  # source://excon//lib/excon/headers.rb#80
  def values_at(*keys); end
end

# source://excon//lib/excon/headers.rb#5
Excon::Headers::SENTINEL = T.let(T.unsafe(nil), Hash)

# source://excon//lib/excon/instrumentors/logging_instrumentor.rb#4
class Excon::LoggingInstrumentor
  class << self
    # source://excon//lib/excon/instrumentors/logging_instrumentor.rb#6
    def instrument(name, params = T.unsafe(nil)); end
  end
end

# source://excon//lib/excon/middlewares/base.rb#3
module Excon::Middleware; end

# source://excon//lib/excon/middlewares/base.rb#4
class Excon::Middleware::Base
  # @return [Base] a new instance of Base
  #
  # source://excon//lib/excon/middlewares/base.rb#11
  def initialize(stack); end

  # source://excon//lib/excon/middlewares/base.rb#15
  def error_call(datum); end

  # source://excon//lib/excon/middlewares/base.rb#20
  def request_call(datum); end

  # source://excon//lib/excon/middlewares/base.rb#25
  def response_call(datum); end

  class << self
    # Returns the list of parameters that this middleware uses that are valid
    # as arguments to `Connection#request` or `Connection#new`.
    #
    # source://excon//lib/excon/middlewares/base.rb#7
    def valid_parameter_keys; end
  end
end

# source://excon//lib/excon/middlewares/capture_cookies.rb#4
class Excon::Middleware::CaptureCookies < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/capture_cookies.rb#6
  def extract_cookies_from_set_cookie(set_cookie); end

  # source://excon//lib/excon/middlewares/capture_cookies.rb#10
  def get_header(datum, header); end

  # source://excon//lib/excon/middlewares/capture_cookies.rb#17
  def response_call(datum); end
end

# source://excon//lib/excon/middlewares/decompress.rb#4
class Excon::Middleware::Decompress < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/decompress.rb#9
  def request_call(datum); end

  # source://excon//lib/excon/middlewares/decompress.rb#19
  def response_call(datum); end
end

# Zlib::MAX_WBITS * -1
#
# source://excon//lib/excon/middlewares/decompress.rb#7
Excon::Middleware::Decompress::INFLATE_RAW = T.let(T.unsafe(nil), Integer)

# Zlib::MAX_WBITS + 32
#
# source://excon//lib/excon/middlewares/decompress.rb#6
Excon::Middleware::Decompress::INFLATE_ZLIB_OR_GZIP = T.let(T.unsafe(nil), Integer)

# source://excon//lib/excon/middlewares/escape_path.rb#4
class Excon::Middleware::EscapePath < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/escape_path.rb#5
  def request_call(datum); end
end

# source://excon//lib/excon/middlewares/expects.rb#4
class Excon::Middleware::Expects < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/expects.rb#11
  def response_call(datum); end

  class << self
    # source://excon//lib/excon/middlewares/expects.rb#5
    def valid_parameter_keys; end
  end
end

# source://excon//lib/excon/middlewares/idempotent.rb#6
class Excon::Middleware::Idempotent < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/idempotent.rb#22
  def error_call(datum); end

  # source://excon//lib/excon/middlewares/idempotent.rb#17
  def request_call(datum); end

  class << self
    # source://excon//lib/excon/middlewares/idempotent.rb#7
    def valid_parameter_keys; end
  end
end

# source://excon//lib/excon/middlewares/instrumentor.rb#4
class Excon::Middleware::Instrumentor < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/instrumentor.rb#13
  def error_call(datum); end

  # source://excon//lib/excon/middlewares/instrumentor.rb#23
  def request_call(datum); end

  # source://excon//lib/excon/middlewares/instrumentor.rb#38
  def response_call(datum); end

  class << self
    # source://excon//lib/excon/middlewares/instrumentor.rb#5
    def valid_parameter_keys; end
  end
end

# source://excon//lib/excon/middlewares/mock.rb#4
class Excon::Middleware::Mock < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/mock.rb#13
  def request_call(datum); end

  class << self
    # source://excon//lib/excon/middlewares/mock.rb#5
    def valid_parameter_keys; end
  end
end

# source://excon//lib/excon/middlewares/redirect_follower.rb#4
class Excon::Middleware::RedirectFollower < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/redirect_follower.rb#18
  def get_header(datum, header); end

  # source://excon//lib/excon/middlewares/redirect_follower.rb#12
  def request_call(datum); end

  # source://excon//lib/excon/middlewares/redirect_follower.rb#25
  def response_call(datum); end

  class << self
    # source://excon//lib/excon/middlewares/redirect_follower.rb#5
    def valid_parameter_keys; end
  end
end

# source://excon//lib/excon/middlewares/response_parser.rb#4
class Excon::Middleware::ResponseParser < ::Excon::Middleware::Base
  # source://excon//lib/excon/middlewares/response_parser.rb#5
  def response_call(datum); end
end

# source://excon//lib/excon/constants.rb#33
Excon::NO_ENTITY = T.let(T.unsafe(nil), Array)

# source://excon//lib/excon/pretty_printer.rb#3
class Excon::PrettyPrinter
  class << self
    # source://excon//lib/excon/pretty_printer.rb#4
    def pp(io, datum, indent = T.unsafe(nil)); end
  end
end

# source://excon//lib/excon/constants.rb#35
Excon::REDACTED = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/response.rb#3
class Excon::Response
  # @return [Response] a new instance of Response
  #
  # source://excon//lib/excon/response.rb#213
  def initialize(params = T.unsafe(nil)); end

  # source://excon//lib/excon/response.rb#227
  def [](key); end

  # source://excon//lib/excon/response.rb#11
  def body; end

  # backwards compatability reader/writers
  #
  # source://excon//lib/excon/response.rb#8
  def body=(new_body); end

  # Returns the value of attribute data.
  #
  # source://excon//lib/excon/response.rb#5
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://excon//lib/excon/response.rb#5
  def data=(_arg0); end

  # Retrieve a specific header value. Header names are treated case-insensitively.
  #
  # @param name [String] Header name
  #
  # source://excon//lib/excon/response.rb#242
  def get_header(name); end

  # source://excon//lib/excon/response.rb#17
  def headers; end

  # source://excon//lib/excon/response.rb#14
  def headers=(new_headers); end

  # source://excon//lib/excon/response.rb#20
  def host; end

  # can't be named "method"
  #
  # source://excon//lib/excon/response.rb#32
  def http_method; end

  # source://excon//lib/excon/response.rb#26
  def local_address; end

  # source://excon//lib/excon/response.rb#29
  def local_port; end

  # source://excon//lib/excon/response.rb#231
  def params; end

  # source://excon//lib/excon/response.rb#35
  def path; end

  # source://excon//lib/excon/response.rb#41
  def port; end

  # source://excon//lib/excon/response.rb#236
  def pp; end

  # source://excon//lib/excon/response.rb#38
  def query; end

  # source://excon//lib/excon/response.rb#47
  def reason_phrase; end

  # source://excon//lib/excon/response.rb#44
  def reason_phrase=(new_reason_phrase); end

  # source://excon//lib/excon/response.rb#53
  def remote_ip; end

  # source://excon//lib/excon/response.rb#50
  def remote_ip=(new_remote_ip); end

  # source://excon//lib/excon/response.rb#23
  def scheme; end

  # source://excon//lib/excon/response.rb#59
  def status; end

  # source://excon//lib/excon/response.rb#56
  def status=(new_status); end

  # source://excon//lib/excon/response.rb#62
  def status_line; end

  # source://excon//lib/excon/response.rb#65
  def status_line=(new_status_line); end

  class << self
    # source://excon//lib/excon/response.rb#69
    def parse(socket, datum); end

    # source://excon//lib/excon/response.rb#193
    def parse_headers(socket, datum); end
  end
end

# source://excon//lib/excon/ssl_socket.rb#3
class Excon::SSLSocket < ::Excon::Socket
  # @return [SSLSocket] a new instance of SSLSocket
  #
  # source://excon//lib/excon/ssl_socket.rb#8
  def initialize(data = T.unsafe(nil)); end

  private

  # source://excon//lib/excon/ssl_socket.rb#171
  def client_cert_data; end

  # source://excon//lib/excon/ssl_socket.rb#182
  def client_chain_data; end

  # source://excon//lib/excon/ssl_socket.rb#196
  def client_key_data; end

  # source://excon//lib/excon/ssl_socket.rb#207
  def client_key_pass; end

  # source://excon//lib/excon/ssl_socket.rb#190
  def connect; end
end

# source://excon//lib/excon/ssl_socket.rb#4
Excon::SSLSocket::HAVE_NONBLOCK = T.let(T.unsafe(nil), TrueClass)

# source://excon//lib/excon/socket.rb#5
class Excon::Socket
  include ::Excon::Utils
  extend ::Forwardable

  # @return [Socket] a new instance of Socket
  #
  # source://excon//lib/excon/socket.rb#51
  def initialize(data = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def close(*args, **_arg1, &block); end

  # Returns the value of attribute data.
  #
  # source://excon//lib/excon/socket.rb#10
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://excon//lib/excon/socket.rb#10
  def data=(_arg0); end

  # source://excon//lib/excon/socket.rb#112
  def local_address; end

  # source://excon//lib/excon/socket.rb#116
  def local_port; end

  # source://excon//lib/excon/socket.rb#36
  def params; end

  # source://excon//lib/excon/socket.rb#41
  def params=(new_params); end

  # source://excon//lib/excon/socket.rb#63
  def read(max_length = T.unsafe(nil)); end

  # source://excon//lib/excon/socket.rb#73
  def readline; end

  # Returns the value of attribute remote_ip.
  #
  # source://excon//lib/excon/socket.rb#46
  def remote_ip; end

  # source://excon//lib/excon/socket.rb#104
  def write(data); end

  private

  # source://excon//lib/excon/socket.rb#122
  def connect; end

  # Consume any bytes remaining in the read buffer before making a system call.
  #
  # source://excon//lib/excon/socket.rb#212
  def consume_read_buffer; end

  # source://excon//lib/excon/socket.rb#300
  def read_block(max_length); end

  # source://excon//lib/excon/socket.rb#227
  def read_nonblock(max_length); end

  # source://excon//lib/excon/socket.rb#296
  def readable_bytes; end

  # Returns the remaining time in seconds until we reach the deadline for the request timeout.
  # Raises an exception if we have exceeded the request timeout's deadline.
  #
  # @raise [Excon::Errors::Timeout]
  #
  # source://excon//lib/excon/socket.rb#399
  def request_time_remaining; end

  # Rewind the read buffer to just after the given index.
  # The offset is moved back to the start of the current chunk and then forward until just after the index.
  #
  # source://excon//lib/excon/socket.rb#222
  def rewind_read_buffer(chunk, idx); end

  # source://excon//lib/excon/socket.rb#359
  def select_with_timeout(socket, type); end

  # source://excon//lib/excon/socket.rb#389
  def unpacked_sockaddr; end

  # source://excon//lib/excon/socket.rb#349
  def write_block(data); end

  # source://excon//lib/excon/socket.rb#314
  def write_nonblock(data); end
end

# read/write drawn from https://github.com/ruby-amqp/bunny/commit/75d9dd79551b31a5dd3d1254c537bad471f108cf
#
# source://excon//lib/excon/socket.rb#13
Excon::Socket::CONNECT_RETRY_EXCEPTION_CLASSES = T.let(T.unsafe(nil), Array)

# Maps a socket operation to a timeout property.
#
# source://excon//lib/excon/socket.rb#29
Excon::Socket::OPERATION_TO_TIMEOUT = T.let(T.unsafe(nil), Hash)

# Ruby >= 2.1
#
# source://excon//lib/excon/socket.rb#18
Excon::Socket::READ_RETRY_EXCEPTION_CLASSES = T.let(T.unsafe(nil), Array)

# Ruby >= 2.1
#
# source://excon//lib/excon/socket.rb#23
Excon::Socket::WRITE_RETRY_EXCEPTION_CLASSES = T.let(T.unsafe(nil), Array)

# source://excon//lib/excon/instrumentors/standard_instrumentor.rb#3
class Excon::StandardInstrumentor
  class << self
    # source://excon//lib/excon/instrumentors/standard_instrumentor.rb#4
    def instrument(name, params = T.unsafe(nil)); end
  end
end

# source://excon//lib/excon/constants.rb#37
Excon::UNIX = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/constants.rb#39
Excon::USER_AGENT = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/unix_socket.rb#3
class Excon::UnixSocket < ::Excon::Socket
  private

  # source://excon//lib/excon/unix_socket.rb#7
  def connect; end
end

# source://excon//lib/excon/utils.rb#3
module Excon::Utils
  extend ::Excon::Utils

  # source://excon//lib/excon/utils.rb#13
  def binary_encode(string); end

  # source://excon//lib/excon/utils.rb#25
  def connection_uri(datum = T.unsafe(nil)); end

  # Escapes HTTP reserved and unwise characters in +str+
  #
  # source://excon//lib/excon/utils.rb#104
  def escape_uri(str); end

  # Performs validation on the passed header hash and returns a string representation of the headers
  #
  # source://excon//lib/excon/utils.rb#126
  def headers_hash_to_s(headers); end

  # source://excon//lib/excon/utils.rb#64
  def port_string(datum); end

  # source://excon//lib/excon/utils.rb#72
  def query_string(datum); end

  # Redact sensitive info from provided data
  #
  # source://excon//lib/excon/utils.rb#37
  def redact(datum); end

  # source://excon//lib/excon/utils.rb#60
  def request_uri(datum); end

  # Splits a header value +str+ according to HTTP specification.
  #
  # source://excon//lib/excon/utils.rb#95
  def split_header_value(str); end

  # Unescape form encoded values in +str+
  #
  # source://excon//lib/excon/utils.rb#118
  def unescape_form(str); end

  # Unescapes HTTP reserved and unwise characters in +str+
  #
  # source://excon//lib/excon/utils.rb#111
  def unescape_uri(str); end
end

# source://excon//lib/excon/utils.rb#6
Excon::Utils::CONTROL = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/utils.rb#7
Excon::Utils::DELIMS = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/utils.rb#11
Excon::Utils::ESCAPED = T.let(T.unsafe(nil), Regexp)

# source://excon//lib/excon/utils.rb#9
Excon::Utils::NONASCII = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/utils.rb#10
Excon::Utils::UNESCAPED = T.let(T.unsafe(nil), Regexp)

# source://excon//lib/excon/utils.rb#8
Excon::Utils::UNWISE = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/constants.rb#71
Excon::VALID_CONNECTION_KEYS = T.let(T.unsafe(nil), Array)

# source://excon//lib/excon/constants.rb#43
Excon::VALID_REQUEST_KEYS = T.let(T.unsafe(nil), Array)

# source://excon//lib/excon/version.rb#4
Excon::VERSION = T.let(T.unsafe(nil), String)

# source://excon//lib/excon/constants.rb#41
Excon::VERSIONS = T.let(T.unsafe(nil), String)
