# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `toml-rb` gem.
# Please instead update this file by running `bin/tapioca gem toml-rb`.


# source://toml-rb//lib/toml-rb/errors.rb#1
module TomlRB
  class << self
    # Public: Returns a *TomlRB* string from a Ruby Hash.
    #
    # hash - Ruby Hash to be dumped into *TomlRB*
    #
    #
    # Examples
    #
    #   TomlRB.dump(title: 'TomlRB dump')
    #   # => "simple = true\n"
    #
    #   hash = {
    #     "title"=>"wow!",
    #     "awesome"=> {
    #       "you"=>true,
    #       "others"=>false
    #     }
    #   }
    #
    #   TomlRB.dump(hash)
    #   # => "title = \"wow!\"\n[awesome]\nothers = false\nyou = true\n"
    #
    #
    # Returns a TomlRB string representing the hash.
    #
    # source://toml-rb//lib/toml-rb.rb#96
    def dump(hash); end

    # Public: Returns a hash from a *TomlRB* file.
    #
    # path            - TomlRB File path
    # :symbolize_keys - true|false (optional).
    #
    #
    # Examples
    #
    #   TomlRB.load_file('/tmp/simple.toml')
    #   # => {"group"=>{}}
    #
    #   TomlRB.load_file('/tmp/simple.toml', symbolize_keys: true)
    #   # => {group: {}}
    #
    #
    # Returns a Ruby hash representation of the content.
    # Raises ValueOverwriteError if a key is overwritten.
    # Raises ParseError if the content has invalid TomlRB.
    # Raises Errno::ENOENT if the file cannot be found.
    # Raises Errno::EACCES if the file cannot be accessed.
    #
    # source://toml-rb//lib/toml-rb.rb#69
    def load_file(path, symbolize_keys: T.unsafe(nil)); end

    # Public: Returns a hash from *TomlRB* content.
    #
    # content         - TomlRB string to be parsed.
    # :symbolize_keys - true | false (default: false).
    #
    #
    # Examples
    #
    #   TomlRB.parse('[group]')
    #   # => {"group"=>{}}
    #
    #   TomlRB.parse('title = "TomlRB parser"')
    #   # => {"title"=>"TomlRB parser"}
    #
    #   TomlRB.parse('[group]', symbolize_keys: true)
    #   # => {group: {}}
    #
    #   TomlRB.parse('title = "TomlRB parser"', symbolize_keys: true)
    #   # => {title: "TomlRB parser"}
    #
    #
    # Returns a Ruby hash representation of the content according to TomlRB spec.
    # Raises ValueOverwriteError if a key is overwritten.
    # Raises ParseError if the content has invalid TomlRB.
    #
    # source://toml-rb//lib/toml-rb.rb#45
    def parse(content, symbolize_keys: T.unsafe(nil)); end
  end
end

# source://toml-rb//lib/toml-rb/array.rb#2
module TomlRB::ArrayParser
  # source://toml-rb//lib/toml-rb/array.rb#3
  def value; end
end

# Used in primitive.citrus
#
# source://toml-rb//lib/toml-rb/string.rb#3
module TomlRB::BasicString
  # source://toml-rb//lib/toml-rb/string.rb#15
  def value; end

  class << self
    # Replace the unicode escaped characters with the corresponding character
    # e.g. \u03B4 => ?
    #
    # source://toml-rb//lib/toml-rb/string.rb#23
    def decode_unicode(str); end

    # source://toml-rb//lib/toml-rb/string.rb#37
    def parse_error(m); end

    # source://toml-rb//lib/toml-rb/string.rb#27
    def transform_escaped_chars(str); end
  end
end

# source://toml-rb//lib/toml-rb/string.rb#4
TomlRB::BasicString::SPECIAL_CHARS = T.let(T.unsafe(nil), Hash)

# source://toml-rb//lib/toml-rb.rb#0
module TomlRB::Document
  include ::Citrus::Grammar
  include ::TomlRB::Helper
  include ::TomlRB::Primitive
  extend ::Citrus::GrammarMethods
end

# source://toml-rb//lib/toml-rb/dumper.rb#6
class TomlRB::Dumper
  # @return [Dumper] a new instance of Dumper
  #
  # source://toml-rb//lib/toml-rb/dumper.rb#9
  def initialize(hash); end

  # Returns the value of attribute toml_str.
  #
  # source://toml-rb//lib/toml-rb/dumper.rb#7
  def toml_str; end

  private

  # @return [Boolean]
  #
  # source://toml-rb//lib/toml-rb/dumper.rb#107
  def bare_key?(key); end

  # source://toml-rb//lib/toml-rb/dumper.rb#62
  def dump_nested_pairs(nested_pairs, prefix); end

  # source://toml-rb//lib/toml-rb/dumper.rb#48
  def dump_pairs(simple, nested, table_array, prefix = T.unsafe(nil)); end

  # source://toml-rb//lib/toml-rb/dumper.rb#55
  def dump_simple_pairs(simple_pairs); end

  # source://toml-rb//lib/toml-rb/dumper.rb#70
  def dump_table_array_pairs(table_array_pairs, prefix); end

  # source://toml-rb//lib/toml-rb/dumper.rb#84
  def print_prefix(prefix, extra_brackets = T.unsafe(nil)); end

  # The key needs to use quotes according to TOML specs.
  # Ruby representation of literals or strings, mixed with special characters
  # made the concatenation error-prone, luckiley the `#inspect` method returns
  # exactly what we need. I decided to keep the method `quote_key/1`
  # for readability.
  #
  # source://toml-rb//lib/toml-rb/dumper.rb#116
  def quote_key(key); end

  # source://toml-rb//lib/toml-rb/dumper.rb#27
  def sort_pairs(hash); end

  # source://toml-rb//lib/toml-rb/dumper.rb#91
  def to_toml(obj); end

  # source://toml-rb//lib/toml-rb/dumper.rb#17
  def visit(hash, prefix, extra_brackets = T.unsafe(nil)); end
end

# Parent class for all TomlRB errors
#
# source://toml-rb//lib/toml-rb/errors.rb#3
class TomlRB::Error < ::StandardError; end

# source://toml-rb//lib/toml-rb.rb#0
module TomlRB::Helper
  include ::Citrus::Grammar
  extend ::Citrus::GrammarMethods
end

# source://toml-rb//lib/toml-rb/inline_table.rb#2
class TomlRB::InlineTable
  # @return [InlineTable] a new instance of InlineTable
  #
  # source://toml-rb//lib/toml-rb/inline_table.rb#3
  def initialize(keyvalue_pairs); end

  # source://toml-rb//lib/toml-rb/inline_table.rb#7
  def accept_visitor(keyvalue); end

  # source://toml-rb//lib/toml-rb/inline_table.rb#11
  def value(symbolize_keys = T.unsafe(nil)); end
end

# source://toml-rb//lib/toml-rb/inline_table.rb#21
module TomlRB::InlineTableParser
  # source://toml-rb//lib/toml-rb/inline_table.rb#22
  def value; end
end

# source://toml-rb//lib/toml-rb/keyvalue.rb#4
class TomlRB::Keyvalue
  # @return [Keyvalue] a new instance of Keyvalue
  #
  # source://toml-rb//lib/toml-rb/keyvalue.rb#7
  def initialize(dotted_keys, value); end

  # source://toml-rb//lib/toml-rb/keyvalue.rb#39
  def accept_visitor(parser); end

  # source://toml-rb//lib/toml-rb/keyvalue.rb#13
  def assign(hash, fully_defined_keys, symbolize_keys = T.unsafe(nil)); end

  # source://toml-rb//lib/toml-rb/keyvalue.rb#29
  def dotted_key_merge(hash, update); end

  # Returns the value of attribute dotted_keys.
  #
  # source://toml-rb//lib/toml-rb/keyvalue.rb#5
  def dotted_keys; end

  # Returns the value of attribute symbolize_keys.
  #
  # source://toml-rb//lib/toml-rb/keyvalue.rb#5
  def symbolize_keys; end

  # Returns the value of attribute value.
  #
  # source://toml-rb//lib/toml-rb/keyvalue.rb#5
  def value; end

  private

  # source://toml-rb//lib/toml-rb/keyvalue.rb#45
  def visit_value(a_value); end
end

# Used in document.citrus
#
# source://toml-rb//lib/toml-rb/keyvalue.rb#53
module TomlRB::KeyvalueParser
  # source://toml-rb//lib/toml-rb/keyvalue.rb#54
  def value; end
end

# source://toml-rb//lib/toml-rb/string.rb#42
module TomlRB::LiteralString
  # source://toml-rb//lib/toml-rb/string.rb#43
  def value; end
end

# source://toml-rb//lib/toml-rb/datetime.rb#23
module TomlRB::LocalDateParser
  # source://toml-rb//lib/toml-rb/datetime.rb#24
  def value; end
end

# source://toml-rb//lib/toml-rb/datetime.rb#13
module TomlRB::LocalDateTimeParser
  # source://toml-rb//lib/toml-rb/datetime.rb#14
  def value; end
end

# source://toml-rb//lib/toml-rb/datetime.rb#30
module TomlRB::LocalTimeParser
  # source://toml-rb//lib/toml-rb/datetime.rb#31
  def value; end
end

# source://toml-rb//lib/toml-rb/string.rb#60
module TomlRB::MultilineLiteral
  # source://toml-rb//lib/toml-rb/string.rb#61
  def value; end
end

# source://toml-rb//lib/toml-rb/string.rb#48
module TomlRB::MultilineString
  # source://toml-rb//lib/toml-rb/string.rb#49
  def value; end
end

# source://toml-rb//lib/toml-rb/datetime.rb#2
module TomlRB::OffsetDateTimeParser
  # source://toml-rb//lib/toml-rb/datetime.rb#3
  def value; end
end

# Error related to parsing.
#
# source://toml-rb//lib/toml-rb/errors.rb#6
class TomlRB::ParseError < ::TomlRB::Error; end

# source://toml-rb//lib/toml-rb/parser.rb#2
class TomlRB::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://toml-rb//lib/toml-rb/parser.rb#5
  def initialize(content, symbolize_keys: T.unsafe(nil)); end

  # Returns the value of attribute hash.
  #
  # source://toml-rb//lib/toml-rb/parser.rb#3
  def hash; end

  # source://toml-rb//lib/toml-rb/parser.rb#35
  def visit_keyvalue(keyvalue); end

  # source://toml-rb//lib/toml-rb/parser.rb#30
  def visit_table(table); end

  # Read about the Visitor pattern
  # http://en.wikipedia.org/wiki/Visitor_pattern
  #
  # source://toml-rb//lib/toml-rb/parser.rb#22
  def visit_table_array(table_array); end
end

# source://toml-rb//lib/toml-rb.rb#0
module TomlRB::Primitive
  include ::Citrus::Grammar
  include ::TomlRB::Helper
  extend ::Citrus::GrammarMethods
end

# source://toml-rb//lib/toml-rb/table.rb#2
class TomlRB::Table
  # @return [Table] a new instance of Table
  #
  # source://toml-rb//lib/toml-rb/table.rb#3
  def initialize(dotted_keys); end

  # source://toml-rb//lib/toml-rb/table.rb#21
  def accept_visitor(parser); end

  # source://toml-rb//lib/toml-rb/table.rb#25
  def full_key; end

  # source://toml-rb//lib/toml-rb/table.rb#7
  def navigate_keys(hash, visited_keys, symbolize_keys = T.unsafe(nil)); end

  private

  # Fail if the key was already defined with a ValueOverwriteError
  #
  # source://toml-rb//lib/toml-rb/table.rb#32
  def ensure_key_not_defined(visited_keys); end
end

# source://toml-rb//lib/toml-rb/table_array.rb#2
class TomlRB::TableArray
  # @return [TableArray] a new instance of TableArray
  #
  # source://toml-rb//lib/toml-rb/table_array.rb#3
  def initialize(dotted_keys); end

  # source://toml-rb//lib/toml-rb/table_array.rb#35
  def accept_visitor(parser); end

  # source://toml-rb//lib/toml-rb/table_array.rb#39
  def full_key; end

  # source://toml-rb//lib/toml-rb/table_array.rb#7
  def navigate_keys(hash, symbolize_keys = T.unsafe(nil)); end
end

# Used in document.citrus
#
# source://toml-rb//lib/toml-rb/table_array.rb#45
module TomlRB::TableArrayParser
  # source://toml-rb//lib/toml-rb/table_array.rb#46
  def value; end
end

# Used in document.citrus
#
# source://toml-rb//lib/toml-rb/table.rb#39
module TomlRB::TableParser
  # source://toml-rb//lib/toml-rb/table.rb#40
  def value; end
end

# Overwrite error
#
# source://toml-rb//lib/toml-rb/errors.rb#9
class TomlRB::ValueOverwriteError < ::TomlRB::Error
  # @return [ValueOverwriteError] a new instance of ValueOverwriteError
  #
  # source://toml-rb//lib/toml-rb/errors.rb#12
  def initialize(key); end

  # Returns the value of attribute key.
  #
  # source://toml-rb//lib/toml-rb/errors.rb#10
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://toml-rb//lib/toml-rb/errors.rb#10
  def key=(_arg0); end
end
