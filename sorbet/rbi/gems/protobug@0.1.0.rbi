# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `protobug` gem.
# Please instead update this file by running `bin/tapioca gem protobug`.


# source://protobug//lib/protobug/version.rb#3
module Protobug; end

# source://protobug//lib/protobug/base_descriptor.rb#4
module Protobug::BaseDescriptor
  # Returns the value of attribute full_name.
  #
  # source://protobug//lib/protobug/base_descriptor.rb#5
  def full_name; end

  # Sets the attribute full_name
  #
  # @param value the value to set the attribute full_name to.
  #
  # source://protobug//lib/protobug/base_descriptor.rb#5
  def full_name=(_arg0); end
end

# source://protobug//lib/protobug/binary_encoding.rb#6
module Protobug::BinaryEncoding
  private

  # source://protobug//lib/protobug/binary_encoding.rb#63
  def decode_length(binary); end

  # source://protobug//lib/protobug/binary_encoding.rb#46
  def decode_varint(binary); end

  # source://protobug//lib/protobug/binary_encoding.rb#71
  def decode_zigzag(size, value); end

  # source://protobug//lib/protobug/binary_encoding.rb#41
  def encode_length(contents, outbuf); end

  # source://protobug//lib/protobug/binary_encoding.rb#9
  def encode_varint(value, outbuf); end

  # source://protobug//lib/protobug/binary_encoding.rb#28
  def encode_zigzag(size, value, outbuf); end

  # source://protobug//lib/protobug/binary_encoding.rb#85
  def read_field_value(binary, wire_type); end

  class << self
    # @raise [EOFError]
    #
    # source://protobug//lib/protobug/binary_encoding.rb#63
    def decode_length(binary); end

    # source://protobug//lib/protobug/binary_encoding.rb#46
    def decode_varint(binary); end

    # source://protobug//lib/protobug/binary_encoding.rb#71
    def decode_zigzag(size, value); end

    # source://protobug//lib/protobug/binary_encoding.rb#41
    def encode_length(contents, outbuf); end

    # @raise [EncodeError]
    #
    # source://protobug//lib/protobug/binary_encoding.rb#9
    def encode_varint(value, outbuf); end

    # @raise [EncodeError]
    #
    # source://protobug//lib/protobug/binary_encoding.rb#28
    def encode_zigzag(size, value, outbuf); end

    # source://protobug//lib/protobug/binary_encoding.rb#85
    def read_field_value(binary, wire_type); end
  end
end

# source://protobug//lib/protobug/errors.rb#17
class Protobug::DecodeError < ::Protobug::Error; end

# source://protobug//lib/protobug/errors.rb#23
class Protobug::DefinitionError < ::Protobug::Error; end

# source://protobug//lib/protobug/errors.rb#14
class Protobug::EncodeError < ::Protobug::Error; end

# source://protobug//lib/protobug/enum.rb#4
module Protobug::Enum
  # source://protobug//lib/protobug/enum.rb#16
  def const_added(name); end

  # source://protobug//lib/protobug/enum.rb#72
  def decode(value); end

  # source://protobug//lib/protobug/enum.rb#55
  def decode_json_hash(json, registry: T.unsafe(nil), ignore_unknown_fields: T.unsafe(nil)); end

  # source://protobug//lib/protobug/enum.rb#79
  def default; end

  # source://protobug//lib/protobug/enum.rb#37
  def freeze; end

  # source://protobug//lib/protobug/enum.rb#31
  def reserved_range(range); end

  # Returns the value of attribute reserved_ranges.
  #
  # source://protobug//lib/protobug/enum.rb#14
  def reserved_ranges; end

  # Returns the value of attribute values.
  #
  # source://protobug//lib/protobug/enum.rb#14
  def values; end

  class << self
    # @private
    #
    # source://protobug//lib/protobug/enum.rb#5
    def extended(klass); end
  end
end

# source://protobug//lib/protobug/enum.rb#84
module Protobug::Enum::InstanceMethods
  # @raise [ArgumentError]
  #
  # source://protobug//lib/protobug/enum.rb#92
  def initialize(name, value); end

  # source://protobug//lib/protobug/enum.rb#120
  def ==(other); end

  # source://protobug//lib/protobug/enum.rb#133
  def ===(other); end

  # source://protobug//lib/protobug/enum.rb#139
  def as_json; end

  # @return [Boolean]
  #
  # source://protobug//lib/protobug/enum.rb#116
  def eql?(other); end

  # source://protobug//lib/protobug/enum.rb#108
  def hash; end

  # source://protobug//lib/protobug/enum.rb#100
  def pretty_print(pp); end

  # source://protobug//lib/protobug/enum.rb#112
  def to_s; end

  # source://protobug//lib/protobug/enum.rb#135
  def to_text; end

  class << self
    # @private
    #
    # source://protobug//lib/protobug/enum.rb#85
    def included(base); end
  end
end

# source://protobug//lib/protobug.rb#6
class Protobug::Error < ::StandardError; end

# source://protobug//lib/protobug/field.rb#6
class Protobug::Field
  # @return [Field] a new instance of Field
  #
  # source://protobug//lib/protobug/field.rb#10
  def initialize(number, name, json_name: T.unsafe(nil), cardinality: T.unsafe(nil), oneof: T.unsafe(nil), packed: T.unsafe(nil), proto3_optional: T.unsafe(nil)); end

  # Returns the value of attribute adder.
  #
  # source://protobug//lib/protobug/field.rb#7
  def adder; end

  # Sets the attribute adder
  #
  # @param value the value to set the attribute adder to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def adder=(_arg0); end

  # source://protobug//lib/protobug/field.rb#110
  def binary_decode(binary, message, registry, wire_type); end

  # source://protobug//lib/protobug/field.rb#92
  def binary_encode(value, outbuf); end

  # Returns the value of attribute cardinality.
  #
  # source://protobug//lib/protobug/field.rb#7
  def cardinality; end

  # Sets the attribute cardinality
  #
  # @param value the value to set the attribute cardinality to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def cardinality=(_arg0); end

  # Returns the value of attribute clearer.
  #
  # source://protobug//lib/protobug/field.rb#7
  def clearer; end

  # Sets the attribute clearer
  #
  # @param value the value to set the attribute clearer to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def clearer=(_arg0); end

  # source://protobug//lib/protobug/field.rb#64
  def define_adder(message); end

  # Returns the value of attribute haser.
  #
  # source://protobug//lib/protobug/field.rb#7
  def haser; end

  # Sets the attribute haser
  #
  # @param value the value to set the attribute haser to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def haser=(_arg0); end

  # Returns the value of attribute ivar.
  #
  # source://protobug//lib/protobug/field.rb#7
  def ivar; end

  # Sets the attribute ivar
  #
  # @param value the value to set the attribute ivar to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def ivar=(_arg0); end

  # source://protobug//lib/protobug/field.rb#148
  def json_decode(value, message, ignore_unknown_fields, registry); end

  # source://protobug//lib/protobug/field.rb#123
  def json_encode(value, print_unknown_fields:); end

  # source://protobug//lib/protobug/field.rb#133
  def json_key_encode(value); end

  # Returns the value of attribute json_name.
  #
  # source://protobug//lib/protobug/field.rb#7
  def json_name; end

  # Sets the attribute json_name
  #
  # @param value the value to set the attribute json_name to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def json_name=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://protobug//lib/protobug/field.rb#7
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def name=(_arg0); end

  # Returns the value of attribute number.
  #
  # source://protobug//lib/protobug/field.rb#7
  def number; end

  # Sets the attribute number
  #
  # @param value the value to set the attribute number to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def number=(_arg0); end

  # Returns the value of attribute oneof.
  #
  # source://protobug//lib/protobug/field.rb#7
  def oneof; end

  # Sets the attribute oneof
  #
  # @param value the value to set the attribute oneof to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def oneof=(_arg0); end

  # @return [Boolean]
  #
  # source://protobug//lib/protobug/field.rb#56
  def optional?; end

  # @return [Boolean]
  #
  # source://protobug//lib/protobug/field.rb#52
  def packed?; end

  # source://protobug//lib/protobug/field.rb#26
  def pretty_print(pp); end

  # @return [Boolean]
  #
  # source://protobug//lib/protobug/field.rb#60
  def proto3_optional?; end

  # @return [Boolean]
  #
  # source://protobug//lib/protobug/field.rb#48
  def repeated?; end

  # Returns the value of attribute setter.
  #
  # source://protobug//lib/protobug/field.rb#7
  def setter; end

  # Sets the attribute setter
  #
  # @param value the value to set the attribute setter to.
  #
  # source://protobug//lib/protobug/field.rb#7
  def setter=(_arg0); end

  # source://protobug//lib/protobug/field.rb#79
  def to_text(value); end

  # @raise [DecodeError]
  #
  # source://protobug//lib/protobug/field.rb#166
  def validate!(value, message); end

  private

  # source://protobug//lib/protobug/field.rb#180
  def binary_encode_packed(value, outbuf); end
end

# source://protobug//lib/protobug/field.rb#570
class Protobug::Field::BoolField < ::Protobug::Field::UInt64Field
  # source://protobug//lib/protobug/field.rb#571
  def binary_decode_one(*_arg0); end

  # source://protobug//lib/protobug/field.rb#575
  def binary_encode_one(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#600
  def default; end

  # source://protobug//lib/protobug/field.rb#579
  def json_decode_one(value, _ignore_unknown_fields, _registry); end

  # source://protobug//lib/protobug/field.rb#594
  def validate!(value, message); end
end

# source://protobug//lib/protobug/field.rb#314
class Protobug::Field::BytesField < ::Protobug::Field
  # @return [BytesField] a new instance of BytesField
  #
  # source://protobug//lib/protobug/field.rb#317
  def initialize(number, name, cardinality:, json_name: T.unsafe(nil), oneof: T.unsafe(nil), proto3_optional: T.unsafe(nil)); end

  # source://protobug//lib/protobug/field.rb#327
  def binary_decode_one(io, _message, _registry, wire_type); end

  # source://protobug//lib/protobug/field.rb#323
  def binary_encode_one(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#349
  def default; end

  # source://protobug//lib/protobug/field.rb#331
  def json_decode_one(value, _ignore_unknown_fields, _registry); end

  # source://protobug//lib/protobug/field.rb#345
  def json_encode_one(value, print_unknown_fields:); end

  # source://protobug//lib/protobug/field.rb#355
  def wire_type; end

  class << self
    # source://protobug//lib/protobug/field.rb#315
    def type; end
  end
end

# source://protobug//lib/protobug/field.rb#671
class Protobug::Field::DoubleField < ::Protobug::Field
  # @return [DoubleField] a new instance of DoubleField
  #
  # source://protobug//lib/protobug/field.rb#676
  def initialize(number, name, cardinality:, json_name: T.unsafe(nil), oneof: T.unsafe(nil), packed: T.unsafe(nil), proto3_optional: T.unsafe(nil)); end

  # source://protobug//lib/protobug/field.rb#686
  def binary_decode_one(io, _message, _registry, wire_type); end

  # source://protobug//lib/protobug/field.rb#682
  def binary_encode_one(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#673
  def binary_pack; end

  # source://protobug//lib/protobug/field.rb#726
  def default; end

  # source://protobug//lib/protobug/field.rb#691
  def json_decode_one(value, _ignore_unknown_fields, _registry); end

  # source://protobug//lib/protobug/field.rb#712
  def json_encode_one(value, print_unknown_fields:); end

  # source://protobug//lib/protobug/field.rb#672
  def type; end

  # source://protobug//lib/protobug/field.rb#674
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#607
class Protobug::Field::EnumField < ::Protobug::Field::Int32Field
  # @return [EnumField] a new instance of EnumField
  #
  # source://protobug//lib/protobug/field.rb#610
  def initialize(number, name, cardinality:, enum_type:, json_name: T.unsafe(nil), oneof: T.unsafe(nil), packed: T.unsafe(nil), proto3_optional: T.unsafe(nil)); end

  # source://protobug//lib/protobug/field.rb#644
  def binary_decode_one(io, _message, registry, wire_type); end

  # source://protobug//lib/protobug/field.rb#640
  def binary_encode_one(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#658
  def default; end

  # Returns the value of attribute enum_type.
  #
  # source://protobug//lib/protobug/field.rb#608
  def enum_type; end

  # source://protobug//lib/protobug/field.rb#617
  def json_decode(value, message, ignore_unknown_fields, registry); end

  # source://protobug//lib/protobug/field.rb#649
  def json_decode_one(value, ignore_unknown_fields, registry); end

  # source://protobug//lib/protobug/field.rb#654
  def json_encode_one(value, print_unknown_fields:); end

  # source://protobug//lib/protobug/field.rb#665
  def validate!(value, message); end
end

# source://protobug//lib/protobug/field.rb#554
class Protobug::Field::Fixed32Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#559
  def binary_pack; end

  # source://protobug//lib/protobug/field.rb#556
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#555
  def encoding; end

  # source://protobug//lib/protobug/field.rb#557
  def signed; end

  # source://protobug//lib/protobug/field.rb#558
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#517
class Protobug::Field::Fixed64Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#522
  def binary_pack; end

  # source://protobug//lib/protobug/field.rb#519
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#518
  def encoding; end

  # source://protobug//lib/protobug/field.rb#520
  def signed; end

  # source://protobug//lib/protobug/field.rb#521
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#733
class Protobug::Field::FloatField < ::Protobug::Field::DoubleField
  # source://protobug//lib/protobug/field.rb#735
  def binary_pack; end

  # source://protobug//lib/protobug/field.rb#734
  def type; end

  # source://protobug//lib/protobug/field.rb#736
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#739
class Protobug::Field::GroupField < ::Protobug::Field
  # @return [GroupField] a new instance of GroupField
  #
  # source://protobug//lib/protobug/field.rb#740
  def initialize(*args, group_type:, **kwargs); end
end

# source://protobug//lib/protobug/field.rb#533
class Protobug::Field::Int32Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#535
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#534
  def encoding; end

  # source://protobug//lib/protobug/field.rb#536
  def signed; end

  # source://protobug//lib/protobug/field.rb#537
  def wire_type; end
end

# bitlength: 32, 64
# signed: true, false
# EXCEPT: no unsigned zigzag
#
# source://protobug//lib/protobug/field.rb#496
class Protobug::Field::Int64Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#498
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#497
  def encoding; end

  # source://protobug//lib/protobug/field.rb#499
  def signed; end

  # source://protobug//lib/protobug/field.rb#500
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#402
class Protobug::Field::IntegerField < ::Protobug::Field
  # source://protobug//lib/protobug/field.rb#409
  def binary_decode_one(io, _message, _registry, wire_type); end

  # source://protobug//lib/protobug/field.rb#435
  def binary_encode_one(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#403
  def default; end

  # @raise [DecodeError]
  #
  # source://protobug//lib/protobug/field.rb#446
  def json_decode_one(value, _ignore_unknown_fields, _registry); end

  # source://protobug//lib/protobug/field.rb#465
  def json_encode_one(value, print_unknown_fields:); end

  # @raise [InvalidValueError]
  #
  # source://protobug//lib/protobug/field.rb#473
  def validate!(value, message); end
end

# source://protobug//lib/protobug/field.rb#232
class Protobug::Field::MapField < ::Protobug::Field::MessageField
  # @return [MapField] a new instance of MapField
  #
  # source://protobug//lib/protobug/field.rb#234
  def initialize(number, name, key_type:, value_type:, json_name: T.unsafe(nil), oneof: T.unsafe(nil), enum_type: T.unsafe(nil), message_type: T.unsafe(nil)); end

  # source://protobug//lib/protobug/field.rb#257
  def binary_encode(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#254
  def default; end

  # source://protobug//lib/protobug/field.rb#300
  def define_adder(message); end

  # source://protobug//lib/protobug/field.rb#273
  def json_decode(value, message, ignore_unknown_fields, registry); end

  # source://protobug//lib/protobug/field.rb#266
  def json_encode(value, print_unknown_fields:); end

  # source://protobug//lib/protobug/field.rb#253
  def repeated; end

  # @return [Boolean]
  #
  # source://protobug//lib/protobug/field.rb#255
  def repeated?; end

  # source://protobug//lib/protobug/field.rb#298
  def type_lookup(_registry); end
end

# source://protobug//lib/protobug/field.rb#233
Protobug::Field::MapField::SUPER_INITIALIZE = T.let(T.unsafe(nil), UnboundMethod)

# source://protobug//lib/protobug/field.rb#188
class Protobug::Field::MessageField < ::Protobug::Field
  # @return [MessageField] a new instance of MessageField
  #
  # source://protobug//lib/protobug/field.rb#191
  def initialize(number, name, cardinality:, message_type:, json_name: T.unsafe(nil), oneof: T.unsafe(nil), proto3_optional: T.unsafe(nil)); end

  # source://protobug//lib/protobug/field.rb#202
  def binary_decode_one(io, message, registry, wire_type); end

  # source://protobug//lib/protobug/field.rb#198
  def binary_encode_one(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#222
  def default; end

  # source://protobug//lib/protobug/field.rb#209
  def json_decode_one(value, ignore_unknown_fields, registry); end

  # source://protobug//lib/protobug/field.rb#218
  def json_encode_one(value, print_unknown_fields:); end

  # Returns the value of attribute message_type.
  #
  # source://protobug//lib/protobug/field.rb#189
  def message_type; end

  # source://protobug//lib/protobug/field.rb#214
  def type_lookup(registry); end

  # source://protobug//lib/protobug/field.rb#229
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#562
class Protobug::Field::SFixed32Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#567
  def binary_pack; end

  # source://protobug//lib/protobug/field.rb#564
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#563
  def encoding; end

  # source://protobug//lib/protobug/field.rb#565
  def signed; end

  # source://protobug//lib/protobug/field.rb#566
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#525
class Protobug::Field::SFixed64Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#530
  def binary_pack; end

  # source://protobug//lib/protobug/field.rb#527
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#526
  def encoding; end

  # source://protobug//lib/protobug/field.rb#528
  def signed; end

  # source://protobug//lib/protobug/field.rb#529
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#547
class Protobug::Field::SInt32Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#549
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#548
  def encoding; end

  # source://protobug//lib/protobug/field.rb#550
  def signed; end

  # source://protobug//lib/protobug/field.rb#551
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#510
class Protobug::Field::SInt64Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#512
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#511
  def encoding; end

  # source://protobug//lib/protobug/field.rb#513
  def signed; end

  # source://protobug//lib/protobug/field.rb#514
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#358
class Protobug::Field::StringField < ::Protobug::Field::BytesField
  # @return [StringField] a new instance of StringField
  #
  # source://protobug//lib/protobug/field.rb#361
  def initialize(number, name, cardinality:, json_name: T.unsafe(nil), oneof: T.unsafe(nil), proto3_optional: T.unsafe(nil)); end

  # @raise [DecodeError]
  #
  # source://protobug//lib/protobug/field.rb#372
  def binary_decode_one(io, _message, _registry, wire_type); end

  # source://protobug//lib/protobug/field.rb#367
  def binary_encode_one(value, outbuf); end

  # source://protobug//lib/protobug/field.rb#395
  def default; end

  # @raise [DecodeError]
  #
  # source://protobug//lib/protobug/field.rb#381
  def json_decode_one(value, _ignore_unknown_fields, _registry); end

  # source://protobug//lib/protobug/field.rb#391
  def json_encode_one(value, print_unknown_fields:); end

  class << self
    # source://protobug//lib/protobug/field.rb#359
    def type; end
  end
end

# source://protobug//lib/protobug/field.rb#540
class Protobug::Field::UInt32Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#542
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#541
  def encoding; end

  # source://protobug//lib/protobug/field.rb#543
  def signed; end

  # source://protobug//lib/protobug/field.rb#544
  def wire_type; end
end

# source://protobug//lib/protobug/field.rb#503
class Protobug::Field::UInt64Field < ::Protobug::Field::IntegerField
  # source://protobug//lib/protobug/field.rb#505
  def bit_length; end

  # source://protobug//lib/protobug/field.rb#504
  def encoding; end

  # source://protobug//lib/protobug/field.rb#506
  def signed; end

  # source://protobug//lib/protobug/field.rb#507
  def wire_type; end
end

# source://protobug//lib/protobug/errors.rb#26
class Protobug::InvalidValueError < ::Protobug::Error
  # @return [InvalidValueError] a new instance of InvalidValueError
  #
  # source://protobug//lib/protobug/errors.rb#27
  def initialize(msg, field, value, message = T.unsafe(nil)); end
end

# source://protobug//lib/protobug/message.rb#19
module Protobug::Message
  # source://protobug//lib/protobug/message.rb#121
  def decode(binary, registry:, object: T.unsafe(nil)); end

  # @raise [DecodeError]
  #
  # source://protobug//lib/protobug/message.rb#85
  def decode_json(json, registry:, ignore_unknown_fields: T.unsafe(nil)); end

  # @raise [DecodeError]
  #
  # source://protobug//lib/protobug/message.rb#97
  def decode_json_hash(json, registry:, ignore_unknown_fields: T.unsafe(nil)); end

  # @raise [EncodeError]
  #
  # source://protobug//lib/protobug/message.rb#146
  def encode(message); end

  # @raise [DefinitionError]
  #
  # source://protobug//lib/protobug/message.rb#169
  def field(number, name, type:, **kwargs); end

  # Returns the value of attribute fields_by_json_name.
  #
  # source://protobug//lib/protobug/message.rb#34
  def fields_by_json_name; end

  # Returns the value of attribute fields_by_name.
  #
  # source://protobug//lib/protobug/message.rb#34
  def fields_by_name; end

  # Returns the value of attribute fields_by_number.
  #
  # source://protobug//lib/protobug/message.rb#34
  def fields_by_number; end

  # source://protobug//lib/protobug/message.rb#36
  def freeze; end

  # Returns the value of attribute full_name.
  #
  # source://protobug//lib/protobug/message.rb#33
  def full_name; end

  # Sets the attribute full_name
  #
  # @param value the value to set the attribute full_name to.
  #
  # source://protobug//lib/protobug/message.rb#33
  def full_name=(_arg0); end

  # source://protobug//lib/protobug/message.rb#63
  def map(number, name, **kwargs); end

  # Returns the value of attribute oneofs.
  #
  # source://protobug//lib/protobug/message.rb#34
  def oneofs; end

  # source://protobug//lib/protobug/message.rb#47
  def optional(number, name, **kwargs); end

  # source://protobug//lib/protobug/message.rb#55
  def repeated(number, name, **kwargs); end

  # source://protobug//lib/protobug/message.rb#71
  def required(number, name, **kwargs); end

  # @raise [DefinitionError]
  #
  # source://protobug//lib/protobug/message.rb#79
  def reserved_range(range); end

  # Returns the value of attribute reserved_ranges.
  #
  # source://protobug//lib/protobug/message.rb#34
  def reserved_ranges; end

  class << self
    # @private
    #
    # source://protobug//lib/protobug/message.rb#20
    def extended(base); end
  end
end

# source://protobug//lib/protobug/message.rb#267
module Protobug::Message::InstanceMethods
  # source://protobug//lib/protobug/message.rb#278
  def initialize; end

  # source://protobug//lib/protobug/message.rb#268
  def ==(other); end

  # source://protobug//lib/protobug/message.rb#324
  def as_json(print_unknown_fields: T.unsafe(nil)); end

  # source://protobug//lib/protobug/message.rb#274
  def eql?(other); end

  # source://protobug//lib/protobug/message.rb#305
  def hash; end

  # source://protobug//lib/protobug/message.rb#286
  def pretty_print(pp); end

  # source://protobug//lib/protobug/message.rb#336
  def to_json(print_unknown_fields: T.unsafe(nil)); end

  # source://protobug//lib/protobug/message.rb#320
  def to_proto; end

  # source://protobug//lib/protobug/message.rb#309
  def to_text; end

  # Returns the value of attribute unknown_fields.
  #
  # source://protobug//lib/protobug/message.rb#276
  def unknown_fields; end
end

# source://protobug//lib/protobug/registry.rb#4
class Protobug::Registry
  # @return [Registry] a new instance of Registry
  # @yield [_self]
  # @yieldparam _self [Protobug::Registry] the object that the method was called on
  #
  # source://protobug//lib/protobug/registry.rb#5
  def initialize(&blk); end

  # source://protobug//lib/protobug/registry.rb#32
  def fetch(*_arg0, **_arg1, &_arg2); end

  # source://protobug//lib/protobug/registry.rb#13
  def freeze; end

  # @raise [ArgumentError]
  #
  # source://protobug//lib/protobug/registry.rb#18
  def register(klass); end
end

# source://protobug//lib/protobug/message.rb#9
Protobug::UNSET = T.let(T.unsafe(nil), Object)

# source://protobug//lib/protobug/errors.rb#20
class Protobug::UnknownFieldError < ::Protobug::DecodeError; end

# source://protobug//lib/protobug/errors.rb#7
class Protobug::UnsupportedFeatureError < ::Protobug::Error
  # @return [UnsupportedFeatureError] a new instance of UnsupportedFeatureError
  #
  # source://protobug//lib/protobug/errors.rb#8
  def initialize(feature, msg); end
end

# source://protobug//lib/protobug/version.rb#4
Protobug::VERSION = T.let(T.unsafe(nil), String)
