# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bigdecimal` gem.
# Please instead update this file by running `bin/tapioca gem bigdecimal`.


class BigDecimal < ::Numeric
  # source://bigdecimal//lib/bigdecimal.rb#4
  def %(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def *(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def **(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def +(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def +@; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def -(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def -@; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def /(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def <(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def <=(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def <=>(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def ==(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def ===(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def >(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def >=(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def _dump(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def abs; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def add(_arg0, _arg1); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def ceil(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def clone; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def coerce(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def div(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def divmod(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def dup; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def eql?(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def exponent; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def finite?; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def fix; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def floor(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def frac; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def hash; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def infinite?; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def inspect; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def modulo(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def mult(_arg0, _arg1); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def n_significant_digits; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def nan?; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def nonzero?; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def power(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def precision; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def precision_scale; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def precs; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def quo(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def remainder(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def round(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def scale; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def sign; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def split; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def sqrt(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def sub(_arg0, _arg1); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def to_f; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def to_i; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def to_int; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def to_r; end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def to_s(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def truncate(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#4
  def zero?; end

  class << self
    # source://bigdecimal//lib/bigdecimal.rb#4
    def _load(_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#4
    def double_fig; end

    # source://bigdecimal//lib/bigdecimal.rb#4
    def interpret_loosely(_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#4
    def limit(*_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#4
    def mode(*_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#4
    def save_exception_mode; end

    # source://bigdecimal//lib/bigdecimal.rb#4
    def save_limit; end

    # source://bigdecimal//lib/bigdecimal.rb#4
    def save_rounding_mode; end
  end
end

BigDecimal::VERSION = T.let(T.unsafe(nil), String)
