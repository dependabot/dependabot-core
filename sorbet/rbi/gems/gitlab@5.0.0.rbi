# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gitlab` gem.
# Please instead update this file by running `bin/tapioca gem gitlab`.

# source://gitlab//lib/gitlab/version.rb#3
module Gitlab
  extend ::Gitlab::Configuration

  class << self
    # Returns an unsorted array of available client methods.
    #
    # @return [Array<Symbol>]
    #
    # source://gitlab//lib/gitlab.rb#52
    def actions; end

    # Alias for Gitlab::Client.new
    #
    # @return [Gitlab::Client]
    #
    # source://gitlab//lib/gitlab.rb#21
    def client(options = T.unsafe(nil)); end

    # Delegate to HTTParty.http_proxy
    #
    # source://gitlab//lib/gitlab.rb#45
    def http_proxy(address = T.unsafe(nil), port = T.unsafe(nil), username = T.unsafe(nil), password = T.unsafe(nil)); end

    # source://gitlab//lib/gitlab.rb#26
    def method_missing(method, *args, **keywargs, &block); end

    # Delegate to Gitlab::Client
    #
    # @return [Boolean]
    #
    # source://gitlab//lib/gitlab.rb#40
    def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
  end
end

# @private
#
# source://gitlab//lib/gitlab/api.rb#5
class Gitlab::API < ::Gitlab::Request
  # Creates a new API.
  #
  # @raise [Error:MissingCredentials]
  # @return [API] a new instance of API
  #
  # source://gitlab//lib/gitlab/api.rb#14
  def initialize(options = T.unsafe(nil)); end

  # @private
  #
  # source://gitlab//lib/gitlab/api.rb#7
  def auth_token=(_arg0); end

  # source://gitlab//lib/gitlab/api.rb#7
  def endpoint; end

  # source://gitlab//lib/gitlab/api.rb#7
  def endpoint=(_arg0); end

  # source://gitlab//lib/gitlab/api.rb#7
  def httparty; end

  # source://gitlab//lib/gitlab/api.rb#7
  def httparty=(_arg0); end

  # source://gitlab//lib/gitlab/api.rb#7
  def private_token; end

  # source://gitlab//lib/gitlab/api.rb#7
  def private_token=(_arg0); end

  # source://gitlab//lib/gitlab/api.rb#7
  def sudo; end

  # source://gitlab//lib/gitlab/api.rb#7
  def sudo=(_arg0); end

  # source://gitlab//lib/gitlab/api.rb#7
  def user_agent; end

  # source://gitlab//lib/gitlab/api.rb#7
  def user_agent=(_arg0); end

  class << self
    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#46
    def default_cookies; end

    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#46
    def default_options; end
  end
end

# source://gitlab//lib/gitlab/cli_helpers.rb#7
class Gitlab::CLI; end

# Defines methods related to CLI output and formatting.
#
# source://gitlab//lib/gitlab/cli_helpers.rb#9
module Gitlab::CLI::Helpers
  private

  # Returns actions available to CLI & Shell
  #
  # @return [Array]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#15
  def actions; end

  # Returns Gitlab::Client instance
  #
  # @return [Gitlab::Client]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#22
  def client; end

  # Confirms command with a desctructive action.
  #
  # @return [String]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#72
  def confirm_command(cmd); end

  # Returns filtered excluded fields.
  #
  # @return [Array]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#48
  def excluded_fields(args); end

  # Returns fields filtered by a keyword.
  #
  # @return [Array]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#55
  def filtered_fields(args, key); end

  # Helper function to get rows and keys from data returned from API call
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#199
  def get_keys(args, data); end

  # Helper function to call Gitlab commands with args.
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#208
  def gitlab_helper(cmd, args = T.unsafe(nil)); end

  # Gets defined help for a specific command/action.
  #
  # @return [String]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#88
  def help(cmd = T.unsafe(nil), &block); end

  # Check if arg is a color in 6-digit hex notation with leading '#' sign
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#230
  def hex_color?(arg); end

  # Returns method names and their owners
  #
  # @return [Array<Hash>]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#29
  def method_owners; end

  # source://gitlab//lib/gitlab/cli_helpers.rb#108
  def output_json(cmd, args, data); end

  # Outputs a nicely formatted table or error message.
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#97
  def output_table(cmd, args, data); end

  # Renders the result of given commands and arguments into a Hash
  #
  # @param data [Array] Resultset from the API call
  # @param cmd [String] The command passed to the API
  # @param args [Array] Options passed to the API call
  # @param single_value [bool] If set to true, a single result should be returned
  # @return [Hash] Result hash
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#165
  def record_hash(data, cmd, args, single_value: T.unsafe(nil)); end

  # Table to display records.
  #
  # @return [Terminal::Table]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#127
  def record_table(data, cmd, args); end

  # Returns filtered required fields.
  #
  # @return [Array]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#41
  def required_fields(args); end

  # Convert a hash (recursively) to use symbol hash keys
  #
  # @return [Hash]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#217
  def symbolize_keys(hash); end

  # Confirms command is valid.
  #
  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#64
  def valid_command?(cmd); end

  # YAML::load on a single argument
  #
  # source://gitlab//lib/gitlab/cli_helpers.rb#237
  def yaml_load(arg); end

  class << self
    # Returns actions available to CLI & Shell
    #
    # @return [Array]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#15
    def actions; end

    # Returns Gitlab::Client instance
    #
    # @return [Gitlab::Client]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#22
    def client; end

    # Confirms command with a desctructive action.
    #
    # @return [String]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#72
    def confirm_command(cmd); end

    # Returns filtered excluded fields.
    #
    # @return [Array]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#48
    def excluded_fields(args); end

    # Returns fields filtered by a keyword.
    #
    # @return [Array]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#55
    def filtered_fields(args, key); end

    # Helper function to get rows and keys from data returned from API call
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#199
    def get_keys(args, data); end

    # Helper function to call Gitlab commands with args.
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#208
    def gitlab_helper(cmd, args = T.unsafe(nil)); end

    # Gets defined help for a specific command/action.
    #
    # @return [String]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#88
    def help(cmd = T.unsafe(nil), &block); end

    # Check if arg is a color in 6-digit hex notation with leading '#' sign
    #
    # @return [Boolean]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#230
    def hex_color?(arg); end

    # Returns method names and their owners
    #
    # @return [Array<Hash>]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#29
    def method_owners; end

    # source://gitlab//lib/gitlab/cli_helpers.rb#108
    def output_json(cmd, args, data); end

    # Outputs a nicely formatted table or error message.
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#97
    def output_table(cmd, args, data); end

    # Renders the result of given commands and arguments into a Hash
    #
    # @param data [Array] Resultset from the API call
    # @param cmd [String] The command passed to the API
    # @param args [Array] Options passed to the API call
    # @param single_value [bool] If set to true, a single result should be returned
    # @return [Hash] Result hash
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#165
    def record_hash(data, cmd, args, single_value: T.unsafe(nil)); end

    # Table to display records.
    #
    # @return [Terminal::Table]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#127
    def record_table(data, cmd, args); end

    # Returns filtered required fields.
    #
    # @return [Array]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#41
    def required_fields(args); end

    # Convert a hash (recursively) to use symbol hash keys
    #
    # @return [Hash]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#217
    def symbolize_keys(hash); end

    # Confirms command is valid.
    #
    # @return [Boolean]
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#64
    def valid_command?(cmd); end

    # YAML::load on a single argument
    #
    # source://gitlab//lib/gitlab/cli_helpers.rb#237
    def yaml_load(arg); end
  end
end

# Wrapper for the Gitlab REST API.
#
# source://gitlab//lib/gitlab/client.rb#5
class Gitlab::Client < ::Gitlab::API
  include ::Gitlab::Client::AccessRequests
  include ::Gitlab::Client::ApplicationSettings
  include ::Gitlab::Client::Avatar
  include ::Gitlab::Client::AwardEmojis
  include ::Gitlab::Client::Boards
  include ::Gitlab::Client::Branches
  include ::Gitlab::Client::BroadcastMessages
  include ::Gitlab::Client::BuildVariables
  include ::Gitlab::Client::Builds
  include ::Gitlab::Client::Commits
  include ::Gitlab::Client::ContainerRegistry
  include ::Gitlab::Client::Deployments
  include ::Gitlab::Client::Environments
  include ::Gitlab::Client::EpicIssues
  include ::Gitlab::Client::Epics
  include ::Gitlab::Client::Events
  include ::Gitlab::Client::Features
  include ::Gitlab::Client::GroupBadges
  include ::Gitlab::Client::GroupBoards
  include ::Gitlab::Client::GroupLabels
  include ::Gitlab::Client::GroupMilestones
  include ::Gitlab::Client::Groups
  include ::Gitlab::Client::IssueLinks
  include ::Gitlab::Client::Issues
  include ::Gitlab::Client::Jobs
  include ::Gitlab::Client::Keys
  include ::Gitlab::Client::Labels
  include ::Gitlab::Client::Lint
  include ::Gitlab::Client::Markdown
  include ::Gitlab::Client::MergeRequestApprovals
  include ::Gitlab::Client::MergeRequests
  include ::Gitlab::Client::MergeTrains
  include ::Gitlab::Client::Milestones
  include ::Gitlab::Client::Namespaces
  include ::Gitlab::Client::Notes
  include ::Gitlab::Client::Packages
  include ::Gitlab::Client::PipelineSchedules
  include ::Gitlab::Client::PipelineTriggers
  include ::Gitlab::Client::Pipelines
  include ::Gitlab::Client::ProjectBadges
  include ::Gitlab::Client::ProjectClusters
  include ::Gitlab::Client::ProjectExports
  include ::Gitlab::Client::ProjectReleaseLinks
  include ::Gitlab::Client::ProjectReleases
  include ::Gitlab::Client::Projects
  include ::Gitlab::Client::ProtectedTags
  include ::Gitlab::Client::RemoteMirrors
  include ::Gitlab::Client::Repositories
  include ::Gitlab::Client::RepositoryFiles
  include ::Gitlab::Client::RepositorySubmodules
  include ::Gitlab::Client::ResourceLabelEvents
  include ::Gitlab::Client::ResourceStateEvents
  include ::Gitlab::Client::Runners
  include ::Gitlab::Client::Search
  include ::Gitlab::Client::Services
  include ::Gitlab::Client::Sidekiq
  include ::Gitlab::Client::Snippets
  include ::Gitlab::Client::SystemHooks
  include ::Gitlab::Client::Tags
  include ::Gitlab::Client::Templates
  include ::Gitlab::Client::Todos
  include ::Gitlab::Client::Users
  include ::Gitlab::Client::UserSnippets
  include ::Gitlab::Client::Versions
  include ::Gitlab::Client::Wikis

  # Create group access token
  #
  # @example
  #   Gitlab.create_group_access_token(2, "token", ["api", "read_user"])
  #   Gitlab.create_group_access_token(2, "token", ["api", "read_user"], 20)
  #   Gitlab.create_group_access_token(2, "token", ["api", "read_user"], 20, "1970-01-01")
  # @param group_id [Integer] The ID of the group.
  # @param name [String] Name for group access token.
  # @param scopes [Array<String>] Array of scopes for the group access token
  # @param access_level [Integer] Project access level (10: Guest, 20: Reporter, 30: Developer, 40: Maintainer, 50: Owner).
  # @param expires_at [String] Date for group access token expiration in ISO format.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#489
  def create_group_access_token(group_id, name, scopes, access_level = T.unsafe(nil), expires_at = T.unsafe(nil)); end

  # Get group access token information
  #
  # @example
  #   Gitlab.group_access_token(1, 1)
  # @param group_id [Integer] The ID of the group.
  # @param group_access_token_id [Integer] ID of the group access token.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#472
  def group_access_token(group_id, group_access_token_id); end

  # Get all access tokens for a group
  #
  # @example
  #   Gitlab.group_access_tokens(1)
  # @param group_id [Integer] The ID of the group.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#460
  def group_access_tokens(group_id); end

  # Text representation of the client, masking private token.
  #
  # @return [String]
  #
  # source://gitlab//lib/gitlab/client.rb#78
  def inspect; end

  # Revoke a group access token
  #
  # @example
  #   Gitlab.revoke_group_access_token(1, 1)
  # @param user_id [Integer] The ID of the group.
  # @param group_access_token_id [Integer] ID of the group access token.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#504
  def revoke_group_access_token(group_id, group_access_token_id); end

  # Utility method for URL encoding of a string.
  # Copied from https://ruby-doc.org/stdlib-2.7.0/libdoc/erb/rdoc/ERB/Util.html
  #
  # @return [String]
  #
  # source://gitlab//lib/gitlab/client.rb#88
  def url_encode(url); end

  private

  # source://gitlab//lib/gitlab/client.rb#94
  def only_show_last_four_chars(token); end

  class << self
    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#46
    def default_cookies; end

    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#46
    def default_options; end
  end
end

# Defines methods related to Award Emojis.
#
# @see https://docs.gitlab.com/ce/api/access_requests.html
#
# source://gitlab//lib/gitlab/client/access_requests.rb#6
module Gitlab::Client::AccessRequests
  # Approves a group access request for the given user.
  #
  # @example
  #   Gitlab.approve_group_access_request(1, 1)
  #   Gitlab.approve_group_access_request(1, 1, {access_level: '30'})
  # @option options
  # @param :group(required) [Integer, String] The ID or name of a group.
  # @param :user_id(required) [Integer] The user ID of the access requester
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Information about the approved group access request
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#75
  def approve_group_access_request(group, user_id, options = T.unsafe(nil)); end

  # Approves a project access request for the given user.
  #
  # @example
  #   Gitlab.approve_project_access_request(1, 1)
  #   Gitlab.approve_project_access_request(1, 1, {access_level: '30'})
  # @option options
  # @param :project(required) [Integer, String] The ID or name of a project.
  # @param :user_id(required) [Integer] The user ID of the access requester
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Information about the approved project access request
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#61
  def approve_project_access_request(project, user_id, options = T.unsafe(nil)); end

  # Denies a group access request for the given user.
  #
  # @example
  #   Gitlab.deny_group_access_request(1, 1)
  # @param :group(required) [Integer, String] The ID or name of a group.
  # @param :user_id(required) [Integer] The user ID of the access requester
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#99
  def deny_group_access_request(group, user_id); end

  # Denies a project access request for the given user.
  #
  # @example
  #   Gitlab.deny_project_access_request(1, 1)
  # @param :project(required) [Integer, String] The ID or name of a project.
  # @param :user_id(required) [Integer] The user ID of the access requester
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#87
  def deny_project_access_request(project, user_id); end

  # Gets a list of access requests for a group viewable by the authenticated user.
  #
  # @example
  #   Gitlab.group_access_requests(1)
  # @param :group(required) [Integer, String] The ID or name of a group.
  # @return [Array<Gitlab::ObjectifiedHash>] List of group access requests
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#25
  def group_access_requests(group); end

  # Gets a list of access requests for a project viewable by the authenticated user.
  #
  # @example
  #   Gitlab.project_access_requests(1)
  # @param :project(required) [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>] List of project access requests
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#14
  def project_access_requests(project); end

  # Requests access for the authenticated user to a group.
  #
  # @example
  #   Gitlab.request_group_access(1)
  # @param :group(required) [Integer, String] The ID or name of a group.
  # @return [Gitlab::ObjectifiedHash] Information about the requested group access
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#47
  def request_group_access(group); end

  # Requests access for the authenticated user to a project.
  #
  # @example
  #   Gitlab.request_project_access(1)
  # @param :project(required) [Integer, String] The ID or name of a project.
  # @return [Gitlab::ObjectifiedHash] Information about the requested project access
  #
  # source://gitlab//lib/gitlab/client/access_requests.rb#36
  def request_project_access(project); end
end

# Defines methods related to application settings.
#
# @see https://docs.gitlab.com/ee/api/settings.html
#
# source://gitlab//lib/gitlab/client/application_settings.rb#6
module Gitlab::Client::ApplicationSettings
  # Retrives the application settings of Gitlab.
  #
  # @example
  #   Gitlab.application_settings
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/application_settings.rb#13
  def application_settings; end

  # Edit the applications settings of Gitlab.
  #
  # @example
  #   Gitlab.edit_application_settings({ signup_enabled: false })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/application_settings.rb#168
  def edit_application_settings(options = T.unsafe(nil)); end
end

# Defines methods related to avatar.
#
# @see https://docs.gitlab.com/ce/api/avatar.html
#
# source://gitlab//lib/gitlab/client/avatar.rb#6
module Gitlab::Client::Avatar
  # Get a single avatar URL for a user with the given email address.
  #
  # @example
  #   Gitlab.avatar(email: 'admin@example.com')
  #   Gitlab.avatar(email: 'admin@example.com', size: 32)
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/avatar.rb#17
  def avatar(options = T.unsafe(nil)); end
end

# Defines methods related to Award Emojis.
#
# @see https://docs.gitlab.com/ce/api/award_emoji.html
#
# source://gitlab//lib/gitlab/client/award_emojis.rb#6
module Gitlab::Client::AwardEmojis
  # Gets a single award emoji for an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.award_emoji(1, 80, 'issue', 4)
  #   Gitlab.award_emoji(1, 60, 'merge_request', 4)
  #   Gitlab.award_emoji(1, 40, 'snippet', 4)
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @param award_id [Integer] The ID of an award emoji.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#50
  def award_emoji(project, awardable_id, awardable_type, award_id); end

  # Gets a list of all award emoji for an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.award_emojis(1, 80, 'issue')
  #   Gitlab.award_emojis(1, 60, 'merge_request')
  #   Gitlab.award_emojis(1, 40, 'snippet')
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#18
  def award_emojis(project, awardable_id, awardable_type); end

  # Awards a new emoji to an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.create_award_emoji(1, 80, 'issue', 'blowfish')
  #   Gitlab.create_award_emoji(1, 80, 'merge_request', 'blowfish')
  #   Gitlab.create_award_emoji(1, 80, 'snippet', 'blowfish')
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @param emoji_name [String] The name of the emoji, without colons.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#83
  def create_award_emoji(project, awardable_id, awardable_type, emoji_name); end

  # Awards a new emoji to a note on an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.create_note_award_emoji(1, 80, 'issue', 1, 'blowfish')
  #   Gitlab.create_note_award_emoji(1, 80, 'merge_request', 1, 'blowfish')
  #   Gitlab.create_note_award_emoji(1, 80, 'snippet', 1, 'blowfish')
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @param note_id [Integer] The ID of a note.
  # @param emoji_name [String] The name of the emoji, without colons.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#100
  def create_note_award_emoji(project, awardable_id, awardable_type, note_id, emoji_name); end

  # Deletes a single award emoji from an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.delete_award_emoji(1, 80, 'issue', 4)
  #   Gitlab.delete_award_emoji(1, 60, 'merge_request', 4)
  #   Gitlab.delete_award_emoji(1, 40, 'snippet', 4)
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @param award_id [Integer] The ID of an award emoji.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#116
  def delete_award_emoji(project, awardable_id, awardable_type, award_id); end

  # Deletes a single award emoji from a single note on an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.delete_note_award_emoji(1, 80, 'issue', 1, 4)
  #   Gitlab.delete_note_award_emoji(1, 60, 'merge_request', 1, 4)
  #   Gitlab.delete_note_award_emoji(1, 40, 'snippet', 1, 4)
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @param note_id [Integer] The ID of a note.
  # @param award_id [Integer] The ID of an award emoji.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#133
  def delete_note_award_emoji(project, awardable_id, awardable_type, note_id, award_id); end

  # Gets a single award emoji from a single note on an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.note_award_emoji(1, 80, 'issue', 1, 4)
  #   Gitlab.note_award_emoji(1, 60, 'merge_request', 1, 4)
  #   Gitlab.note_award_emoji(1, 40, 'snippet', 1, 4)
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @param note_id [Integer] The ID of a note.
  # @param award_id [Integer] The ID of an award emoji.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#67
  def note_award_emoji(project, awardable_id, awardable_type, note_id, award_id); end

  # Gets a list of all award emoji for a single note on an awardable(issue, merge request or snippet)
  #
  # @example
  #   Gitlab.note_award_emojis(1, 80, 'issue', 1)
  #   Gitlab.note_award_emojis(1, 60, 'merge_request', 1)
  #   Gitlab.note_award_emojis(1, 40, 'snippet', 1)
  # @param project [Integer] The ID of a project.
  # @param awardable_id [Integer] The ID of an awardable(issue, merge request or snippet).
  # @param awardable_type [String] The type of the awardable(can be 'issue', 'merge_request' or 'snippet')
  # @param note_id [Integer] The ID of a note.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/award_emojis.rb#34
  def note_award_emojis(project, awardable_id, awardable_type, note_id); end
end

# Defines methods related to issue boards.
#
# @see https://docs.gitlab.com/ce/api/boards.html
#
# source://gitlab//lib/gitlab/client/boards.rb#6
module Gitlab::Client::Boards
  # Get a single board.
  #
  # @example
  #   Gitlab.board(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a board.
  # @return [Gitlab::ObjectifiedHash] Returns information about the board
  #
  # source://gitlab//lib/gitlab/client/boards.rb#30
  def board(project, id); end

  # Gets a single board list
  #
  # @example
  #   Gitlab.board_list(5, 42, 25)
  # @param project [Integer, String] The ID or name of a project.
  # @param board_id [Integer] The ID of a board.
  # @param id [Integer] The ID of a list.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/boards.rb#100
  def board_list(project, board_id, id); end

  # Gets a board lists
  #
  # @example
  #   Gitlab.board_lists(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a board.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/boards.rb#86
  def board_lists(project, id); end

  # Gets a list of project's boards.
  #
  # @example
  #   Gitlab.boards(5)
  #   Gitlab.boards({ per_page: 40 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/boards.rb#18
  def boards(project, options = T.unsafe(nil)); end

  # Creates a new board.
  #
  # @example
  #   Gitlab.create_board(5, 'newboard')
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of the new board.
  # @return [Gitlab::ObjectifiedHash] Information about created board.
  #
  # source://gitlab//lib/gitlab/client/boards.rb#42
  def create_board(project, name); end

  # Creates a new board list.
  # Only for admins and project owners
  #
  # @example
  #   Gitlab.create_board_list(5, 42, 25)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a board.
  # @param label_id [Integer] The ID of a label.
  # @return [Gitlab::ObjectifiedHash] Information about created list.
  #
  # source://gitlab//lib/gitlab/client/boards.rb#114
  def create_board_list(project, board_id, label_id); end

  # Deletes a board.
  #
  # @example
  #   Gitlab.delete_board(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a board.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/boards.rb#74
  def delete_board(project, id); end

  # Deletes  a board list.
  # Only for admins and project owners
  #
  # @example
  #   Gitlab.delete_board_list(3, 42, 32)
  # @param project [Integer, String] The ID or name of a project.
  # @param board_id [Integer] The ID of a board.
  # @param id [Integer] The ID of a list.
  # @return [Gitlab::ObjectifiedHash] Information about deleted board list.
  #
  # source://gitlab//lib/gitlab/client/boards.rb#142
  def delete_board_list(project, board_id, id); end

  # Updates a board.
  #
  # @example
  #   Gitlab.edit_board(5, 1, name: 'new_name')
  #   Gitlab.edit_board(5, 1, name: 'new_name', assignee_id: 1, milestone_id: 1)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a board.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated board.
  #
  # source://gitlab//lib/gitlab/client/boards.rb#62
  def edit_board(project, id, options = T.unsafe(nil)); end

  # Updates a board list.
  # Only for admins and project owners
  #
  # @example
  #   Gitlab.edit_board_list(6, 1, 12, 5)
  # @param project [Integer, String] The ID or name of a project.
  # @param board_id [Integer] The ID of a board.
  # @param id [Integer] The ID of a list.
  # @return [Gitlab::ObjectifiedHash] Information about updated board list.
  #
  # source://gitlab//lib/gitlab/client/boards.rb#128
  def edit_board_list(project, board_id, id, position); end
end

# Defines methods related to repositories.
#
# @see https://docs.gitlab.com/ce/api/branches.html
#
# source://gitlab//lib/gitlab/client/branches.rb#6
module Gitlab::Client::Branches
  # Gets information about a repository branch.
  #
  # @example
  #   Gitlab.branch(3, 'api')
  #   Gitlab.repo_branch(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#31
  def branch(project, branch); end

  # Gets a list of project repositiory branches.
  #
  # @example
  #   Gitlab.branches(42)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#17
  def branches(project, options = T.unsafe(nil)); end

  # Creates a repository branch.  Requires Gitlab >= 6.8.x
  #
  # @example
  #   Gitlab.create_branch(3, 'api', 'feat/new-api')
  #   Gitlab.repo_create_branch(5, 'master', 'develop')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the new branch.
  # @param ref [String] Create branch from commit sha or existing branch
  # @return [Gitlab::ObjectifiedHash] Details about the branch
  #
  # source://gitlab//lib/gitlab/client/branches.rb#80
  def create_branch(project, branch, ref); end

  # Deletes a repository branch.  Requires Gitlab >= 6.8.x
  #
  # @example
  #   Gitlab.delete_branch(3, 'api')
  #   Gitlab.repo_delete_branch(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch to delete
  #
  # source://gitlab//lib/gitlab/client/branches.rb#93
  def delete_branch(project, branch); end

  # Delete all branches that are merged into the project default branch. Protected branches will not be deleted as part of this operation.
  #
  # @example
  #   Gitlab.delete_merged_branches(3)
  # @param project [Integer, String] The ID or name of a project.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/branches.rb#105
  def delete_merged_branches(project); end

  # Protects a repository branch.
  #
  # To update options, call `protect_branch` again with new options (i.e. `developers_can_push: false`)
  #
  # @example
  #   Gitlab.protect_branch(3, 'api')
  #   Gitlab.repo_protect_branch(5, 'master')
  #   Gitlab.protect_branch(5, 'api', developers_can_push: true)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Details about the branch
  #
  # source://gitlab//lib/gitlab/client/branches.rb#51
  def protect_branch(project, branch, options = T.unsafe(nil)); end

  # Gets a single protected branch or wildcard protected branch
  #
  # @example
  #   Gitlab.protected_branch(3, 'api')
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of the branch or wildcard
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#130
  def protected_branch(project, branch); end

  # Gets a list of protected branches from a project.
  #
  # @example
  #   Gitlab.protected_branches(42)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#117
  def protected_branches(project); end

  # Gets information about a repository branch.
  #
  # @example
  #   Gitlab.branch(3, 'api')
  #   Gitlab.repo_branch(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#31
  def repo_branch(project, branch); end

  # Gets a list of project repositiory branches.
  #
  # @example
  #   Gitlab.branches(42)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#17
  def repo_branches(project, options = T.unsafe(nil)); end

  # Creates a repository branch.  Requires Gitlab >= 6.8.x
  #
  # @example
  #   Gitlab.create_branch(3, 'api', 'feat/new-api')
  #   Gitlab.repo_create_branch(5, 'master', 'develop')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the new branch.
  # @param ref [String] Create branch from commit sha or existing branch
  # @return [Gitlab::ObjectifiedHash] Details about the branch
  #
  # source://gitlab//lib/gitlab/client/branches.rb#80
  def repo_create_branch(project, branch, ref); end

  # Deletes a repository branch.  Requires Gitlab >= 6.8.x
  #
  # @example
  #   Gitlab.delete_branch(3, 'api')
  #   Gitlab.repo_delete_branch(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch to delete
  #
  # source://gitlab//lib/gitlab/client/branches.rb#93
  def repo_delete_branch(project, branch); end

  # Delete all branches that are merged into the project default branch. Protected branches will not be deleted as part of this operation.
  #
  # @example
  #   Gitlab.delete_merged_branches(3)
  # @param project [Integer, String] The ID or name of a project.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/branches.rb#105
  def repo_delete_merged_branches(project); end

  # Protects a repository branch.
  #
  # To update options, call `protect_branch` again with new options (i.e. `developers_can_push: false`)
  #
  # @example
  #   Gitlab.protect_branch(3, 'api')
  #   Gitlab.repo_protect_branch(5, 'master')
  #   Gitlab.protect_branch(5, 'api', developers_can_push: true)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Details about the branch
  #
  # source://gitlab//lib/gitlab/client/branches.rb#51
  def repo_protect_branch(project, branch, options = T.unsafe(nil)); end

  # Gets a single protected branch or wildcard protected branch
  #
  # @example
  #   Gitlab.protected_branch(3, 'api')
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of the branch or wildcard
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#130
  def repo_protected_branch(project, branch); end

  # Gets a list of protected branches from a project.
  #
  # @example
  #   Gitlab.protected_branches(42)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/branches.rb#117
  def repo_protected_branches(project); end

  # Unprotects a repository branch.
  #
  # @example
  #   Gitlab.unprotect_branch(3, 'api')
  #   Gitlab.repo_unprotect_branch(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch.
  # @return [Gitlab::ObjectifiedHash] Details about the branch
  #
  # source://gitlab//lib/gitlab/client/branches.rb#65
  def repo_unprotect_branch(project, branch); end

  # Unprotects a repository branch.
  #
  # @example
  #   Gitlab.unprotect_branch(3, 'api')
  #   Gitlab.repo_unprotect_branch(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] The name of the branch.
  # @return [Gitlab::ObjectifiedHash] Details about the branch
  #
  # source://gitlab//lib/gitlab/client/branches.rb#65
  def unprotect_branch(project, branch); end
end

# Defines methods related to broadcast messages (only accessible to administrators).
#
# @see https://docs.gitlab.com/ce/api/broadcast_messages.html
#
# source://gitlab//lib/gitlab/client/broadcast_messages.rb#6
module Gitlab::Client::BroadcastMessages
  # Get a specific broadcast message
  #
  # @example
  #   Gitlab.broadcast_message(3)
  # @param id [Integer] The ID of broadcast message
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/broadcast_messages.rb#24
  def broadcast_message(id); end

  # Get all broadcast messages
  #
  # @example
  #   Gitlab.broadcast_messages
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/broadcast_messages.rb#13
  def broadcast_messages; end

  # Create a broadcast message.
  #
  # @example
  #   Gitlab.create_broadcast_message('Mayday')
  #   Gitlab.create_broadcast_message('Mayday', {starts_at: Time.zone.now, ends_at: Time.zone.now + 30.minutes, color: '#cecece', font: '#FFFFFF'})
  # @option options
  # @option options
  # @option options
  # @option options
  # @param message [String] Message to display
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created broadcast message.
  #
  # source://gitlab//lib/gitlab/client/broadcast_messages.rb#41
  def create_broadcast_message(message, options = T.unsafe(nil)); end

  # Delete a broadcast message.
  #
  # @example
  #   Gitlab.delete_broadcast_message(3)
  # @param id [Integer] The ID of a broadcast message.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/broadcast_messages.rb#71
  def delete_broadcast_message(id); end

  # Update a broadcast message
  #
  # @example
  #   Gitlab.edit_broadcast_message(6, { message: 'No Mayday' })
  #   Gitlab.edit_broadcast_message(6, { font: '#FEFEFE' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer] The ID of a broadcast message
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated broadcast message.
  #
  # source://gitlab//lib/gitlab/client/broadcast_messages.rb#60
  def edit_broadcast_message(id, options = T.unsafe(nil)); end
end

# Defines methods related to builds.
#
# @see https://docs.gitlab.com/ce/api/project_level_variables.html
# @see https://docs.gitlab.com/ce/api/group_level_variables.html
#
# source://gitlab//lib/gitlab/client/build_variables.rb#7
module Gitlab::Client::BuildVariables
  # Create a build variable for a group.
  #
  # @example
  #   Gitlab.create_group_variable(5, "NEW_VARIABLE", "new value")
  # @param group [Integer, String] The ID or name of a group.
  # @param key [String] The key of a variable; must have no more than 255 characters; only `A-Z`, `a-z`, `0-9` and `_` are allowed
  # @param value [String] The value of a variable
  # @param opts [Hash] optional parameters
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#105
  def create_group_variable(group, key, value, **opts); end

  # Create a build variable for a project.
  #
  # @example
  #   Gitlab.create_variable(5, "NEW_VARIABLE", "new value")
  # @param project [Integer, String] The ID or name of a project.
  # @param key [String] The key of a variable; must have no more than 255 characters; only `A-Z`, `a-z`, `0-9` and `_` are allowed
  # @param value [String] The value of a variable
  # @param opts [Hash] optional parameters
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#41
  def create_variable(project, key, value, **opts); end

  # Gets details of a group's specific build variable.
  #
  # @example
  #   Gitlab.group_variable(5, "TEST_VARIABLE_1")
  # @param group [Integer, String] The ID or name of a group.
  # @param key [String] The key of a variable.
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#91
  def group_variable(group, key); end

  # Gets a list of the group's build variables
  #
  # @example
  #   Gitlab.group_variables(5)
  # @param group [Integer, String] The ID or name of a group.
  # @return [Array<Gitlab::ObjectifiedHash>] The list of variables.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#79
  def group_variables(group); end

  # Remove a group's build variable.
  #
  # @example
  #   Gitlab.remove_group_variable(5, "VARIABLE_1")
  # @param group [Integer, String] The ID or name of a group.
  # @param key [String] The key of a variable.
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#131
  def remove_group_variable(group, key); end

  # Remove a project's build variable.
  #
  # @example
  #   Gitlab.remove_variable(5, "VARIABLE_1")
  # @param project [Integer, String] The ID or name of a project.
  # @param key [String] The key of a variable.
  # @param opts [Hash] optional parameters
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#68
  def remove_variable(project, key, **opts); end

  # Update a group's build variable.
  #
  # @example
  #   Gitlab.update_group_variable(5, "NEW_VARIABLE", "updated value")
  # @param group [Integer, String] The ID or name of a group.
  # @param key [String] The key of a variable
  # @param value [String] The value of a variable
  # @param opts [Hash] optional parameters
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#119
  def update_group_variable(group, key, value, **opts); end

  # Update a project's build variable.
  #
  # @example
  #   Gitlab.update_variable(5, "NEW_VARIABLE", "updated value")
  # @param project [Integer, String] The ID or name of a project.
  # @param key [String] The key of a variable
  # @param value [String] The value of a variable
  # @param opts [Hash] optional parameters
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#55
  def update_variable(project, key, value, **opts); end

  # Gets details of a project's specific build variable.
  #
  # @example
  #   Gitlab.variable(5, "TEST_VARIABLE_1")
  # @param project [Integer, String] The ID or name of a project.
  # @param key [String] The key of a variable.
  # @return [Gitlab::ObjectifiedHash] The variable.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#27
  def variable(project, key); end

  # Gets a list of the project's build variables
  #
  # @example
  #   Gitlab.variables(5)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>] The list of variables.
  #
  # source://gitlab//lib/gitlab/client/build_variables.rb#15
  def variables(project); end
end

# Defines methods related to builds.
#
# @see https://docs.gitlab.com/ce/api/builds.html
#
# source://gitlab//lib/gitlab/client/builds.rb#6
module Gitlab::Client::Builds
  # Gets a single build.
  #
  # @example
  #   Gitlab.build(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a build.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/builds.rb#31
  def build(project, id); end

  # Gets build artifacts.
  #
  # @example
  #   Gitlab.build_artifacts(1, 8)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a build.
  # @return [Gitlab::FileResponse]
  #
  # source://gitlab//lib/gitlab/client/builds.rb#43
  def build_artifacts(project, id); end

  # Cancels a build.
  #
  # @example
  #   Gitlab.build_cancel(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a build.
  # @return [Gitlab::ObjectifiedHash] The builds changes.
  #
  # source://gitlab//lib/gitlab/client/builds.rb#80
  def build_cancel(project, id); end

  # Erase a single build of a project (remove build artifacts and a build trace)
  #
  # @example
  #   Gitlab.build_erase(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a build.
  # @return [Gitlab::ObjectifiedHash] The build's changes.
  #
  # source://gitlab//lib/gitlab/client/builds.rb#104
  def build_erase(project, id); end

  # Retry a build.
  #
  # @example
  #   Gitlab.build_retry(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a build.
  # @return [Array<Gitlab::ObjectifiedHash>] The builds changes.
  #
  # source://gitlab//lib/gitlab/client/builds.rb#92
  def build_retry(project, id); end

  # Gets a list of project builds.
  #
  # @example
  #   Gitlab.builds(5)
  #   Gitlab.builds(5, { per_page: 10, page:  2 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/builds.rb#19
  def builds(project, options = T.unsafe(nil)); end

  # Gets a list of builds for specific commit in a project.
  #
  # @example
  #   Gitlab.commit_builds(5, 'asdf')
  #   Gitlab.commit_builds(5, 'asdf', { per_page: 10, page: 2 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The SHA checksum of a commit.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] The list of builds.
  #
  # source://gitlab//lib/gitlab/client/builds.rb#68
  def commit_builds(project, sha, options = T.unsafe(nil)); end
end

# Defines methods related to repository commits.
#
# @see https://docs.gitlab.com/ce/api/commits.html
#
# source://gitlab//lib/gitlab/client/commits.rb#6
module Gitlab::Client::Commits
  # Cherry picks a commit to a given branch.
  #
  # @example
  #   Gitlab.cherry_pick_commit(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'master')
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag
  # @param branch [String] The name of the branch
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#65
  def cherry_pick_commit(project, sha, branch, options = T.unsafe(nil)); end

  # Gets a specific commit identified by the commit hash or name of a branch or tag.
  #
  # @example
  #   Gitlab.commit(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6')
  #   Gitlab.repo_commit(3, 'ed899a2f4b50b4370feeea94676502b42383c746')
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#33
  def commit(project, sha); end

  # Gets a list of comments for a commit.
  #
  # @example
  #   Gitlab.commit_comments(5, 'c9f9662a9b1116c838b523ed64c6abdb4aae4b8b')
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#112
  def commit_comments(project, commit, options = T.unsafe(nil)); end

  # Get the diff of a commit in a project.
  #
  # @example
  #   Gitlab.commit_diff(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6')
  #   Gitlab.repo_commit_diff(3, 'ed899a2f4b50b4370feeea94676502b42383c746')
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The name of a repository branch or tag or if not given the default branch.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#97
  def commit_diff(project, sha); end

  # Gets a list of merge requests for a commit.
  #
  # Introduced in Gitlab 10.7
  #
  # @example
  #   Gitlab.commit_merge_requests(5, 'c9f9662a9b1116c838b523ed64c6abdb4aae4b8b')
  # @option options
  # @option options
  # @param sha [String] The commit hash.
  # @param project [Integer] The ID of a project.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/commits.html#list-merge-requests-associated-with-a-commit
  #
  # source://gitlab//lib/gitlab/client/commits.rb#211
  def commit_merge_requests(project, commit, options = T.unsafe(nil)); end

  # Get all references (from branches or tags) a commit is pushed to.
  #
  # @example
  #   Gitlab.commit_refs(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6')
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#50
  def commit_refs(project, sha, options = T.unsafe(nil)); end

  # Get the status of a commit
  #
  # @example
  #   Gitlab.commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6')
  #   Gitlab.commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', { name: 'jenkins' })
  #   Gitlab.commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', { name: 'jenkins', all: true })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash
  # @param options [Hash] A customizable set of options.
  #
  # source://gitlab//lib/gitlab/client/commits.rb#149
  def commit_status(project, sha, options = T.unsafe(nil)); end

  # Gets a list of project commits.
  #
  # @example
  #   Gitlab.commits('viking')
  #   Gitlab.repo_commits('gitlab', { ref: 'api' })
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#19
  def commits(project, options = T.unsafe(nil)); end

  # Creates a single commit with one or more changes
  #
  # Introduced in Gitlab 8.13
  #
  # Gitlab.create_commit(2726132, 'master', 'refactors everything', [{action: 'create', file_path: '/foo.txt', content: 'bar'}])
  # Gitlab.create_commit(2726132, 'master', 'refactors everything', [{action: 'delete', file_path: '/foo.txt'}])
  #
  # @option options
  # @option options
  # @param branch [String] the branch name you wish to commit to
  # @param An [Array[Hash]] array of action hashes to commit as a batch. See the next table for what attributes it can take.
  # @param options [Hash] a customizable set of options
  # @param message [String] the commit message
  # @param project [Integer, String] The ID or name of a project.
  # @return [Gitlab::ObjectifiedHash] hash of commit related data
  # @see https://docs.gitlab.com/ce/api/commits.html#create-a-commit-with-multiple-files-and-actions
  #
  # source://gitlab//lib/gitlab/client/commits.rb#189
  def create_commit(project, branch, message, actions, options = T.unsafe(nil)); end

  # Creates a new comment for a commit.
  #
  # @example
  #   Gitlab.create_commit_comment(5, 'c9f9662a9b1116c838b523ed64c6abdb4aae4b8b', 'Nice work on this commit!')
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag.
  # @param note [String] The text of a comment.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created comment.
  #
  # source://gitlab//lib/gitlab/client/commits.rb#130
  def create_commit_comment(project, commit, note, options = T.unsafe(nil)); end

  # Gets a specific commit identified by the commit hash or name of a branch or tag.
  #
  # @example
  #   Gitlab.commit(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6')
  #   Gitlab.repo_commit(3, 'ed899a2f4b50b4370feeea94676502b42383c746')
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#33
  def repo_commit(project, sha); end

  # Gets a list of comments for a commit.
  #
  # @example
  #   Gitlab.commit_comments(5, 'c9f9662a9b1116c838b523ed64c6abdb4aae4b8b')
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#112
  def repo_commit_comments(project, commit, options = T.unsafe(nil)); end

  # Get the diff of a commit in a project.
  #
  # @example
  #   Gitlab.commit_diff(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6')
  #   Gitlab.repo_commit_diff(3, 'ed899a2f4b50b4370feeea94676502b42383c746')
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The name of a repository branch or tag or if not given the default branch.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#97
  def repo_commit_diff(project, sha); end

  # Gets a list of merge requests for a commit.
  #
  # Introduced in Gitlab 10.7
  #
  # @example
  #   Gitlab.commit_merge_requests(5, 'c9f9662a9b1116c838b523ed64c6abdb4aae4b8b')
  # @option options
  # @option options
  # @param sha [String] The commit hash.
  # @param project [Integer] The ID of a project.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/commits.html#list-merge-requests-associated-with-a-commit
  #
  # source://gitlab//lib/gitlab/client/commits.rb#211
  def repo_commit_merge_requests(project, commit, options = T.unsafe(nil)); end

  # Get the status of a commit
  #
  # @example
  #   Gitlab.commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6')
  #   Gitlab.commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', { name: 'jenkins' })
  #   Gitlab.commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', { name: 'jenkins', all: true })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash
  # @param options [Hash] A customizable set of options.
  #
  # source://gitlab//lib/gitlab/client/commits.rb#149
  def repo_commit_status(project, sha, options = T.unsafe(nil)); end

  # Gets a list of project commits.
  #
  # @example
  #   Gitlab.commits('viking')
  #   Gitlab.repo_commits('gitlab', { ref: 'api' })
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#19
  def repo_commits(project, options = T.unsafe(nil)); end

  # Creates a new comment for a commit.
  #
  # @example
  #   Gitlab.create_commit_comment(5, 'c9f9662a9b1116c838b523ed64c6abdb4aae4b8b', 'Nice work on this commit!')
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag.
  # @param note [String] The text of a comment.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created comment.
  #
  # source://gitlab//lib/gitlab/client/commits.rb#130
  def repo_create_commit_comment(project, commit, note, options = T.unsafe(nil)); end

  # Adds or updates a status of a commit.
  #
  # @example
  #   Gitlab.update_commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'success')
  #   Gitlab.update_commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'failed', { name: 'jenkins' })
  #   Gitlab.update_commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'canceled', { name: 'jenkins', target_url: 'http://example.com/builds/1' })
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash
  # @param state [String] of the status. Can be: pending, running, success, failed, canceled
  #
  # source://gitlab//lib/gitlab/client/commits.rb#168
  def repo_update_commit_status(project, sha, state, options = T.unsafe(nil)); end

  # Reverts a commit in a given branch.
  #
  # @example
  #   Gitlab.revert_commit(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'master')
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash or name of a repository branch or tag
  # @param branch [String] The name of the branch
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/commits.rb#82
  def revert_commit(project, sha, branch, options = T.unsafe(nil)); end

  # Adds or updates a status of a commit.
  #
  # @example
  #   Gitlab.update_commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'success')
  #   Gitlab.update_commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'failed', { name: 'jenkins' })
  #   Gitlab.update_commit_status(42, '6104942438c14ec7bd21c6cd5bd995272b3faff6', 'canceled', { name: 'jenkins', target_url: 'http://example.com/builds/1' })
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @param project [Integer, String] The ID or name of a project.
  # @param sha [String] The commit hash
  # @param state [String] of the status. Can be: pending, running, success, failed, canceled
  #
  # source://gitlab//lib/gitlab/client/commits.rb#168
  def update_commit_status(project, sha, state, options = T.unsafe(nil)); end
end

# Defines methods related to GitLab Container Registry.
#
# @see https://docs.gitlab.com/ce/api/container_registry.html
#
# source://gitlab//lib/gitlab/client/container_registry.rb#6
module Gitlab::Client::ContainerRegistry
  # Delete repository tags in bulk based on given criteria.
  #
  # @example
  #   Gitlab.bulk_delete_registry_repository_tags(5, 2, name_regex: '.*')
  #   Gitlab.bulk_delete_registry_repository_tags(5, 2, name_regex: '[0-9a-z]{40}', keep_n: 5, older_than: '1d')
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param repository_id [Integer] The ID of registry repository.
  # @param options [Hash] A customizable set of options.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/container_registry.rb#81
  def bulk_delete_registry_repository_tags(project, repository_id, options = T.unsafe(nil)); end

  # Delete a repository in registry.
  #
  # @example
  #   Gitlab.delete_registry_repository(5, 2)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of registry repository.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/container_registry.rb#26
  def delete_registry_repository(project, id); end

  # Delete a registry repository tag.
  #
  # @example
  #   Gitlab.delete_registry_repository_tag(5, 2, 'v10.0.0')
  # @param project [Integer, String] The ID or name of a project.
  # @param repository_id [Integer] The ID of registry repository.
  # @param tag_name [String] The name of tag.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/container_registry.rb#64
  def delete_registry_repository_tag(project, repository_id, tag_name); end

  # Get a list of registry repositories in a project.
  #
  # @example
  #   Gitlab.registry_repositories(5)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>] Returns list of registry repositories in a project.
  #
  # source://gitlab//lib/gitlab/client/container_registry.rb#14
  def registry_repositories(project); end

  # Get details of a registry repository tag.
  #
  # @example
  #   Gitlab.registry_repository_tag(5, 2, 'v10.0.0')
  # @param project [Integer, String] The ID or name of a project.
  # @param repository_id [Integer] The ID of registry repository.
  # @param tag_name [String] The name of tag.
  # @return [Gitlab::ObjectifiedHash] Returns details about the registry repository tag
  #
  # source://gitlab//lib/gitlab/client/container_registry.rb#51
  def registry_repository_tag(project, repository_id, tag_name); end

  # Get a list of tags for given registry repository.
  #
  # @example
  #   Gitlab.registry_repository_tags(5, 2)
  # @param project [Integer, String] The ID or name of a project.
  # @param repository_id [Integer] The ID of registry repository.
  # @return [Array<Gitlab::ObjectifiedHash>] Returns list of tags of a registry repository.
  #
  # source://gitlab//lib/gitlab/client/container_registry.rb#38
  def registry_repository_tags(project, repository_id); end
end

# Defines methods related to deployments.
#
# @see https://docs.gitlab.com/ce/api/deployments.html
#
# source://gitlab//lib/gitlab/client/deployments.rb#6
module Gitlab::Client::Deployments
  # Gets a single deployment.
  #
  # @example
  #   Gitlab.deployment(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an deployment.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/deployments.rb#30
  def deployment(project, id); end

  # Gets a list of project deployments.
  #
  # @example
  #   Gitlab.deployments(5)
  #   Gitlab.deployments(5, { per_page: 10, page:  2 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/deployments.rb#18
  def deployments(project, options = T.unsafe(nil)); end
end

# Defines methods related to environments.
#
# @see https://docs.gitlab.com/ce/api/environments.html
#
# source://gitlab//lib/gitlab/client/environments.rb#6
module Gitlab::Client::Environments
  # Create an environment.
  #
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param env_name [String] Name for the environment
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] The updated environment.
  #
  # source://gitlab//lib/gitlab/client/environments.rb#44
  def create_environment(project, env_name, options = T.unsafe(nil)); end

  # Deletes an environment.
  #
  # @example
  #   Gitlab.delete_environment(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an environment.
  # @return [Gitlab::ObjectifiedHash] Information about the deleted environment.
  #
  # source://gitlab//lib/gitlab/client/environments.rb#73
  def delete_environment(project, id); end

  # Update an environment.
  #
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an environment.
  # @param options [Hash] A hash of the attribute keys & values to update.
  # @return [Gitlab::ObjectifiedHash] The updated environment.
  #
  # source://gitlab//lib/gitlab/client/environments.rb#61
  def edit_environment(project, id, options = T.unsafe(nil)); end

  # Gets a single environment.
  #
  # @example
  #   Gitlab.environment(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an environment.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/environments.rb#30
  def environment(project, id); end

  # Gets a list of project environments.
  #
  # @example
  #   Gitlab.environments(5)
  #   Gitlab.environments(5, { per_page: 10, page:  2 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/environments.rb#18
  def environments(project, options = T.unsafe(nil)); end

  # Stop an environment.
  #
  # @example
  #   Gitlab.stop_environment(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an environment.
  # @return [Array<Gitlab::ObjectifiedHash>] The stopped environment.
  #
  # source://gitlab//lib/gitlab/client/environments.rb#85
  def stop_environment(project, id); end
end

# Defines methods related to issues.
#
# @see https://docs.gitlab.com/ee/api/epic_issues.html
#
# source://gitlab//lib/gitlab/client/epic_issues.rb#6
module Gitlab::Client::EpicIssues
  # List issues for an epic.
  # Gets all issues that are assigned to an epic and the authenticated user has access to..
  #
  # @example
  #   Gitlab.epic_issues(5, 7)
  #   Gitlab.epic_issues(5, 7, { per_page: 40 })
  # @option options
  # @option options
  # @param group [Integer, String] The ID or name of a group.
  # @param epic [Integer] The iid of an epic.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/epic_issues.rb#19
  def epic_issues(group, epic, options = T.unsafe(nil)); end
end

# Defines methods related to Epics.
#
# @see https://docs.gitlab.com/ee/api/epics.html
#
# source://gitlab//lib/gitlab/client/epics.rb#6
module Gitlab::Client::Epics
  # Creates a new epic.
  #
  # @example
  #   Gitlab.create_epic(123, "My new epic title")
  # @param group_id [Integer] The ID of a group.
  # @param title [String]
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created epic.
  #
  # source://gitlab//lib/gitlab/client/epics.rb#44
  def create_epic(group_id, title, options = T.unsafe(nil)); end

  # Deletes an epic.
  #
  # @example
  #   Gitlab.delete_epic(42, 123)
  # @param group_id [Integer] The ID of a group.
  # @param epic_iid [Integer] The IID of an epic.
  #
  # source://gitlab//lib/gitlab/client/epics.rb#55
  def delete_epic(group_id, epic_iid); end

  # Updates an existing epic.
  #
  # @example
  #   Gitlab.edit_epic(42)
  #   Gitlab.edit_epic(42, 123, { title: 'New epic title' })
  # @param group_id [Integer] The ID.
  # @param epic_iid [Integer] The IID of an epic.
  # @param options [Hash] A customizable set of options
  # @return [Gitlab::ObjectifiedHash] Information about the edited epic.
  #
  # source://gitlab//lib/gitlab/client/epics.rb#69
  def edit_epic(group_id, epic_iid, options = T.unsafe(nil)); end

  # Gets a single epic.
  #
  # @example
  #   Gitlab.epic(123, 1)
  # @param group_id [Integer] The ID of a group.
  # @param epic_iid [Integer] The ID of a epic.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/epics.rb#31
  def epic(group_id, epic_iid, options = T.unsafe(nil)); end

  # Gets a list of epics.
  #
  # @example
  #   Gitlab.epics(123)
  #   Gitlab.epics(123, { per_page: 40, page: 2 })
  # @option options
  # @option options
  # @param group_id [Integer] The ID of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/epics.rb#18
  def epics(group_id, options = T.unsafe(nil)); end
end

# Defines methods related to events.
#
# @see https://docs.gitlab.com/ce/api/events.html
#
# source://gitlab//lib/gitlab/client/events.rb#6
module Gitlab::Client::Events
  # Gets a list of authenticated user's events
  #
  # @example
  #   Gitlab.events()
  #   Gitlab.events({ action: 'created', target_type: 'issue' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/events.rb#20
  def events(options = T.unsafe(nil)); end

  # Gets a list of visible project events
  #
  # @example
  #   Gitlab.project_events(1)
  #   Gitlab.project_events(1, { action: created })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer] The ID of project
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/events.rb#56
  def project_events(project, options = T.unsafe(nil)); end

  # Gets a list of user contribution events
  #
  # @example
  #   Gitlab.user_events(1)
  #   Gitlab.user_events(1, { action: created})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param user [Integer, String] The ID or username of user
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/events.rb#38
  def user_events(user, options = T.unsafe(nil)); end
end

# Defines methods related to feature flags.
# https://docs.gitlab.com/ce/api/features.html
#
# source://gitlab//lib/gitlab/client/features.rb#6
module Gitlab::Client::Features
  # Delete a feature.
  #
  # @example
  #   Gitlab.delete_feature('new_library')
  # @param name [String] Name of the feature to delete
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/features.rb#44
  def delete_feature(name); end

  # Get a list of all persisted features, with its gate values.
  #
  # @example
  #   Gitlab.features
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/features.rb#13
  def features; end

  # Set a features gate value.
  # If a feature with the given name does not exist yet it will be created. The value can be a boolean, or an integer to indicate percentage of time.
  #
  # @example
  #   Gitlab.set_feature('new_library', true)
  #   Gitlab.set_feature('new_library', 8)
  #   Gitlab.set_feature('new_library', true, {user: 'gitlab'})
  # @option options
  # @option options
  # @option options
  # @param name(required) [String] Name of the feature to create or update
  # @param value(required) [String, Integer] true or false to enable/disable, or an integer for percentage of time
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the set/created/updated feature.
  #
  # source://gitlab//lib/gitlab/client/features.rb#32
  def set_feature(name, value, options = T.unsafe(nil)); end
end

# Defines methods related to group badges.
#
# @see https://docs.gitlab.com/ee/api/group_badges.html
#
# source://gitlab//lib/gitlab/client/group_badges.rb#6
module Gitlab::Client::GroupBadges
  # Adds a badge to a group.
  #
  # @example
  #   Gitlab.add_group_badge(5, { link_url: 'https://abc.com/gitlab/gitlab-ce/commits/master', image_url: 'https://shields.io/my/badge1' })
  # @option options
  # @option options
  # @param group(required) [Integer, String] The ID or URL-encoded path of the group owned by the authenticated user.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the added group badge.
  #
  # source://gitlab//lib/gitlab/client/group_badges.rb#43
  def add_group_badge(group, options = T.unsafe(nil)); end

  # Updates a badge of a group.
  #
  # @example
  #   Gitlab.edit_group_badge(5, 1, { link_url: 'https://abc.com/gitlab/gitlab-ce/commits/master', image_url: 'https://shields.io/my/badge1' })
  # @option options
  # @option options
  # @param group(required) [Integer, String] The ID or URL-encoded path of the group owned by the authenticated user.
  # @param badge_id(required) [Integer] The badge ID.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the updated group badge.
  #
  # source://gitlab//lib/gitlab/client/group_badges.rb#58
  def edit_group_badge(group, badge_id, options = T.unsafe(nil)); end

  # Gets a badge of a group.
  #
  # @example
  #   Gitlab.group_badge(5, 42)
  # @param group(required) [Integer, String] The ID or URL-encoded path of the group owned by the authenticated user.
  # @param badge_id(required) [Integer] The badge ID.
  # @return [Gitlab::ObjectifiedHash] Information about the requested badge
  #
  # source://gitlab//lib/gitlab/client/group_badges.rb#29
  def group_badge(group, badge_id); end

  # Gets a list of a groups badges.
  #
  # @example
  #   Gitlab.group_badges(5)
  #   Gitlab.group_badges(5, 'Coverage')
  # @param group(required) [Integer, String] The ID or URL-encoded path of the group owned by the authenticated user.
  # @param name(optional) [String] Name of the badges to return (case-sensitive).
  # @return [Array<Gitlab::ObjectifiedHash>] List of all badges of a group
  #
  # source://gitlab//lib/gitlab/client/group_badges.rb#16
  def group_badges(group, name = T.unsafe(nil)); end

  # Preview a badge from a group.
  #
  # @example
  #   Gitlab.preview_group_badge(3, 'https://abc.com/gitlab/gitlab-ce/commits/master', 'https://shields.io/my/badge1')
  # @param group(required) [Integer, String] The ID or URL-encoded path of the group owned by the authenticated user.
  # @param :link_url(required) [String] URL of the badge link
  # @param :image_url(required) [String] URL of the badge image
  # @return [Gitlab::ObjectifiedHash] Returns how the link_url and image_url final URLs would be after resolving the placeholder interpolation.
  #
  # source://gitlab//lib/gitlab/client/group_badges.rb#83
  def preview_group_badge(group, link_url, image_url); end

  # Removes a badge from a group.
  #
  # @example
  #   Gitlab.remove_group_badge(5, 42)
  # @param group(required) [Integer, String] The ID or URL-encoded path of the group owned by the authenticated user.
  # @param badge_id(required) [Integer] The badge ID.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/group_badges.rb#70
  def remove_group_badge(group, badge_id); end
end

# Defines methods related to group issue boards.
#
# @see https://docs.gitlab.com/ee/api/group_boards.html
#
# source://gitlab//lib/gitlab/client/group_boards.rb#6
module Gitlab::Client::GroupBoards
  # Creates a new group issue board.
  #
  # @example
  #   Gitlab.create_group_board(5, 'Documentcloud')
  # @param group [Integer, String] The ID or name of a group.
  # @param name [String] The name of the new board.
  # @return [Gitlab::ObjectifiedHash] Information about created group issue board.
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#38
  def create_group_board(group, name); end

  # Creates a new group issue board list.
  #
  # @example
  #   Gitlab.create_group_board_list(5, 1)
  # @param group [Integer, String] The ID or name of a group.
  # @param board_id [Integer] The ID of the group issue board.
  # @param label_id [Integer] The ID of a label.
  # @return [Gitlab::ObjectifiedHash] Information about created group issue board list.
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#108
  def create_group_board_list(group, board_id, label_id); end

  # Deletes a group issue board.
  #
  # @example
  #   Gitlab.delete_group_board(5, 1)
  # @param group [Integer, String] The ID or name of a group.
  # @param id [Integer] The ID of the issue board.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#70
  def delete_group_board(group, id); end

  # Deletes a group issue board list.
  #
  # @example
  #   Gitlab.delete_group_board_list(5, 1, 1)
  # @param group [Integer, String] The ID or name of a group.
  # @param board_id [Integer] The ID of the group issue board.
  # @param list_id [Integer] The ID of a boards list.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#137
  def delete_group_board_list(group, board_id, id); end

  # Updates a group issue board.
  #
  # @example
  #   Gitlab.edit_group_board(5, 1, { name: 'DocumentCloud2' })
  #   Gitlab.edit_group_board(5, 1, { name: 'DocumentCloud2', assignee_id: 3 })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param group [Integer, String] The ID or name of a group.
  # @param id [Integer] The ID of the issue board.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated group issue board.
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#58
  def edit_group_board(group, id, options = T.unsafe(nil)); end

  # Updates an existing group issue board list. This call is used to change list position.
  #
  # @example
  #   Gitlab.edit_group_board_list(5, 1, 1, { position: 1 })
  # @option options
  # @param group [Integer, String] The ID or name of a group.
  # @param board_id [Integer] The ID of the group issue board.
  # @param list_id [Integer] The ID of a boards list.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated group issue board list.
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#124
  def edit_group_board_list(group, board_id, id, options = T.unsafe(nil)); end

  # Gets a single group issue board.
  #
  # @example
  #   Gitlab.group_board(5, 1)
  # @param group [Integer, String] The ID or name of a group.
  # @param id [Integer] The ID of the issue board.
  # @return [Gitlab::ObjectifiedHash] Returns information about a group issue board
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#26
  def group_board(group, id); end

  # Get a single group issue board list.
  #
  # @example
  #   Gitlab.group_board_list(5, 1, 1)
  # @param group [Integer, String] The ID or name of a group.
  # @param board_id [Integer] The ID of the group issue board.
  # @param list_id [Integer] The ID of a boards list.
  # @return [Gitlab::ObjectifiedHash] Returns information about a single group issue board list
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#95
  def group_board_list(group, board_id, id); end

  # Get a list of the boards lists. Does not include open and closed lists
  #
  # @example
  #   Gitlab.group_board_lists(5, 1)
  # @param group [Integer, String] The ID or name of a group.
  # @param board_id [Integer] The ID of the group issue board.
  # @return [Array<Gitlab::ObjectifiedHash>] List of boards lists of the group
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#82
  def group_board_lists(group, board_id); end

  # Lists Issue Boards in the given group.
  #
  # @example
  #   Gitlab.group_boards(5)
  # @param group [Integer, String] The ID or name of a group.
  # @return [Array<Gitlab::ObjectifiedHash>] List of issue boards of the group
  #
  # source://gitlab//lib/gitlab/client/group_boards.rb#14
  def group_boards(group); end
end

# Defines methods related to group labels.
#
# @note Requires GitLab 11.8+
# @see https://docs.gitlab.com/ee/api/group_labels.html
#
# source://gitlab//lib/gitlab/client/group_labels.rb#8
module Gitlab::Client::GroupLabels
  # Creates a new group label.
  #
  # @example
  #   Gitlab.create_group_label('globex', 'Backlog', '#DD10AA')
  # @option options
  # @param group [Integer, String] The ID or name of a group.
  # @param name [String] The name of a label.
  # @param color [String] The color of a label.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created label.
  #
  # source://gitlab//lib/gitlab/client/group_labels.rb#31
  def create_group_label(group, name, color, options = T.unsafe(nil)); end

  # Deletes a group label.
  #
  # @example
  #   Gitlab.delete_group_label('globex', 'Backlog')
  # @param group [Integer, String] The ID or name of a group.
  # @param name [String] The name of a label.
  # @return [Gitlab::ObjectifiedHash] Information about deleted label.
  #
  # source://gitlab//lib/gitlab/client/group_labels.rb#60
  def delete_group_label(group, name); end

  # Updates a group label.
  #
  # @example
  #   Gitlab.edit_group_label('globex', 'Backlog', { new_name: 'Priority' })
  #   Gitlab.edit_group_label('globex', 'Backlog', { new_name: 'Priority', color: '#DD10AA' })
  # @option options
  # @option options
  # @option options
  # @param group [Integer, String] The ID or name of a group.
  # @param name [String] The name of a label.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated label.
  #
  # source://gitlab//lib/gitlab/client/group_labels.rb#48
  def edit_group_label(group, name, options = T.unsafe(nil)); end

  # Gets a list of group's labels.
  #
  # @example
  #   Gitlab.group_labels('globex')
  # @param group [Integer, String] The ID or name of a group.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/group_labels.rb#16
  def group_labels(group, options = T.unsafe(nil)); end

  # Subscribes the user to a group label to receive notifications
  #
  # @example
  #   Gitlab.subscribe_to_group_label('globex', 'Backlog')
  # @param group [Integer, String] The ID or name of a group.
  # @param name [String] The name of a label.
  # @return [Gitlab::ObjectifiedHash] Information about the label subscribed to.
  #
  # source://gitlab//lib/gitlab/client/group_labels.rb#72
  def subscribe_to_group_label(group, name); end

  # Unsubscribes the user from a group label to not receive notifications from it
  #
  # @example
  #   Gitlab.unsubscribe_from_group_label('globex', 'Backlog')
  # @param group [Integer, String] The ID or name of a group.
  # @param name [String] The name of a label.
  # @return [Gitlab::ObjectifiedHash] Information about the label unsubscribed from.
  #
  # source://gitlab//lib/gitlab/client/group_labels.rb#84
  def unsubscribe_from_group_label(group, name); end
end

# Defines methods related to group milestones.
#
# @see https://docs.gitlab.com/ee/api/group_milestones.html
#
# source://gitlab//lib/gitlab/client/group_milestones.rb#6
module Gitlab::Client::GroupMilestones
  # Creates a new group milestone.
  #
  # @example
  #   Gitlab.create_group_milestone(5, 'v1.0')
  # @option options
  # @option options
  # @param id [Integer, String] The ID or name of a group.
  # @param title [String] The title of a milestone.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created milestone.
  #
  # source://gitlab//lib/gitlab/client/group_milestones.rb#44
  def create_group_milestone(id, title, options = T.unsafe(nil)); end

  # Updates a group milestone.
  #
  # @example
  #   Gitlab.edit_group_milestone(5, 2, { state_event: 'activate' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer, String] The ID or name of a group.
  # @param milestone_id [Integer] The ID of a milestone.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated milestone.
  #
  # source://gitlab//lib/gitlab/client/group_milestones.rb#62
  def edit_group_milestone(id, milestone_id, options = T.unsafe(nil)); end

  # Gets a single group milestone.
  #
  # @example
  #   Gitlab.group_milestone(5, 36)
  # @param id [Integer, String] The ID or name of a group.
  # @param milestone_id [Integer] The ID of a milestone.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/group_milestones.rb#29
  def group_milestone(id, milestone_id); end

  # Gets the issues of a given group milestone.
  #
  # @example
  #   Gitlab.group_milestone_issues(5, 2)
  # @option options
  # @option options
  # @param id [Integer, String] The ID or name of a group.
  # @param milestone_id [Integer, String] The ID of a milestone.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/group_milestones.rb#76
  def group_milestone_issues(id, milestone_id, options = T.unsafe(nil)); end

  # Gets the merge_requests of a given group milestone.
  #
  # @example
  #   Gitlab.group_milestone_merge_requests(5, 2)
  # @option options
  # @option options
  # @param group [Integer, String] The ID or name of a group.
  # @param milestone_id [Integer, String] The ID of a milestone.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/group_milestones.rb#90
  def group_milestone_merge_requests(id, milestone_id, options = T.unsafe(nil)); end

  # Gets a list of a group's milestones.
  #
  # @example
  #   Gitlab.group_milestones(5)
  # @option options
  # @option options
  # @param id [Integer, String] The ID or name of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/group_milestones.rb#17
  def group_milestones(id, options = T.unsafe(nil)); end
end

# Defines methods related to groups.
#
# @see https://docs.gitlab.com/ce/api/groups.html
#
# source://gitlab//lib/gitlab/client/groups.rb#6
module Gitlab::Client::Groups
  # Creates a new custom_attribute
  #
  # @example
  #   Gitlab.add_custom_attribute('some_new_key', 'some_new_value', 2)
  # @param key [String] The custom_attributes key
  # @param value [String] The custom_attributes value
  # @param group_id [Integer] The ID of a group.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#340
  def add_group_custom_attribute(key, value, group_id); end

  # Add a new group hook
  #
  # @example
  #   Gitlab.add_group_hook(3, "https://example.com/my-hook-receiver", {token: "verify me"})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param group_id [Integer] The ID of a group.
  # @param the [String] hook url which will receive the selected events
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Response body matches https://docs.gitlab.com/ee/api/groups.html#get-group-hook
  #
  # source://gitlab//lib/gitlab/client/groups.rb#406
  def add_group_hook(group_id, url, options = T.unsafe(nil)); end

  # Adds a user to group.
  #
  # @example
  #   Gitlab.add_group_member(1, 2, 40)
  # @param team_id [Integer] The group id to add a member to.
  # @param user_id [Integer] The user id of the user to add to the team.
  # @param access_level [Integer] Project access level.
  # @return [Gitlab::ObjectifiedHash] Information about added team member.
  #
  # source://gitlab//lib/gitlab/client/groups.rb#156
  def add_group_member(team_id, user_id, access_level); end

  # Add LDAP group link
  #
  # @example
  #   Gitlab.add_ldap_group_links(1, 'all', 50, 'ldap')
  # @param id [Integer] The ID of a group
  # @param cn [String] The CN of a LDAP group
  # @param group_access [Integer] Minimum access level for members of the LDAP group.
  # @param provider [String] LDAP provider for the LDAP group
  # @return [Gitlab::ObjectifiedHash] Information about added ldap group link
  #
  # source://gitlab//lib/gitlab/client/groups.rb#292
  def add_ldap_group_links(id, commonname, group_access, provider); end

  # Gets a list of all group members including inherited members.
  #
  # @example
  #   Gitlab.all_group_members(1)
  #   Gitlab.all_group_members(1, { per_page: 40 })
  # @option options
  # @option options
  # @param id [Integer] The ID of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#85
  def all_group_members(id, options = T.unsafe(nil)); end

  # Creates a new group.
  #
  # @example
  #   Gitlab.create_group('new-group', 'group-path')
  #   Gitlab.create_group('gitlab', 'gitlab-path', { description: 'New Gitlab project' })
  # @param name [String] The name of a group.
  # @param path [String] The path of a group.
  # @return [Gitlab::ObjectifiedHash] Information about created group.
  #
  # source://gitlab//lib/gitlab/client/groups.rb#44
  def create_group(name, path, options = T.unsafe(nil)); end

  # Delete's a group.
  #
  # @example
  #   Gitlab.delete_group(42)
  # @param id [Integer] The ID of a group
  # @return [Gitlab::ObjectifiedHash] Information about the deleted group.
  #
  # source://gitlab//lib/gitlab/client/groups.rb#55
  def delete_group(id); end

  # Delete custom_attribute
  # Will delete a custom_attribute
  #
  # @example
  #   Gitlab.delete_group_custom_attribute('somekey', 2)
  # @param key [String] The custom_attribute key to delete
  # @param group_id [Integer] The ID of a group.
  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#354
  def delete_group_custom_attribute(key, group_id = T.unsafe(nil)); end

  # Delete a group hook
  #
  # @example
  #   Gitlab.delete_group_hook(3, 1)
  # @param group_id [Integer] The ID of a group.
  # @param hook_id [Integer] The ID of a group.
  # @return [Gitlab::ObjectifiedHash] no body, will evaluate to an empty hash. https://docs.gitlab.com/ee/api/groups.html#delete-group-hook
  #
  # source://gitlab//lib/gitlab/client/groups.rb#448
  def delete_group_hook(group_id, hook_id); end

  # Delete LDAP group link
  #
  # @example
  #   Gitlab.delete_ldap_group_links(1, 'all')
  # @param id [Integer] The ID of a group
  # @param cn [String] The CN of a LDAP group
  # @return [Gitlab::ObjectifiedHash] Empty hash
  #
  # source://gitlab//lib/gitlab/client/groups.rb#304
  def delete_ldap_group_links(id, commonname, provider); end

  # Updates an existing group.
  #
  # @example
  #   Gitlab.edit_group(42)
  #   Gitlab.edit_group(42, { name: 'Group Name' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param group [Integer] The ID.
  # @param options [Hash] A customizable set of options
  # @return [Gitlab::ObjectifiedHash] Information about the edited group.
  #
  # source://gitlab//lib/gitlab/client/groups.rb#255
  def edit_group(id, options = T.unsafe(nil)); end

  # Edit a group hook
  #
  # @example
  #   Gitlab.edit_group_hook(3, 1, "https://example.com/my-hook-receiver", {token: "verify me"})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param group_id [Integer] The ID of a group.
  # @param hook_id [Integer] The ID of a group.
  # @param the [String] hook url which will receive the selected events
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Response body matches https://docs.gitlab.com/ee/api/groups.html#edit-group-hook
  #
  # source://gitlab//lib/gitlab/client/groups.rb#436
  def edit_group_hook(group_id, hook_id, url, options = T.unsafe(nil)); end

  # Edit a user of a group.
  #
  # @example
  #   Gitlab.edit_group_member(1, 2, 40)
  # @param team_id [Integer] The group id of member to edit.
  # @param user_id [Integer] The user id of the user to edit.
  # @param access_level [Integer] Project access level.
  # @return [Gitlab::ObjectifiedHash] Information about edited team member.
  #
  # source://gitlab//lib/gitlab/client/groups.rb#169
  def edit_group_member(team_id, user_id, access_level); end

  # Gets a single group.
  #
  # @example
  #   Gitlab.group(42)
  # @option options
  # @option options
  # @param id [Integer] The ID of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#31
  def group(id, options = T.unsafe(nil)); end

  # Get a list of group members that are billable.
  #
  # @example
  #   Gitlab.group_billable_members(1)
  #   Gitlab.group_billable_members(1, { per_page: 40 })
  # @option options
  # @option options
  # @param id [Integer] The ID of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#119
  def group_billable_members(id, options = T.unsafe(nil)); end

  # Gets single group custom_attribute.
  #
  # @example
  #   Gitlab.group_custom_attribute('key', 2)
  # @param key [String] The custom_attributes key
  # @param group_id [Integer] The ID of a group.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#327
  def group_custom_attribute(key, group_id); end

  # Gets group custom_attributes.
  #
  # @example
  #   Gitlab.group_custom_attributes(2)
  # @param group_id [Integer] The ID of a group.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#315
  def group_custom_attributes(group_id); end

  # Get a list of descendant groups of a group.
  #
  # @example
  #   Gitlab.group_descendants(42)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer] the ID of a group
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] List of all subgroups under a group
  #
  # source://gitlab//lib/gitlab/client/groups.rb#104
  def group_descendants(id, options = T.unsafe(nil)); end

  # get specified group hook
  #
  # @example
  #   Gitlab.group_hook(3, 1)
  # @param group_id [Integer] The ID of a group.
  # @param hook_id [Integer] The ID of the hook.
  # @return [Gitlab::ObjectifiedHash] The hook https://docs.gitlab.com/ee/api/groups.html#get-group-hook
  #
  # source://gitlab//lib/gitlab/client/groups.rb#377
  def group_hook(group_id, hook_id); end

  # Gets a list of issues of a group.
  #
  # @example
  #   Gitlab.group_issues(5)
  # @param group_id [Integer, String] The ID or name of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#267
  def group_issues(group, options = T.unsafe(nil)); end

  # Get details of a single group member.
  #
  # @example
  #   Gitlab.group_member(1, 10)
  # @param team_id [Integer] The ID of the group to find a member in.
  # @param user_id [Integer] The user id of the member to find.
  # @return [Gitlab::ObjectifiedHash] (id, username, name, email, state, access_level ...)
  #
  # source://gitlab//lib/gitlab/client/groups.rb#131
  def group_member(team_id, user_id); end

  # Get a list of group members.
  #
  # @example
  #   Gitlab.group_members(1)
  #   Gitlab.group_members(1, { per_page: 40 })
  # @option options
  # @option options
  # @param id [Integer] The ID of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#70
  def group_members(id, options = T.unsafe(nil)); end

  # Gets a list of merge requests of a group.
  #
  # @example
  #   Gitlab.group_merge_requests(5)
  # @param group_id [Integer, String] The ID or name of a group.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#143
  def group_merge_requests(group, options = T.unsafe(nil)); end

  # Get a list of projects under a group
  #
  # @example
  #   Gitlab.group_projects(1)
  # @param id [Integer] The ID of a group
  # @return [Array<Gitlab::ObjectifiedHash>] List of projects under a group
  #
  # source://gitlab//lib/gitlab/client/groups.rb#218
  def group_projects(id, options = T.unsafe(nil)); end

  # Search for groups by name
  #
  # @example
  #   Gitlab.group_search('gitlab')
  # @option options
  # @option options
  # @param search [String] A string to search for in group names and paths.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#207
  def group_search(search, options = T.unsafe(nil)); end

  # Get a list of subgroups under a group
  #
  # @example
  #   Gitlab.group_subgroups(1)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer] the ID of a group
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] List of subgroups under a group
  #
  # source://gitlab//lib/gitlab/client/groups.rb#236
  def group_subgroups(id, options = T.unsafe(nil)); end

  # Gets a list of groups.
  #
  # @example
  #   Gitlab.groups
  #   Gitlab.groups({ per_page: 40, page: 2 })
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#17
  def groups(options = T.unsafe(nil)); end

  # List all the specified groups hooks
  #
  # @example
  #   Gitlab.list_group_hooks(3)
  # @param group_id [Integer] The ID of a group.
  # @return [Gitlab::PaginatedResponse] List of registered hooks https://docs.gitlab.com/ee/api/groups.html#hooks
  #
  # source://gitlab//lib/gitlab/client/groups.rb#365
  def list_group_hooks(group_id); end

  # Removes user from user group.
  #
  # @example
  #   Gitlab.remove_group_member(1, 2)
  # @param team_id [Integer] The group ID.
  # @param user_id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash] Information about removed team member.
  #
  # source://gitlab//lib/gitlab/client/groups.rb#181
  def remove_group_member(team_id, user_id); end

  # Sync group with LDAP
  #
  # @example
  #   Gitlab.sync_ldap_group(1)
  # @param id [Integer] The ID or name of a group.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/groups.rb#278
  def sync_ldap_group(id); end

  # Transfers a project to a group
  #
  # @example
  #   Gitlab.transfer_project_to_group(3, 50)
  # @param id [Integer] The ID of a group.
  # @param project_id [Integer] The ID of a project.
  #
  # source://gitlab//lib/gitlab/client/groups.rb#192
  def transfer_project_to_group(id, project_id); end
end

# Defines methods related to issue links.
#
# @see https://docs.gitlab.com/ee/api/issue_links.html
#
# source://gitlab//lib/gitlab/client/issue_links.rb#6
module Gitlab::Client::IssueLinks
  # Creates a new issue link.
  #
  # @example
  #   Gitlab.create_issue_link(6, 1, 6, 2)
  # @param project [Integer, String] The ID or name of a project.
  # @param issue [Integer] The ID of an issue.
  # @param target_project_id [Integer] Project ID the target issue is located in.
  # @param target_issue_iid [Integer] The ID of the target issue.
  # @return [Gitlab::ObjectifiedHash] Information about created link.
  #
  # source://gitlab//lib/gitlab/client/issue_links.rb#31
  def create_issue_link(project, issue, target_project_id, target_issue_iid); end

  # Deletes an issue link.
  #
  # @example
  #   Gitlab.delete_issue_link(5, 10, 123)
  # @param project [Integer] The ID of a project.
  # @param issue [Integer] The ID of an issue.
  # @param id [Integer] The ID of a link.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/issue_links.rb#44
  def delete_issue_link(project, issue, id); end

  # Gets a list of links for a issue.
  #
  # @example
  #   Gitlab.issue_links(5, 10)
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param issue [Integer] The ID of an issue.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/issue_links.rb#17
  def issue_links(project, issue, options = T.unsafe(nil)); end
end

# Defines methods related to issues.
#
# @see https://docs.gitlab.com/ce/api/issues.html
#
# source://gitlab//lib/gitlab/client/issues.rb#6
module Gitlab::Client::Issues
  # Adds spent time for an issue
  #
  # @example
  #   Gitlab.estimate_time_of_issue(3, 42, '3h30m')
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @param duration [String] The time spent in human format. e.g: 3h30m
  #
  # source://gitlab//lib/gitlab/client/issues.rb#183
  def add_time_spent_on_issue(project, id, duration); end

  # Closes an issue.
  #
  # @example
  #   Gitlab.close_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @return [Gitlab::ObjectifiedHash] Information about closed issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#86
  def close_issue(project, id); end

  # Creates a new issue.
  #
  # @example
  #   Gitlab.create_issue(5, 'New issue')
  #   Gitlab.create_issue(5, 'New issue', { description: 'This is a new issue', assignee_id: 42 })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param title [String] The title of an issue.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#54
  def create_issue(project, title, options = T.unsafe(nil)); end

  # Deletes  an issue.
  # Only for admins and project owners
  #
  # @example
  #   Gitlab.delete_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @return [Gitlab::ObjectifiedHash] Information about deleted issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#135
  def delete_issue(project, id); end

  # Updates an issue.
  #
  # @example
  #   Gitlab.edit_issue(6, 1, { title: 'Updated title' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#74
  def edit_issue(project, id, options = T.unsafe(nil)); end

  # Sets an estimated time of work for an issue.
  #
  # @example
  #   Gitlab.estimate_time_of_issue(3, 42, '3h30m')
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @param duration [String] The duration in human format. e.g: 3h30m
  #
  # source://gitlab//lib/gitlab/client/issues.rb#160
  def estimate_time_of_issue(project, id, duration); end

  # Gets a single issue.
  #
  # @example
  #   Gitlab.issue(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/issues.rb#36
  def issue(project, id); end

  # Gets a list of user's issues.
  # Will return a list of project's issues if project ID passed.
  #
  # @example
  #   Gitlab.issues
  #   Gitlab.issues(5)
  #   Gitlab.issues({ per_page: 40 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/issues.rb#20
  def issues(project = T.unsafe(nil), options = T.unsafe(nil)); end

  # List merge requests that will close issue on merge
  #
  # @example
  #   Gitlab.merge_requests_closing_issue_on_merge(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#227
  def merge_requests_closing_issue_on_merge(project, id); end

  # Move an issue.
  #
  # @example
  #   Gitlab.move_issue(3, 42, { to_project_id: '4' })
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Information about moved issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#148
  def move_issue(project, id, options = T.unsafe(nil)); end

  # Get participants on issue
  #
  # @example
  #   @gitlab.participants_on_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#216
  def participants_on_issue(project, id); end

  # List related merge requests
  #
  # @example
  #   Gitlab.related_merge_requests(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#238
  def related_merge_requests(project, id); end

  # Reopens an issue.
  #
  # @example
  #   Gitlab.reopen_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @return [Gitlab::ObjectifiedHash] Information about reopened issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#98
  def reopen_issue(project, id); end

  # Resets the estimated time for an issue to 0 seconds.
  #
  # @example
  #   Gitlab.reset_time_estimate_of_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#171
  def reset_time_estimate_of_issue(project, id); end

  # Resets the total spent time for this issue to 0 seconds.
  #
  # @example
  #   Gitlab.reset_time_spent_on_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#194
  def reset_time_spent_on_issue(project, id); end

  # Subscribe to an issue.
  #
  # @example
  #   Gitlab.subscribe_to_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @return [Gitlab::ObjectifiedHash] Information about subscribed issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#110
  def subscribe_to_issue(project, id); end

  # Get time tracking stats for an issue
  #
  # @example
  #   @gitlab.time_stats_for_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#205
  def time_stats_for_issue(project, id); end

  # Unsubscribe from an issue.
  #
  # @example
  #   Gitlab.unsubscribe_from_issue(3, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of an issue.
  # @return [Gitlab::ObjectifiedHash] Information about unsubscribed issue.
  #
  # source://gitlab//lib/gitlab/client/issues.rb#122
  def unsubscribe_from_issue(project, id); end
end

# Defines methods related to projects.
#
# @see https://docs.gitlab.com/ee/api/jobs.html
#
# source://gitlab//lib/gitlab/client/jobs.rb#6
module Gitlab::Client::Jobs
  # Download a single artifact file from specific tag or branch
  #
  # @example
  #   Gitlab.download_branch_artifact_file(1, "master", "some/release/file.pdf", 'pdf')
  # @param project_id(required) [Integer, String] The ID or name of a project.
  # @param ref_name(required) [String] Branch or tag name in repository. HEAD or SHA references are not supported.
  # @param artifact_path(required) [String] Path to a file inside the artifacts archive.
  # @param job(required) [String] The name of the job.
  # @return [Gitlab::FileResponse]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#138
  def download_branch_artifact_file(project_id, ref_name, artifact_path, job); end

  # Download a single artifact file by job ID
  #
  # @example
  #   Gitlab.download_job_artifact_file(1, 5, "some/release/file.pdf")
  # @param project_id(required) [Integer, String] The ID or name of a project.
  # @param job_id(required) [String] The unique job identifier.
  # @param artifact_path(required) [String] Path to a file inside the artifacts archive.
  # @return [Gitlab::FileResponse]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#115
  def download_job_artifact_file(project_id, job_id, artifact_path); end

  # Download a single artifact file from specific tag or branch
  #
  # @example
  #   Gitlab.download_branch_artifact_file(1, "master", "some/release/file.pdf", 'pdf')
  # @param project_id(required) [Integer, String] The ID or name of a project.
  # @param ref_name(required) [String] Branch or tag name in repository. HEAD or SHA references are not supported.
  # @param artifact_path(required) [String] Path to a file inside the artifacts archive.
  # @param job(required) [String] The name of the job.
  # @return [Gitlab::FileResponse]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#138
  def download_tag_artifact_file(project_id, ref_name, artifact_path, job); end

  # Gets a single job
  #
  # @example
  #   Gitlab.job(1, 2)
  #   Gitlab.job("project", 2)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#62
  def job(project_id, job_id); end

  # Gets artifacts from a job
  #
  # @example
  #   Gitlab.job_artifacts(1, 2)
  #   Gitlab.job_artifacts("project", 2)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#75
  def job_artifacts(project_id, job_id); end

  # Delete Artifacts
  # Deletes the artifacts associated with a job.
  #
  # @example
  #   Gitlab.job_artifacts_delete(1,1)
  #   Gitlab.job_artifacts_delete("project", 1)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#246
  def job_artifacts_delete(project_id, job_id); end

  # Download Job Artifact
  #
  # @example
  #   Gitlab.job_artifacts_download(1, "master", "release")
  #   Gitlab.job_artifacts_download("project", "master", "release")
  # @param project_id [Integer, String] The ID or name of a project.
  # @param ref [String] Ref Name
  # @param job [String] jobname
  # @return [Gitlab::FileResponse]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#92
  def job_artifacts_download(project_id, ref_name, job_name); end

  # Keep Artifacts
  # Prevents artifacts from being deleted when expiration is set.
  #
  # @example
  #   Gitlab.job_artifacts_keep(1,1)
  #   Gitlab.job_artifacts_keep("project", 1)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#232
  def job_artifacts_keep(project_id, job_id); end

  # Cancel a job
  #
  # @example
  #   Gitlab.job_cancel(1,1)
  #   Gitlab.job_cancel("project", 1)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#178
  def job_cancel(project_id, job_id); end

  # Erase Job
  #
  # @example
  #   Gitlab.job_erase(1,1)
  #   Gitlab.job_erase("project", 1)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#204
  def job_erase(project_id, job_id); end

  # Play a Job
  # Triggers a manual action to start a job.
  #
  # @example
  #   Gitlab.job_play(1,1)
  #   Gitlab.job_play("project", 1)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#218
  def job_play(project_id, job_id); end

  # Retry a job
  #
  # @example
  #   Gitlab.job_retry(1,1)
  #   Gitlab.job_retry("project", 1)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#191
  def job_retry(project_id, job_id); end

  # Get Job Trace
  #
  # @example
  #   Gitlab.job_trace(1,1)
  #   Gitlab.job_trace("project", 1)
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the job
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#162
  def job_trace(project_id, job_id); end

  # Gets a list of Jobs for a Project
  #
  # @example
  #   Gitlab.jobs(1)
  #   Gitlab.jobs("project")
  #   Gitlab.jobs("project", {scope: ["manual", "success"], per_page: 100 })
  # @option options
  # @option options
  # @option options
  # @param id [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#20
  def jobs(project_id, options = T.unsafe(nil)); end

  # Gets a list of Bridge Jobs from a pipeline
  #
  # @example
  #   Gitlab.pipeline_bridges(1, 2)
  #   Gitlab.pipeline_bridges("project", 2)
  # @option options
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the pipeline
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#50
  def pipeline_bridges(project_id, pipeline_id, options = T.unsafe(nil)); end

  # Gets a list of Jobs from a pipeline
  #
  # @example
  #   Gitlab.pipeline_jobs(1, 2)
  #   Gitlab.pipeline_jobs("project", 2)
  # @option options
  # @param The [Integer, String] ID or name of a project.
  # @param the [Integer] id of the pipeline
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/jobs.rb#35
  def pipeline_jobs(project_id, pipeline_id, options = T.unsafe(nil)); end
end

# Defines methods related to keys.
#
# @see https://docs.gitlab.com/ce/api/keys.html
#
# source://gitlab//lib/gitlab/client/keys.rb#6
module Gitlab::Client::Keys
  # Gets information about a key.
  #
  # @example
  #   Gitlab.key(1)
  # @param id [Integer] The ID of a key.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/keys.rb#14
  def key(id); end

  # Gets information about a key by key fingerprint.
  #
  # @example
  #   Gitlab.key_by_fingerprint("9f:70:33:b3:50:4d:9a:a3:ef:ea:13:9b:87:0f:7f:7e")
  # @param fingerprint [String] The Fingerprint of a key.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/keys.rb#25
  def key_by_fingerprint(fingerprint); end
end

# Defines methods related to project labels.
#
# @see https://docs.gitlab.com/ce/api/labels.html
#
# source://gitlab//lib/gitlab/client/labels.rb#6
module Gitlab::Client::Labels
  # Creates a new label.
  #
  # @example
  #   Gitlab.create_label(42, "Backlog", '#DD10AA')
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @param name [String] The name of a label.
  # @param project [Integer, String] The ID or name of a project.
  # @param color [String] The color of a label.
  # @return [Gitlab::ObjectifiedHash] Information about created label.
  #
  # source://gitlab//lib/gitlab/client/labels.rb#30
  def create_label(project, name, color, options = T.unsafe(nil)); end

  # Deletes a label.
  #
  # @example
  #   Gitlab.delete_label(2, 'Backlog')
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of a label.
  # @return [Gitlab::ObjectifiedHash] Information about deleted label.
  #
  # source://gitlab//lib/gitlab/client/labels.rb#60
  def delete_label(project, name); end

  # Updates a label.
  #
  # @example
  #   Gitlab.edit_label(42, "Backlog", { new_name: 'TODO' })
  #   Gitlab.edit_label(42, "Backlog", { new_name: 'TODO', color: '#DD10AA' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of a label.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated label.
  #
  # source://gitlab//lib/gitlab/client/labels.rb#48
  def edit_label(project, name, options = T.unsafe(nil)); end

  # Gets a list of project's labels.
  #
  # @example
  #   Gitlab.labels(5)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/labels.rb#14
  def labels(project, options = T.unsafe(nil)); end

  # Subscribes the user to a label to receive notifications
  #
  # @example
  #   Gitlab.subscribe_to_label(2, 'Backlog')
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of a label.
  # @return [Gitlab::ObjectifiedHash] Information about the label subscribed to.
  #
  # source://gitlab//lib/gitlab/client/labels.rb#72
  def subscribe_to_label(project, name); end

  # Unsubscribes the user from a label to not receive notifications from it
  #
  # @example
  #   Gitlab.unsubscribe_from_label(2, 'Backlog')
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of a label.
  # @return [Gitlab::ObjectifiedHash] Information about the label unsubscribed from.
  #
  # source://gitlab//lib/gitlab/client/labels.rb#84
  def unsubscribe_from_label(project, name); end
end

# Defines methods related to lint/validations.
#
# @see https://docs.gitlab.com/ce/api/lint.html
#
# source://gitlab//lib/gitlab/client/lint.rb#6
module Gitlab::Client::Lint
  # Checks if your .gitlab-ci.yml file is valid.
  #
  # @example
  #   Gitlab.validate_gitlab_ci_yml("{ \"image\": \"ruby:2.6\", \"services\": [\"postgres\"], \"before_script\": [\"bundle install\", \"bundle exec rake db:create\"], \"variables\": {\"DB_NAME\": \"postgres\"}, \"types\": [\"test\", \"deploy\", \"notify\"], \"rspec\": { \"script\": \"rake spec\", \"tags\": [\"ruby\", \"postgres\"], \"only\": [\"branches\"]}}")
  # @param content [String] the .gitlab-ci.yaml content.
  # @return [Gitlab::ObjectifiedHash] Returns information about validity of the yml.
  #
  # source://gitlab//lib/gitlab/client/lint.rb#14
  def validate_gitlab_ci_yml(content); end
end

# Defines methods related to markdown.
#
# @see https://docs.gitlab.com/ce/api/markdown.html
#
# source://gitlab//lib/gitlab/client/markdown.rb#6
module Gitlab::Client::Markdown
  # Render an arbitrary Markdown document
  #
  # @example
  #   Gitlab.markdown('Hello world! :tada:')
  #   Gitlab.markdown('Hello world! :tada:', gfm: true, project: 'group_example/project_example')
  # @option options
  # @option options
  # @param text [String] The markdown text to render.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Returns the rendered markdown as response
  #
  # source://gitlab//lib/gitlab/client/markdown.rb#18
  def markdown(text, options = T.unsafe(nil)); end
end

# Defines methods related to MR Approvals.
#
# @see https://docs.gitlab.com/ee/api/merge_request_approvals.html
#
# source://gitlab//lib/gitlab/client/merge_request_approvals.rb#6
module Gitlab::Client::MergeRequestApprovals
  # Approve a merge request
  #
  # @example
  #   Gitlab.approve_merge_request(1, 5)
  #   Gitlab.approve_merge_request(1, 5, sha: 'fe678da')
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge request.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] MR approval configuration information about the project
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#236
  def approve_merge_request(project, merge_request, options = T.unsafe(nil)); end

  # Create merge request level rule
  #
  # Important: When approval_project_rule_id is set, the name, users and groups of project-level rule are copied.
  # The approvals_required specified is used.
  #
  # @example
  #   Gitlab.create_merge_request_level_rule(1, 2, {
  #   name: "devs",
  #   approvals_required: 2,
  #   approval_project_rule_id: 99,
  #   user_ids: [3, 4],
  #   group_ids: [5, 6],
  #   })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge request.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] New MR level approval rule
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#168
  def create_merge_request_level_rule(project, merge_request, options = T.unsafe(nil)); end

  # Create MR Approval Rule for a project
  #
  # @example
  #   Gitlab.create_project_merge_request_approval_rule(1, {name: "security", approvals_required: 1})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] New MR approval rule
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#57
  def create_project_merge_request_approval_rule(project, options = T.unsafe(nil)); end

  # Delete merge request level rule
  #
  # Important: Deleting a report_approver or code_owner rule is not allowed.
  # These are system generated rules.
  #
  # @example
  #   Gitlab.delete_merge_request_level_rule(1, 2, 69)
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge request.
  # @param appr_rule_id(required) [Integer] The ID of a approval rule
  # @return [void] This API call returns an empty response body
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#222
  def delete_merge_request_level_rule(project, merge_request, appr_rule_id); end

  # Delete MR Approval Rule for a project
  #
  # @example
  #   Gitlab.delete_project_merge_request_approval_rule(1, 1)
  # @param project(required) [Integer] The ID of a project.
  # @param approval_rule_id(required) [Integer] The ID of a approval rule
  # @return [void] This API call returns an empty response body
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#86
  def delete_project_merge_request_approval_rule(project, approval_rule_id); end

  # Change configuration for approvals on a specific merge request.
  #
  # @example
  #   Gitlab.edit_merge_request_approvals(1, 5, approvals_required: 2)
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge_request.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Updated MR approval configuration information about the merge request
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#126
  def edit_merge_request_approvals(project, merge_request, options = T.unsafe(nil)); end

  # Change allowed approvers and approver groups for a merge request
  # See Gitlab.create_merge_request_level_rule
  #
  # @deprecated Since Gitlab 13.12 /approvers endpoints are removed!!!
  # @example
  #   Gitlab.edit_merge_request_approvers(1, 5, {approver_ids: [5], approver_groups: [1]})
  # @option options
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge_request.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] MR approval configuration information about the project
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#142
  def edit_merge_request_approvers(project, merge_request, options = T.unsafe(nil)); end

  # Change allowed approvers and approver groups for a project
  # See Gitlab.create_project_merge_request_approval_rule
  #
  # @deprecated Since Gitlab 13.12 /approvers endpoints are removed!!!
  # @example
  #   Gitlab.edit_project_approvers(1, {approver_ids: [5], approver_groups: [1]})
  # @option options
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] MR approval configuration information about the project
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#101
  def edit_project_approvers(project, options = T.unsafe(nil)); end

  # Change MR Approval Configuration for a project
  #
  # @example
  #   Gitlab.edit_project_merge_request_approvals(1, {approvals_before_merge: 3})
  #   Gitlab.edit_project_merge_request_approvals(1, {approvals_before_merge: 3, reset_approvals_on_push: true})
  #   Gitlab.edit_project_merge_request_approvals(1, {approvals_before_merge: 3, disable_overriding_approvers_per_merge_request: false})
  # @option options
  # @option options
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] MR approval configuration information about the project
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#30
  def edit_project_merge_request_approvals(project, options = T.unsafe(nil)); end

  # Get the approval state of merge requests
  #
  # @example
  #   Gitlab.merge_request_approval_state(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#261
  def merge_request_approval_state(project, id); end

  # Get Configuration for approvals on a specific Merge Request.
  #
  # @example
  #   Gitlab.merge_request_approvals(1, 5)
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge_request.
  # @return [Gitlab::ObjectifiedHash] MR approval configuration information about the merge request
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#113
  def merge_request_approvals(project, merge_request); end

  # Get merge request level rule
  #
  # @example
  #   Gitlab.merge_request_level_rule(1, 2)
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge request.
  # @return [Gitlab::ObjectifiedHash] New MR level approval rule
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#180
  def merge_request_level_rule(project, merge_request); end

  # Gets MR Approval Rules for a project
  #
  # @example
  #   Gitlab.project_merge_request_approval_rules(1)
  # @param project [Integer] The ID of a project.
  # @return [Gitlab::ObjectifiedHash] MR approval rules for the project
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#41
  def project_merge_request_approval_rules(project); end

  # Gets MR Approval Configuration for a project
  #
  # @example
  #   Gitlab.project_merge_request_approvals(1)
  # @param project [Integer] The ID of a project.
  # @return [Gitlab::ObjectifiedHash] MR approval configuration information about the project
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#14
  def project_merge_request_approvals(project); end

  # Unapprove a merge request
  #
  # @example
  #   Gitlab.unapprove_merge_request(1, 5)
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge request.
  # @param options [Hash] a customizable set of options
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#249
  def unapprove_merge_request(project, merge_request, options = T.unsafe(nil)); end

  # Update merge request level rule
  #
  # Important: Approvers and groups not in the users/groups parameters are removed
  # Important: Updating a report_approver or code_owner rule is not allowed.
  # These are system generated rules.
  #
  # @example
  #   Gitlab.update_merge_request_level_rule(1, 2, 69, {
  #   name: "devs",
  #   approvals_required: 2,
  #   user_ids: [3, 4],
  #   group_ids: [5, 6],
  #   })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param merge_request(required) [Integer] The IID of a merge request.
  # @param appr_rule_id(required) [Integer] The ID of a approval rule
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Updated MR level approval rule
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#206
  def update_merge_request_level_rule(project, merge_request, appr_rule_id, options = T.unsafe(nil)); end

  # Update MR Approval Rule for a project
  #
  # @example
  #   Gitlab.update_project_merge_request_approval_rule(1, {name: "security", approvals_required: 2})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project(required) [Integer] The ID of a project.
  # @param approval_rule_id(required) [Integer] The ID of a project Approval Rule
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Updated MR approval rule
  #
  # source://gitlab//lib/gitlab/client/merge_request_approvals.rb#74
  def update_project_merge_request_approval_rule(project, approval_rule_id, options = T.unsafe(nil)); end
end

# Defines methods related to merge requests.
#
# @see https://docs.gitlab.com/ce/api/merge_requests.html
#
# source://gitlab//lib/gitlab/client/merge_requests.rb#6
module Gitlab::Client::MergeRequests
  # Accepts a merge request.
  #
  # @example
  #   Gitlab.accept_merge_request(5, 42, { merge_commit_message: 'Nice!' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated merge request.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#154
  def accept_merge_request(project, id, options = T.unsafe(nil)); end

  # Creates a merge request.
  #
  # @example
  #   Gitlab.create_merge_request(5, 'New merge request',
  #   { source_branch: 'source_branch', target_branch: 'target_branch' })
  #   Gitlab.create_merge_request(5, 'New merge request',
  #   { source_branch: 'source_branch', target_branch: 'target_branch', assignee_id: 42 })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param title [String] The title of a merge request.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created merge request.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#116
  def create_merge_request(project, title, options = T.unsafe(nil)); end

  # Create new merge request discussion
  #
  # @example
  #   Gitlab.create_merge_request_discussion(5, 1, body: 'discuss')
  #   Gitlab.create_merge_request_discussion('gitlab', 1, body: 'discuss')
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param options [Hash] A customizable set of options.
  #   * :body (String) The content of a discussion
  #   * :created_at (String) Date time string, ISO 8601 formatted, e.g. 2016-03-11T03:45:40Z
  #   * :position (Hash) Position when creating a diff note
  #   * :base_sha (String) Base commit SHA in the source branch
  #   * :start_sha (String) SHA referencing commit in target branch
  #   * :head_sha (String) SHA referencing HEAD of this merge request
  #   * :position_type (String) Type of the position reference', allowed values: 'text' or 'image'
  #   * :new_path (String) File path after change
  #   * :new_line (Integer) Line number after change (for 'text' diff notes)
  #   * :old_path (String) File path before change
  #   * :old_line (Integer) Line number before change (for 'text' diff notes)
  #   * :width (Integer) Width of the image (for 'image' diff notes)
  #   * :height (Integer) Height of the image (for 'image' diff notes)
  #   * :x (Integer) X coordinate (for 'image' diff notes)
  #   * :y (Integer) Y coordinate (for 'image' diff notes)
  # @return [Gitlab::ObjectifiedHash] The created merge request discussion.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#268
  def create_merge_request_discussion(project, merge_request_id, options = T.unsafe(nil)); end

  # Add note to existing merge request discussion
  #
  # @example
  #   Gitlab.create_merge_request_discussion_note(5, 1, 1, note_id: 1, body: 'note')
  #   Gitlab.create_merge_request_discussion_note('gitlab', 1, 1, note_id: 1, body: 'note')
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param discussion_id [Integer] The ID of a discussion.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] The merge request discussion note.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#300
  def create_merge_request_discussion_note(project, merge_request_id, discussion_id, options); end

  # Create a new pipeline for a merge request.
  # A pipeline created via this endpoint doesnt run a regular branch/tag pipeline.
  # It requires .gitlab-ci.yml to be configured with only: [merge_requests] to create jobs.
  #
  # The new pipeline can be:
  #
  # A detached merge request pipeline.
  # A pipeline for merged results if the project setting is enabled.
  #
  # @example
  #   Gitlab.create_merge_request_pipeline(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param iid [Integer] The internal ID of a merge request.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#77
  def create_merge_request_pipeline(project, iid); end

  # Delete a merge request
  #
  # @example
  #   Gitlab.delete_merge_request(5, 1)
  #   Gitlab.delete_merge_request('gitlab', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Gitlab::ObjectifiedHash] An empty response.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#343
  def delete_merge_request(project, merge_request_id); end

  # Delete a merge request discussion note
  #
  # @example
  #   Gitlab.delete_merge_request_discussion_note(5, 1, 1, 1)
  #   Gitlab.delete_merge_request_discussion_note('gitlab', 1, 1, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param discussion_id [Integer] The ID of a discussion.
  # @param note_id [Integer] The ID of a discussion note.
  # @return [Gitlab::ObjectifiedHash] An empty response.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#331
  def delete_merge_request_discussion_note(project, merge_request_id, discussion_id, note_id); end

  # Gets a single merge request.
  #
  # @example
  #   Gitlab.merge_request(5, 36)
  #   Gitlab.merge_request(5, 36, { include_diverged_commits_count: true })
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#46
  def merge_request(project, id, options = T.unsafe(nil)); end

  # Gets the changes of a merge request.
  #
  # @example
  #   Gitlab.merge_request_changes(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Gitlab::ObjectifiedHash] The merge request's changes.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#166
  def merge_request_changes(project, id); end

  # List issues that will close on merge
  #
  # @example
  #   Gitlab.merge_request_closes_issues(5, 1)
  # @param project [Integer] The ID of a project
  # @param iid [Integer] The internal ID of a merge request
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#189
  def merge_request_closes_issues(project_id, merge_request_iid); end

  # Gets the commits of a merge request.
  #
  # @example
  #   Gitlab.merge_request_commits(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Array<Gitlab::ObjectifiedHash>] The merge request's commits.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#178
  def merge_request_commits(project, id); end

  # Gets the diff a single merge request diff version\
  #
  # @example
  #   Gitlab.merge_request_diff_version(5, 1, 1)
  #   Gitlab.merge_request_diff_version('gitlab', 1, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param id [Integer] The ID of a merge request diff version.
  # @return [Gitlab::ObjectifiedHash] Record of the specific diff
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#380
  def merge_request_diff_version(project, merge_request_id, version_id); end

  # Gets a list of merge request diff versions
  #
  # @example
  #   Gitlab.merge_request_versions(5, 1)
  #   Gitlab.merge_request_versions('gitlab', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Gitlab::ObjectifiedHash] A list of the merge request versions.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#367
  def merge_request_diff_versions(project, merge_request_id); end

  # Gets a list of merge request diffs
  #
  # @example
  #   Gitlab.merge_request_diffs(5, 1)
  #   Gitlab.merge_request_diffs('gitlab', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Gitlab::ObjectifiedHash] A list of the merge request diffs.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#355
  def merge_request_diffs(project, merge_request_id); end

  # Get single merge request discussion
  #
  # @example
  #   Gitlab.merge_request_discussion(5, 1, 1)
  #   Gitlab.merge_request_discussion('gitlab', 1, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param discussion_id [Integer] The ID of a discussion.
  # @return [Gitlab::ObjectifiedHash] The merge request discussion.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#240
  def merge_request_discussion(project, merge_request_id, discussion_id); end

  # List project merge request discussions
  #
  # @example
  #   Gitlab.merge_request_discussions(5, 1)
  #   Gitlab.merge_request_discussions('gitlab', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Gitlab::ObjectifiedHash] List of the merge request discussions.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#227
  def merge_request_discussions(project, merge_request_id); end

  # Get a list of merge request participants.
  #
  # @example
  #   Gitlab.merge_request_participants(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#89
  def merge_request_participants(project, id); end

  # Gets a list of merge request pipelines.
  #
  # @example
  #   Gitlab.merge_request_pipelines(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#58
  def merge_request_pipelines(project, id); end

  # Gets a list of project merge requests.
  #
  # @example
  #   Gitlab.merge_requests(5)
  #   Gitlab.merge_requests(5, { per_page: 40 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#30
  def merge_requests(project, options = T.unsafe(nil)); end

  # Rebase a merge request.
  #
  # @example
  #   Gitlab.rebase_merge_request(5, 42, { skip_ci: true })
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Rebase progress status
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#394
  def rebase_merge_request(project, id, options = T.unsafe(nil)); end

  # Resolve a merge request discussion
  #
  # @example
  #   Gitlab.resolve_merge_request_discussion(5, 1, 1, true)
  #   Gitlab.resolve_merge_request_discussion('gitlab', 1, 1, false)
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param discussion_id [Integer] The ID of a discussion.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] The merge request discussion.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#283
  def resolve_merge_request_discussion(project, merge_request_id, discussion_id, options); end

  # Subscribes to a merge request.
  #
  # @example
  #   Gitlab.subscribe_to_merge_request(5, 1)
  #   Gitlab.subscribe_to_merge_request('gitlab', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Gitlab::ObjectifiedHash] Information about subscribed merge request.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#202
  def subscribe_to_merge_request(project, id); end

  # Unsubscribes from a merge request.
  #
  # @example
  #   Gitlab.unsubscribe_from_merge_request(5, 1)
  #   Gitlab.unsubscribe_from_merge_request('gitlab', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @return [Gitlab::ObjectifiedHash] Information about unsubscribed merge request.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#215
  def unsubscribe_from_merge_request(project, id); end

  # Updates a merge request.
  #
  # @example
  #   Gitlab.update_merge_request(5, 42, { title: 'New title' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a merge request.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated merge request.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#135
  def update_merge_request(project, id, options = T.unsafe(nil)); end

  # Modify an existing merge request discussion note
  #
  # @example
  #   Gitlab.update_merge_request_discussion_note(5, 1, 1, 1, body: 'note')
  #   Gitlab.update_merge_request_discussion_note('gitlab', 1, 1, 1, body: 'note')
  # @option options
  # @option options
  # @param note_id [Integer] The ID of a discussion note.
  # @param options [Hash] A customizable set of options.
  # @param id [Integer] The ID of a merge request.
  # @param project [Integer, String] The ID or name of a project.
  # @param discussion_id [Integer] The ID of a discussion.
  # @return [Gitlab::ObjectifiedHash] The merge request discussion note.
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#317
  def update_merge_request_discussion_note(project, merge_request_id, discussion_id, note_id, options); end

  # Gets a list of all of the merge requests the authenticated user has access to.
  #
  # @example
  #   Gitlab.user_merge_requests
  #   Gitlab.user_merge_requests(state: :opened, scope: :all)
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/merge_requests.rb#15
  def user_merge_requests(options = T.unsafe(nil)); end
end

# Defines methods related to merge trains.
#
# @see https://docs.gitlab.com/ee/api/merge_trains.html
#
# source://gitlab//lib/gitlab/client/merge_trains.rb#6
module Gitlab::Client::MergeTrains
  # Add a merge request to the merge train targeting the merge request’s target branch.
  #
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param merge_request_iid [Integer] The IID of the merge request.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] <description>
  #
  # source://gitlab//lib/gitlab/client/merge_trains.rb#51
  def add_merge_request_to_merge_train(project, merge_request_iid, options = T.unsafe(nil)); end

  # Get all merge requests added to a merge train for the requested target branch.
  #
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param target_branch [String] The target branch of the merge train.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/merge_trains.rb#29
  def merge_train_merge_requests(project, target_branch, options = T.unsafe(nil)); end

  # Get merge train information for the requested merge request.
  #
  # @param project [Integer, String] The ID or name of a project.
  # @param merge_request_iid [Integer] The IID of the merge request.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/merge_trains.rb#38
  def merge_train_status(project, merge_request_iid); end

  # Get list of merge trains for a project.
  #
  # @example
  #   Gitlab.merge_trains(1, scope: :active, sort: :asc)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/merge_trains.rb#17
  def merge_trains(project, options = T.unsafe(nil)); end
end

# Defines methods related to milestones.
#
# @see https://docs.gitlab.com/ce/api/milestones.html
#
# source://gitlab//lib/gitlab/client/milestones.rb#6
module Gitlab::Client::Milestones
  # Creates a new milestone.
  #
  # @example
  #   Gitlab.create_milestone(5, 'v1.0')
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param title [String] The title of a milestone.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created milestone.
  #
  # source://gitlab//lib/gitlab/client/milestones.rb#72
  def create_milestone(project, title, options = T.unsafe(nil)); end

  # Delete a project milestone.
  #
  # @example
  #   Gitlab.delete_milestone(5, 2)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a milestone.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/milestones.rb#102
  def delete_milestone(project, id); end

  # Updates a milestone.
  #
  # @example
  #   Gitlab.edit_milestone(5, 2, { state_event: 'activate' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a milestone.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated milestone.
  #
  # source://gitlab//lib/gitlab/client/milestones.rb#90
  def edit_milestone(project, id, options = T.unsafe(nil)); end

  # Gets a single milestone.
  #
  # @example
  #   Gitlab.milestone(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a milestone.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/milestones.rb#29
  def milestone(project, id); end

  # Gets the issues of a given milestone.
  #
  # @example
  #   Gitlab.milestone_issues(5, 2)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param milestone [Integer, String] The ID of a milestone.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/milestones.rb#43
  def milestone_issues(project, milestone, options = T.unsafe(nil)); end

  # Gets the merge_requests of a given milestone.
  #
  # @example
  #   Gitlab.milestone_merge_requests(5, 2)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param milestone [Integer, String] The ID of a milestone.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/milestones.rb#57
  def milestone_merge_requests(project, milestone, options = T.unsafe(nil)); end

  # Gets a list of project's milestones.
  #
  # @example
  #   Gitlab.milestones(5)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/milestones.rb#17
  def milestones(project, options = T.unsafe(nil)); end
end

# Defines methods related to namespaces
#
# @see https://docs.gitlab.com/ce/api/namespaces.html
#
# source://gitlab//lib/gitlab/client/namespaces.rb#6
module Gitlab::Client::Namespaces
  # Gets a list of namespaces.
  #
  # @example
  #   Gitlab.namespaces
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/namespaces.html#list-namespaces
  #
  # source://gitlab//lib/gitlab/client/namespaces.rb#18
  def namespaces(options = T.unsafe(nil)); end
end

# Defines methods related to notes.
#
# @see https://docs.gitlab.com/ce/api/notes.html
#
# source://gitlab//lib/gitlab/client/notes.rb#6
module Gitlab::Client::Notes
  # Creates a new epic note.
  #
  # @example
  #   Gitlab.create_epic_note(6, 1, 'Adding a note to my epic.')
  # @param group [Integer, String] The ID or name of a group.
  # @param epic [Integer] The ID of an epic.
  # @param body [String] The body of a note.
  # @return [Gitlab::ObjectifiedHash] Information about created note.
  #
  # source://gitlab//lib/gitlab/client/notes.rb#188
  def create_epic_note(group, epic, body); end

  # Creates a new issue note.
  #
  # @example
  #   Gitlab.create_issue_note(6, 1, 'Adding a note to my issue.')
  # @param project [Integer, String] The ID or name of a project.
  # @param issue [Integer] The ID of an issue.
  # @param body [String] The body of a note.
  # @return [Gitlab::ObjectifiedHash] Information about created note.
  #
  # source://gitlab//lib/gitlab/client/notes.rb#149
  def create_issue_note(project, issue, body); end

  # Creates a new note for a single merge request.
  #
  # @example
  #   Gitlab.create_merge_request_note(5, 3, 'This MR is ready for review.')
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge request.
  # @param body [String] The content of a note.
  #
  # source://gitlab//lib/gitlab/client/notes.rb#174
  def create_merge_request_comment(project, merge_request, body); end

  # Creates a new note for a single merge request.
  #
  # @example
  #   Gitlab.create_merge_request_note(5, 3, 'This MR is ready for review.')
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge request.
  # @param body [String] The content of a note.
  #
  # source://gitlab//lib/gitlab/client/notes.rb#174
  def create_merge_request_note(project, merge_request, body); end

  # Creates a new wall note.
  #
  # @example
  #   Gitlab.create_note(5, 'This is a wall note!')
  # @param project [Integer, String] The ID or name of a project.
  # @param body [String] The body of a note.
  # @return [Gitlab::ObjectifiedHash] Information about created note.
  #
  # source://gitlab//lib/gitlab/client/notes.rb#136
  def create_note(project, body); end

  # Creates a new snippet note.
  #
  # @example
  #   Gitlab.create_snippet_note(3, 2, 'Look at this awesome snippet!')
  # @param project [Integer, String] The ID or name of a project.
  # @param snippet [Integer] The ID of a snippet.
  # @param body [String] The body of a note.
  # @return [Gitlab::ObjectifiedHash] Information about created note.
  #
  # source://gitlab//lib/gitlab/client/notes.rb#162
  def create_snippet_note(project, snippet, body); end

  # Deletes an issue note.
  #
  # @example
  #   Gitlab.delete_issue_note(5, 10, 1)
  # @param project [Integer] The ID of a project.
  # @param issue [Integer] The ID of an issue.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#213
  def delete_issue_note(project, issue, id); end

  # Deletes a merge_request note.
  #
  # @example
  #   Gitlab.delete_merge_request_note(5, 11, 3)
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge_request.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#239
  def delete_merge_request_comment(project, merge_request, id); end

  # Deletes a merge_request note.
  #
  # @example
  #   Gitlab.delete_merge_request_note(5, 11, 3)
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge_request.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#239
  def delete_merge_request_note(project, merge_request, id); end

  # Deletes a wall note.
  #
  # @example
  #   Gitlab.delete_note(5, 15)
  # @param project [Integer] The ID of a project.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#200
  def delete_note(project, id); end

  # Deletes a snippet note.
  #
  # @example
  #   Gitlab.delete_snippet_note(5, 11, 3)
  # @param project [Integer] The ID of a project.
  # @param snippet [Integer] The ID of a snippet.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#226
  def delete_snippet_note(project, snippet, id); end

  # Modifies an issue note.
  #
  # @example
  #   Gitlab.edit_issue_note(5, 10, 1, 'This is an edited issue note')
  # @param project [Integer] The ID of a project.
  # @param issue [Integer] The ID of an issue.
  # @param id [Integer] The ID of a note.
  # @param body [String] The content of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#267
  def edit_issue_note(project, issue, id, body); end

  # Modifies a merge_request note.
  #
  # @example
  #   Gitlab.edit_merge_request_note(5, 11, 3, 'This is an edited merge request note')
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge_request.
  # @param id [Integer] The ID of a note.
  # @param body [String] The content of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#295
  def edit_merge_request_comment(project, merge_request, id, body); end

  # Modifies a merge_request note.
  #
  # @example
  #   Gitlab.edit_merge_request_note(5, 11, 3, 'This is an edited merge request note')
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge_request.
  # @param id [Integer] The ID of a note.
  # @param body [String] The content of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#295
  def edit_merge_request_note(project, merge_request, id, body); end

  # Modifies a wall note.
  #
  # @example
  #   Gitlab.edit_note(5, 15, 'This is an edited note')
  # @param project [Integer] The ID of a project.
  # @param id [Integer] The ID of a note.
  # @param body [String] The content of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#253
  def edit_note(project, id, body); end

  # Modifies a snippet note.
  #
  # @example
  #   Gitlab.edit_snippet_note(5, 11, 3, 'This is an edited snippet note')
  # @param project [Integer] The ID of a project.
  # @param snippet [Integer] The ID of a snippet.
  # @param id [Integer] The ID of a note.
  # @param body [String] The content of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#281
  def edit_snippet_note(project, snippet, id, body); end

  # Gets a list of notes for an epic.
  #
  # @example
  #   Gitlab.epic_notes(5, 10)
  # @option options
  # @option options
  # @param project [Integer] The ID of a group.
  # @param epic [Integer] The ID of an epic.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#73
  def epic_notes(group, epic, options = T.unsafe(nil)); end

  # Gets a single issue note.
  #
  # @example
  #   Gitlab.issue_note(5, 10, 1)
  # @param project [Integer] The ID of a project.
  # @param issue [Integer] The ID of an issue.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#98
  def issue_note(project, issue, id); end

  # Gets a list of notes for a issue.
  #
  # @example
  #   Gitlab.issue_notes(5, 10)
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param issue [Integer] The ID of an issue.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#30
  def issue_notes(project, issue, options = T.unsafe(nil)); end

  # Gets a list of notes for a merge request.
  #
  # @example
  #   Gitlab.merge_request_notes(5, 1)
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge request.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#58
  def merge_request_comments(project, merge_request, options = T.unsafe(nil)); end

  # Gets a single merge_request note.
  #
  # @example
  #   Gitlab.merge_request_note(5, 11, 3)
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge_request.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#124
  def merge_request_note(project, merge_request, id); end

  # Gets a list of notes for a merge request.
  #
  # @example
  #   Gitlab.merge_request_notes(5, 1)
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param merge_request [Integer] The ID of a merge request.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#58
  def merge_request_notes(project, merge_request, options = T.unsafe(nil)); end

  # Gets a single wall note.
  #
  # @example
  #   Gitlab.note(5, 15)
  # @param project [Integer] The ID of a project.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#85
  def note(project, id); end

  # Gets a list of projects notes.
  #
  # @example
  #   Gitlab.notes(5)
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#16
  def notes(project, options = T.unsafe(nil)); end

  # Gets a single snippet note.
  #
  # @example
  #   Gitlab.snippet_note(5, 11, 3)
  # @param project [Integer] The ID of a project.
  # @param snippet [Integer] The ID of a snippet.
  # @param id [Integer] The ID of a note.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#111
  def snippet_note(project, snippet, id); end

  # Gets a list of notes for a snippet.
  #
  # @example
  #   Gitlab.snippet_notes(5, 1)
  # @option options
  # @option options
  # @param project [Integer] The ID of a project.
  # @param snippet [Integer] The ID of a snippet.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/notes.rb#44
  def snippet_notes(project, snippet, options = T.unsafe(nil)); end

  private

  # TODO: Remove this method after a couple deprecation cycles.  Replace calls with the code
  # in the 'else'.
  #
  # source://gitlab//lib/gitlab/client/notes.rb#304
  def note_content(body); end
end

# Defines methods related to GitLab Packages.
#
# @see https://docs.gitlab.com/ee/api/packages.html
#
# source://gitlab//lib/gitlab/client/packages.rb#6
module Gitlab::Client::Packages
  # Deletes a project package.
  #
  # @example
  #   Gitlab.delete_project_package(5, 3)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] ID of a package.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/packages.rb#78
  def delete_project_package(project, id); end

  # Delete a package file.
  #
  # @example
  #   Gitlab.delete_project_file(5, 3, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param package_id [Integer] ID of a package.
  # @param file_id [Integer] ID of a package file.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/packages.rb#91
  def delete_project_package_file(project, package_id, file_id); end

  # Gets a list of project packages.
  #
  # @example
  #   Gitlab.group_packages(5)
  #   Gitlab.group_packages(5, { package_type: 'npm', sort: 'desc' })
  # @param project [Integer, String] the ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/packages.rb#42
  def group_packages(group, options = T.unsafe(nil)); end

  # Get a single project package.
  #
  # @example
  #   Gitlab.project_package(5, 3)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] ID of a package.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/packages.rb#54
  def project_package(project, id); end

  # Get a list of package files of a single package.
  #
  # @example
  #   Gitlab.project_package_files(5, 3)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] ID of a package.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/packages.rb#66
  def project_package_files(project, id); end

  # Gets a list of project packages.
  #
  # @example
  #   Gitlab.project_packages(5)
  #   Gitlab.project_packages(5, { package_type: 'npm', sort: 'desc' })
  # @param :project [Integer, String] the ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/packages.rb#22
  def project_packages(project, options = T.unsafe(nil)); end
end

# Defines methods related to pipeline schedules.
#
# @see https://docs.gitlab.com/ce/api/pipeline_schedules.html
#
# source://gitlab//lib/gitlab/client/pipeline_schedules.rb#6
module Gitlab::Client::PipelineSchedules
  # Create a pipeline schedule.
  #
  # @example
  #   Gitlab.create_pipeline_schedule(5, { description: 'example' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#46
  def create_pipeline_schedule(project, options = T.unsafe(nil)); end

  # Create a pipeline schedule variable.
  #
  # @example
  #   Gitlab.create_pipeline_schedule_variable(5, 1, { key: 'foo', value: 'bar' })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The pipeline schedule ID.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] The created pipeline schedule variable.
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#115
  def create_pipeline_schedule_variable(project, pipeline_schedule_id, options = T.unsafe(nil)); end

  # Delete a pipeline schedule.
  #
  # @example
  #   Gitlab.delete_pipeline_schedule(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The pipeline schedule ID.
  # @return [Gitlab::ObjectifiedHash] The deleted pipeline schedule.
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#100
  def delete_pipeline_schedule(project, pipeline_schedule_id); end

  # Delete the variable of a pipeline schedule
  #
  # @example
  #   Gitlab.delete_pipeline_schedule_variable(3, 2, "foo")
  # @param project [Integer, String] The ID or name of a project.
  # @param The [Integer] pipeline schedule ID.
  # @param The [String] key of a variable.
  # @return [Array<Gitlab::ObjectifiedHash>] The deleted pipeline schedule variable.
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#143
  def delete_pipeline_schedule_variable(project, pipeline_schedule_id, key, _options = T.unsafe(nil)); end

  # Updates the pipeline schedule of a project.
  #
  # @example
  #   Gitlab.edit_pipeline_schedule(3, 2, { description: 'example2' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param The [Integer] pipeline schedule ID.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] The updated pipeline schedule.
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#64
  def edit_pipeline_schedule(project, pipeline_schedule_id, options = T.unsafe(nil)); end

  # Updates the variable of a pipeline schedule.
  #
  # @example
  #   Gitlab.edit_pipeline_schedule_variable(3, 2, "foo" { value: 'bar' })
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param The [Integer] pipeline schedule ID.
  # @param The [String] key of a variable.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] The updated pipeline schedule variable.
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#130
  def edit_pipeline_schedule_variable(project, pipeline_schedule_id, key, options = T.unsafe(nil)); end

  # Gets a single pipeline schedule.
  #
  # @example
  #   Gitlab.pipeline_schedule(5, 3)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of the pipeline schedule.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#29
  def pipeline_schedule(project, id); end

  # Take ownership of a pipeline schedule.
  #
  # @example
  #   Gitlab.pipeline_schedule_take_ownership(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The pipeline schedule ID.
  # @return [Gitlab::ObjectifiedHash] The updated pipeline schedule.
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#76
  def pipeline_schedule_take_ownership(project, pipeline_schedule_id); end

  # Gets a list of project pipeline schedules.
  #
  # @example
  #   Gitlab.pipeline_schedules(5)
  #   Gitlab.pipeline_schedules(5, { scope: 'active' })
  # @param project [Integer, String] the ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#17
  def pipeline_schedules(project, options = T.unsafe(nil)); end

  # Run a scheduled pipeline immediately.
  #
  # @example
  #   Gitlab.run_pipeline_schedule(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The pipeline schedule ID.
  # @return [Gitlab::ObjectifiedHash] Pipeline created message.
  #
  # source://gitlab//lib/gitlab/client/pipeline_schedules.rb#88
  def run_pipeline_schedule(project, pipeline_schedule_id); end
end

# Defines methods related to pipelines.
#
# @see https://docs.gitlab.com/ce/api/pipeline_triggers.html
# @see https://docs.gitlab.com/ce/ci/triggers/README.html
#
# source://gitlab//lib/gitlab/client/pipeline_triggers.rb#7
module Gitlab::Client::PipelineTriggers
  # Create a pipeline trigger for a project.
  #
  # @example
  #   Gitlab.create_trigger(5, description: "my description")
  # @param project [Integer, String] The ID or name of a project.
  # @param description [String] The trigger name
  # @return [Gitlab::ObjectifiedHash] The created trigger.
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#39
  def create_trigger(project, description); end

  # Remove a project's pipeline trigger.
  #
  # @example
  #   Gitlab.remove_trigger(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The trigger ID.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#77
  def delete_trigger(project, trigger_id); end

  # Remove a project's pipeline trigger.
  #
  # @example
  #   Gitlab.remove_trigger(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The trigger ID.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#77
  def remove_trigger(project, trigger_id); end

  # Run the given project pipeline trigger.
  #
  # @example
  #   Gitlab.run_trigger(5, '7b9148c158980bbd9bcea92c17522d', 'master')
  #   Gitlab.run_trigger(5, '7b9148c158980bbd9bcea92c17522d', 'master', { variable1: "value", variable2: "value2" })
  # @param project [Integer, String] The ID or name of the project.
  # @param token [String] The token of a trigger.
  # @param ref [String] Branch or tag name to build.
  # @param variables [Hash] A set of build variables to use for the build. (optional)
  # @return [Gitlab::ObjectifiedHash] The trigger.
  # @see https://docs.gitlab.com/ce/ci/triggers/README.html
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#95
  def run_trigger(project, token, ref, variables = T.unsafe(nil)); end

  # Gets details of project's pipeline trigger.
  #
  # @example
  #   Gitlab.trigger(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The trigger ID.
  # @return [Gitlab::ObjectifiedHash] The trigger.
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#27
  def trigger(project, trigger_id); end

  # Take ownership of a project trigger
  #
  # @example
  #   Gitlab.trigger_take_ownership(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The trigger ID.
  # @return [Gitlab::ObjectifiedHash] The updated trigger.
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#65
  def trigger_take_ownership(project, trigger_id); end

  # Gets a list of the project's pipeline triggers
  #
  # @example
  #   Gitlab.triggers(5)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>] The list of triggers.
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#15
  def triggers(project); end

  # Update a project trigger
  #
  # @example
  #   Gitlab.update_trigger(5, 1, description: "my description")
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param trigger_id [Integer] The trigger ID.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] The updated trigger.
  #
  # source://gitlab//lib/gitlab/client/pipeline_triggers.rb#53
  def update_trigger(project, trigger_id, options = T.unsafe(nil)); end
end

# Defines methods related to pipelines.
#
# @see https://docs.gitlab.com/ce/api/pipelines.html
#
# source://gitlab//lib/gitlab/client/pipelines.rb#6
module Gitlab::Client::Pipelines
  # Cancels a pipeline.
  #
  # @example
  #   Gitlab.cancel_pipeline(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a pipeline.
  # @return [Gitlab::ObjectifiedHash] The pipelines changes.
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#89
  def cancel_pipeline(project, id); end

  # Create a pipeline.
  #
  # @example
  #   Gitlab.create_pipeline(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param ref [String] Reference to commit.
  # @param variables [Hash] Variables passed to pipelines
  # @return [Gitlab::ObjectifiedHash] The pipelines changes.
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#67
  def create_pipeline(project, ref, variables = T.unsafe(nil)); end

  # Delete a pipeline
  #
  # @example
  #   Gitlab.delete_pipeline(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a pipeline.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#113
  def delete_pipeline(project, id); end

  # Gets a single pipeline.
  #
  # @example
  #   Gitlab.pipeline(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a pipeline.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#30
  def pipeline(project, id); end

  # Gets a single pipeline's test report.
  #
  # @example
  #   Gitlab.pipeline_test_report(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a pipeline.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#42
  def pipeline_test_report(project, id); end

  # Gets a single pipeline's variables.
  #
  # @example
  #   Gitlab.pipeline_variables(5, 36)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a pipeline.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#54
  def pipeline_variables(project, id); end

  # Gets a list of project pipelines.
  #
  # @example
  #   Gitlab.pipelines(5)
  #   Gitlab.pipelines(5, { per_page: 10, page:  2 })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#18
  def pipelines(project, options = T.unsafe(nil)); end

  # Retry a pipeline.
  #
  # @example
  #   Gitlab.retry_pipeline(5, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a pipeline.
  # @return [Array<Gitlab::ObjectifiedHash>] The pipelines changes.
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#101
  def retry_pipeline(project, id); end

  # Update a pipeline metadata
  #
  # @example
  #   Gitlab.update_pipeline_metadata(5, 1, name: 'new name')
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a pipeline.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/pipelines.rb#126
  def update_pipeline_metadata(project, id, options = T.unsafe(nil)); end
end

# Defines methods related to project badges.
#
# @see https://docs.gitlab.com/ee/api/project_badges.html
#
# source://gitlab//lib/gitlab/client/project_badges.rb#6
module Gitlab::Client::ProjectBadges
  # Adds a badge to a project.
  #
  # @example
  #   Gitlab.add_project_badge(5, { link_url: 'https://abc.com/gitlab/gitlab-ce/commits/master', image_url: 'https://shields.io/my/badge1' })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the added project badge.
  #
  # source://gitlab//lib/gitlab/client/project_badges.rb#40
  def add_project_badge(project, options = T.unsafe(nil)); end

  # Updates a badge of a project..
  #
  # @example
  #   Gitlab.edit_project_badge(5, 1, { link_url: 'https://abc.com/gitlab/gitlab-ce/commits/master', image_url: 'https://shields.io/my/badge1' })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param badge_id [Integer] The badge ID.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the updated project badge.
  #
  # source://gitlab//lib/gitlab/client/project_badges.rb#55
  def edit_project_badge(project, badge_id, options = T.unsafe(nil)); end

  # Preview a badge from a project.
  #
  # @example
  #   Gitlab.preview_project_badge(3, 'https://abc.com/gitlab/gitlab-ce/commits/master', 'https://shields.io/my/badge1')
  # @param project [Integer, String] The ID or name of a project.
  # @param :link_url [String] URL of the badge link
  # @param :image_url [String] URL of the badge image
  # @return [Gitlab::ObjectifiedHash] Returns how the link_url and image_url final URLs would be after resolving the placeholder interpolation.
  #
  # source://gitlab//lib/gitlab/client/project_badges.rb#80
  def preview_project_badge(project, link_url, image_url); end

  # Gets a badge of a project.
  #
  # @example
  #   Gitlab.project_badge(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param badge_id [Integer] The badge ID.
  # @return [Gitlab::ObjectifiedHash] Information about the requested badge
  #
  # source://gitlab//lib/gitlab/client/project_badges.rb#26
  def project_badge(project, badge_id); end

  # Gets a list of a projects badges and its group badges.
  #
  # @example
  #   Gitlab.project_badges(5)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>] List of all badges of a project
  #
  # source://gitlab//lib/gitlab/client/project_badges.rb#14
  def project_badges(project); end

  # Removes a badge from a project. Only projects badges will be removed by using this endpoint.
  #
  # @example
  #   Gitlab.remove_project_badge(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param badge_id [Integer] The badge ID.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/project_badges.rb#67
  def remove_project_badge(project, badge_id); end
end

# Defines methods related to project clusters.
#
# @see https://docs.gitlab.com/ce/api/project_clusters.html
#
# source://gitlab//lib/gitlab/client/project_clusters.rb#6
module Gitlab::Client::ProjectClusters
  # Adds an existing Kubernetes cluster to the project.
  #
  # @example
  #   Gitlab.add_project_cluster(5, 'cluster-5', { enabled: false, platform_kubernetes_attributes: { api_url: 'https://35.111.51.20', token: '12345', ca_cert: "-----BEGIN CERTIFICATE-----\r\nhFiK1L61owwDQYJKoZIhvcNAQELBQAw\r\nLzEtMCsGA1UEAxMkZDA1YzQ1YjctNzdiMS00NDY0LThjNmEtMTQ0ZDJkZjM4ZDBj\r\nMB4XDTE4MTIyNzIwMDM1MVoXDTIzMTIyNjIxMDM1MVowLzEtMCsGA1UEAxMkZDA1\r\nYzQ1YjctNzdiMS00NDY0LThjNmEtMTQ0ZDJkZjM.......-----END CERTIFICATE-----", namespace: 'cluster-5-namespace', authorization_type: 'rbac' } })
  #   Gitlab.add_project_cluster(5, 'cluster-5', { platform_kubernetes_attributes: { api_url: 'https://35.111.51.20', token: '12345' } })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param name [String] The name of the existing cluster.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the added project cluster.
  #
  # source://gitlab//lib/gitlab/client/project_clusters.rb#47
  def add_project_cluster(project, name, options = T.unsafe(nil)); end

  # Deletes an existing project cluster.
  #
  # @example
  #   Gitlab.delete_project_cluster(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param cluster_id [Integer] The ID of the cluster.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/project_clusters.rb#79
  def delete_project_cluster(project, cluster_id); end

  # Updates an existing project cluster.
  #
  # @example
  #   Gitlab.edit_project_cluster(5, 1, { name: 'cluster-6', platform_kubernetes_attributes: { api_url: 'https://35.111.51.20', token: '12345', ca_cert: "-----BEGIN CERTIFICATE-----\r\nhFiK1L61owwDQYJKoZIhvcNAQELBQAw\r\nLzEtMCsGA1UEAxMkZDA1YzQ1YjctNzdiMS00NDY0LThjNmEtMTQ0ZDJkZjM4ZDBj\r\nMB4XDTE4MTIyNzIwMDM1MVoXDTIzMTIyNjIxMDM1MVowLzEtMCsGA1UEAxMkZDA1\r\nYzQ1YjctNzdiMS00NDY0LThjNmEtMTQ0ZDJkZjM.......-----END CERTIFICATE-----", namespace: 'cluster-6-namespace' } })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param cluster_id [Integer] The ID of the cluster.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the updated project cluster.
  #
  # source://gitlab//lib/gitlab/client/project_clusters.rb#67
  def edit_project_cluster(project, cluster_id, options = T.unsafe(nil)); end

  # Gets a single project cluster.
  #
  # @example
  #   Gitlab.project_cluster(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param cluster_id [Integer] The ID of the cluster.
  # @return [Gitlab::ObjectifiedHash] Information about the requested cluster
  #
  # source://gitlab//lib/gitlab/client/project_clusters.rb#26
  def project_cluster(project, cluster_id); end

  # Returns a list of project clusters.
  #
  # @example
  #   Gitlab.project_clusters(5)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>] List of all clusters of a project
  #
  # source://gitlab//lib/gitlab/client/project_clusters.rb#14
  def project_clusters(project); end
end

# Defines methods related to project exports.
#
# @see https://docs.gitlab.com/ce/api/project_import_export.html
#
# source://gitlab//lib/gitlab/client/project_exports.rb#6
module Gitlab::Client::ProjectExports
  # Start a new export
  #
  # @example
  #   Gitlab.export_project(2)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer, String] The ID or path of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/project_exports.rb#19
  def export_project(id, options = T.unsafe(nil)); end

  # Get the status of export
  #
  # @example
  #   Gitlab.export_project_status(2)
  # @param id [Integer, String] The ID or path of a project.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/project_exports.rb#30
  def export_project_status(id); end

  # Download the finished export
  #
  # @example
  #   Gitlab.exported_project_download(2)
  # @param id [Integer, String] The ID or path of a project.
  # @return [Gitlab::FileResponse]
  #
  # source://gitlab//lib/gitlab/client/project_exports.rb#41
  def exported_project_download(id); end
end

# Defines methods related to project release links.
#
# @see https://docs.gitlab.com/ce/api/releases/links.html
#
# source://gitlab//lib/gitlab/client/project_release_links.rb#6
module Gitlab::Client::ProjectReleaseLinks
  # Create an asset as a link from a Release.
  #
  # @example
  #   Gitlab.create_project_release_link(5, 'v0.1', { name: 'awesome-v0.2.dmg', url: 'http://192.168.10.15:3000' })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The tag associated with the Release.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the created release link.
  #
  # source://gitlab//lib/gitlab/client/project_release_links.rb#43
  def create_project_release_link(project, tag_name, options = T.unsafe(nil)); end

  # Delete an asset as a link from a Release.
  #
  # @example
  #   Gitlab.delete_project_release_link(5, 'v0.3', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The tag where the release will be created from.
  # @param link_id [Integer] The id of the link.
  # @return [Gitlab::ObjectifiedHash] Information about the deleted release link.
  #
  # source://gitlab//lib/gitlab/client/project_release_links.rb#72
  def delete_project_release_link(project, tag_name, link_id); end

  # Get an asset as link from a Release.
  #
  # @example
  #   Gitlab.project_release_link(5, 'v0.3', 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The tag associated with the Release.
  # @param link_id [Integer] The id of the link.
  # @return [Gitlab::ObjectifiedHash] Information about the release link
  #
  # source://gitlab//lib/gitlab/client/project_release_links.rb#28
  def project_release_link(project, tag_name, link_id); end

  # Get assets as links from a Release.
  #
  # @example
  #   Gitlab.project_release_links(5, 'v0.3')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The tag associated with the Release.
  # @return [Array<Gitlab::ObjectifiedHash>] List of assets as links from a Release.
  #
  # source://gitlab//lib/gitlab/client/project_release_links.rb#15
  def project_release_links(project, tag_name); end

  # Update an asset as a link from a Release. You have to specify at least one of name or url
  #
  # @example
  #   Gitlab.update_project_release_link(5, 'v0.3', 1, { name: 'awesome-v0.2.dmg', url: 'http://192.168.10.15:3000' })
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @param tag_name [String] The tag where the release will be created from.
  # @param project [Integer, String] The ID or name of a project.
  # @param link_id [Integer] The id of the link.
  # @return [Gitlab::ObjectifiedHash] Information about the updated release link.
  #
  # source://gitlab//lib/gitlab/client/project_release_links.rb#59
  def update_project_release_link(project, tag_name, link_id, options = T.unsafe(nil)); end
end

# Defines methods related to project releases.
#
# @see https://docs.gitlab.com/ce/api/releases/
#
# source://gitlab//lib/gitlab/client/project_releases.rb#6
module Gitlab::Client::ProjectReleases
  # Creates a Release. You need push access to the repository to create a Release.
  #
  # @example
  #   Gitlab.create_project_release(5, { name: 'New Release', tag_name: 'v0.3', description: 'Super nice release' })
  #   Gitlab.create_project_release(5, { name: 'New Release', tag_name: 'v0.3', description: 'Super nice release', assets: { links: [{ name: 'hoge', url: 'https://google.com' }] } })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the created release.
  #
  # source://gitlab//lib/gitlab/client/project_releases.rb#48
  def create_project_release(project, options = T.unsafe(nil)); end

  # Delete a Release. Deleting a Release will not delete the associated tag.
  #
  # @example
  #   Gitlab.delete_project_release(5, 'v0.3')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The tag where the release will be created from.
  # @return [Gitlab::ObjectifiedHash] Information about the deleted release.
  #
  # source://gitlab//lib/gitlab/client/project_releases.rb#75
  def delete_project_release(project, tag_name); end

  # Gets Latest Release
  #
  # @example
  #   Gitlab.project_latest_release(5)
  # @param project [Integer, String] The ID or name of a project
  # @return [Gitlab::ObjectifiedHash] Information about the release
  #
  # source://gitlab//lib/gitlab/client/project_releases.rb#86
  def project_latest_release(project); end

  # Gets a Release by a tag name
  #
  # @example
  #   Gitlab.project_release(5, 'v0.1')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The tag where the release will be created from..
  # @return [Gitlab::ObjectifiedHash] Information about the release
  #
  # source://gitlab//lib/gitlab/client/project_releases.rb#26
  def project_release(project, tag_name); end

  # Returns Paginated list of a project's releases, sorted by created_at.
  #
  # @example
  #   Gitlab.project_releases(5)
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>] Paginated list of Releases, sorted by created_at.
  #
  # source://gitlab//lib/gitlab/client/project_releases.rb#14
  def project_releases(project); end

  # Updates a release.
  #
  # @example
  #   Gitlab.update_project_release(5, 'v0.3', { name: 'New Release', description: 'Super nice release' })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The tag where the release will be created from.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the updated release.
  #
  # source://gitlab//lib/gitlab/client/project_releases.rb#63
  def update_project_release(project, tag_name, options = T.unsafe(nil)); end
end

# Defines methods related to projects.
#
# @see https://docs.gitlab.com/ce/api/projects.html
#
# source://gitlab//lib/gitlab/client/projects.rb#6
module Gitlab::Client::Projects
  # Creates a new custom_attribute
  #
  # @example
  #   Gitlab.add_custom_attribute('some_new_key', 'some_new_value', 2)
  # @param key [String] The custom_attributes key
  # @param value [String] The custom_attributes value
  # @param project_id [Integer] The ID of a project.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#679
  def add_project_custom_attribute(key, value, project_id); end

  # Adds a new hook to the project.
  #
  # @example
  #   Gitlab.add_project_hook(42, 'https://api.example.net/v1/webhooks/ci')
  # @param project [Integer, String] The ID or path of a project.
  # @param url [String] The hook URL.
  # @param options [Hash] A customizable set of options.
  # @param option [Boolean] :issues_events Trigger hook on issues events (0 = false, 1 = true)
  # @param option [Boolean] :merge_requests_events Trigger hook on merge_requests events (0 = false, 1 = true)
  # @param option [Boolean] :tag_push_events Trigger hook on push_tag events (0 = false, 1 = true)
  # @param option [Boolean] :push_events Trigger hook on push events (0 = false, 1 = true)
  # @return [Gitlab::ObjectifiedHash] Information about added hook.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#224
  def add_project_hook(project, url, options = T.unsafe(nil)); end

  # Adds a project push rule.
  #
  # @example
  #   Gitlab.add_push_rule(42, { deny_delete_tag: false, commit_message_regex: '\\b[A-Z]{3}-[0-9]+\\b' })
  # @param id [Integer] The ID of a project.
  # @param options [Hash] A customizable set of options.
  # @param option [Boolean] :deny_delete_tag Do not allow users to remove git tags with git push (0 = false, 1 = true)
  # @param option [String] :commit_message_regex Commit message regex
  # @return [Gitlab::ObjectifiedHash] Information about added push rule.
  # @see https://docs.gitlab.com/ee/api/projects.html#add-project-push-rule
  #
  # source://gitlab//lib/gitlab/client/projects.rb#283
  def add_push_rule(id, options = T.unsafe(nil)); end

  # Adds a user to project team.
  #
  # @example
  #   Gitlab.add_team_member('gitlab', 2, 40)
  #   Gitlab.add_team_member('gitlab', 2, 40, { expires_at: "2018-12-31"})
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a user.
  # @param access_level [Integer] The access level to project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about added team member.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#148
  def add_team_member(project, id, access_level, options = T.unsafe(nil)); end

  # Gets a list of all project team members including inherited members.
  #
  # @example
  #   Gitlab.all_members(42)
  #   Gitlab.all_members('gitlab')
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#120
  def all_members(project, options = T.unsafe(nil)); end

  # Archives a project.
  #
  # @example
  #   Gitlab.archive_project(4)
  # @param id [Integer, String] The ID or path of a project.
  # @return [Gitlab::ObjectifiedHash] Information about archived project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#632
  def archive_project(id); end

  # Creates a new deploy key.
  #
  # @example
  #   Gitlab.create_deploy_key(42, 'My Key', 'Key contents', can_push: true)
  # @param project [Integer, String] The ID or path of a project.
  # @param title [String] The title of a deploy key.
  # @param key [String] The content of a deploy key.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created deploy key.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#374
  def create_deploy_key(project, title, key, options = T.unsafe(nil)); end

  # Forks a project into the user namespace.
  #
  # @example
  #   Gitlab.create_fork(42)
  #   Gitlab.create_fork(42, { sudo: 'another_username' })
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about the forked project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#438
  def create_fork(id, options = T.unsafe(nil)); end

  # Creates a new project.
  #
  # @example
  #   Gitlab.create_project('gitlab')
  #   Gitlab.create_project('viking', { description: 'Awesome project' })
  #   Gitlab.create_project('Red', { wall_enabled: false })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param name [String] The name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#76
  def create_project(name, options = T.unsafe(nil)); end

  # Deletes a deploy key from project.
  #
  # @example
  #   Gitlab.delete_deploy_key(42, 1)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a deploy key.
  # @return [Gitlab::ObjectifiedHash] Information about deleted deploy key.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#424
  def delete_deploy_key(project, id); end

  # Deletes a project.
  #
  # @example
  #   Gitlab.delete_project(4)
  # @param id [Integer, String] The ID or path of a project.
  # @return [Gitlab::ObjectifiedHash] Information about deleted project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#88
  def delete_project(id); end

  # Delete custom_attribute
  # Will delete a custom_attribute
  #
  # @example
  #   Gitlab.delete_project_custom_attribute('somekey', 2)
  # @param key [String] The custom_attribute key to delete
  # @param project_id [Integer] The ID of a project.
  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#693
  def delete_project_custom_attribute(key, project_id = T.unsafe(nil)); end

  # Deletes a hook from project.
  #
  # @example
  #   Gitlab.delete_project_hook('gitlab', 4)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [String] The ID of the hook.
  # @return [Gitlab::ObjectifiedHash] Information about deleted hook.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#256
  def delete_project_hook(project, id); end

  # Deletes a push rule from a project.
  #
  # @example
  #   Gitlab.delete_push_rule(42)
  # @param id [Integer] The ID of a project.
  # @return [Gitlab::ObjectifiedHash] Information about deleted push rule.
  # @see https://docs.gitlab.com/ee/api/projects.html#delete-project-push-rule
  #
  # source://gitlab//lib/gitlab/client/projects.rb#310
  def delete_push_rule(id); end

  # Gets a single project deploy key.
  #
  # @example
  #   Gitlab.deploy_key(42, 1)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a deploy key.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#360
  def deploy_key(project, id); end

  # Gets a project deploy keys.
  #
  # @example
  #   Gitlab.deploy_keys(42)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#348
  def deploy_keys(project, options = T.unsafe(nil)); end

  # Disables a deploy key at the project.
  #
  # @example
  #   Gitlab.disable_deploy_key(42, 66)
  # @param project [Integer, String] The ID or path of a project.
  # @param key [Integer] The ID of a deploy key.
  # @return [Gitlab::ObjectifiedHash] Information about the disabled deploy key.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#398
  def disable_deploy_key(project, key); end

  # Updates an existing deploy key.
  #
  # @example
  #   Gitlab.edit_deploy_key(42, 66, 'New key name', can_push: false)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a deploy key.
  # @param title [String] The title of a deploy key.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created deploy key.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#412
  def edit_deploy_key(project, id, title, options = T.unsafe(nil)); end

  # Updates an existing project.
  #
  # (Any provided options will be passed to Gitlab. See {https://docs.gitlab.com/ce/api/projects.html#edit-project Gitlab docs} for all valid options)
  #
  # @example
  #   Gitlab.edit_project(42)
  #   Gitlab.edit_project(42, { name: 'Project Name' })
  #   Gitlab.edit_project('project-name', { name: 'New Project Name', path: 'new-project-patth' })
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param options [Hash] A customizable set of options
  # @return [Gitlab::ObjectifiedHash] Information about the edited project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#475
  def edit_project(id, options = T.unsafe(nil)); end

  # Updates a project hook URL.
  #
  # @example
  #   Gitlab.edit_project_hook(42, 1, 'https://api.example.net/v1/webhooks/ci')
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of the hook.
  # @param url [String] The hook URL.
  # @param options [Hash] A customizable set of options.
  # @param option [Boolean] :issues_events Trigger hook on issues events (0 = false, 1 = true)
  # @param option [Boolean] :merge_requests_events Trigger hook on merge_requests events (0 = false, 1 = true)
  # @param option [Boolean] :tag_push_events Trigger hook on push_tag events (0 = false, 1 = true)
  # @param option [Boolean] :push_events Trigger hook on push events (0 = false, 1 = true)
  # @return [Gitlab::ObjectifiedHash] Information about updated hook.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#243
  def edit_project_hook(project, id, url, options = T.unsafe(nil)); end

  # Updates a project push rule.
  #
  # @example
  #   Gitlab.edit_push_rule(42, { deny_delete_tag: false, commit_message_regex: '\\b[A-Z]{3}-[0-9]+\\b' })
  # @param id [Integer] The ID of a project.
  # @param options [Hash] A customizable set of options.
  # @param option [Boolean] :deny_delete_tag Do not allow users to remove git tags with git push (0 = false, 1 = true)
  # @param option [String] :commit_message_regex Commit message regex
  # @return [Gitlab::ObjectifiedHash] Information about updated push rule.
  # @see https://docs.gitlab.com/ee/api/projects.html#edit-project-push-rule
  #
  # source://gitlab//lib/gitlab/client/projects.rb#298
  def edit_push_rule(id, options = T.unsafe(nil)); end

  # Updates a team member's project access level.
  #
  # @example
  #   Gitlab.edit_team_member('gitlab', 3, 20)
  #   Gitlab.edit_team_member('gitlab', 3, 20, { expires_at: "2018-12-31"})
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a user.
  # @param access_level [Integer] The access level to project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] Information about updated team member.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#165
  def edit_team_member(project, id, access_level, options = T.unsafe(nil)); end

  # Enables a deploy key at the project.
  #
  # @example
  #   Gitlab.enable_deploy_key(42, 66)
  # @param project [Integer, String] The ID or path of a project.
  # @param key [Integer] The ID of a deploy key.
  # @return [Gitlab::ObjectifiedHash] Information about the enabled deploy key.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#386
  def enable_deploy_key(project, key); end

  # Mark this project as forked from the other
  #
  # @example
  #   Gitlab.make_forked(42, 24)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of the project it is forked from.
  # @return [Gitlab::ObjectifiedHash] Information about the forked project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#322
  def make_forked_from(project, id); end

  # Gets information about a project.
  #
  # @example
  #   Gitlab.project(3)
  #   Gitlab.project('gitlab')
  # @param id [Integer, String] The ID or path of a project.
  # @param options [string] :license Include project license data
  # @param options [string] :statistics Include project statistics.
  # @param options [string] :with_custom_attributes Include custom attributes in response. (admins only)
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#51
  def project(id, options = T.unsafe(nil)); end

  # Gets single project custom_attribute.
  #
  # @example
  #   Gitlab.project_custom_attribute(key, 2)
  # @param key [String] The custom_attributes key
  # @param project_id [Integer] The ID of a project.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#666
  def project_custom_attribute(key, project_id); end

  # Gets project custom_attributes.
  #
  # @example
  #   Gitlab.project_custom_attributes(2)
  # @param project_id [Integer] The ID of a project.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#654
  def project_custom_attributes(project_id); end

  # List project deploy tokens
  #
  # @example
  #   Gitlab.project_deploy_tokens(42)
  # @option options
  # @param id [Integer, String] The ID or path of a project.
  # @param options [Hash] a customizable set of options
  #
  # source://gitlab//lib/gitlab/client/projects.rb#704
  def project_deploy_tokens(project, options = T.unsafe(nil)); end

  # Get a list of all visible projects across GitLab for the authenticated user.
  # When accessed without authentication, only public projects are returned.
  #
  # Note: This feature was introduced in GitLab 10.1
  #
  # @example
  #   Gitlab.project_forks(42)
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#456
  def project_forks(id, options = T.unsafe(nil)); end

  # Gets a project hook.
  #
  # @example
  #   Gitlab.project_hook(42, 5)
  #   Gitlab.project_hook('gitlab', 5)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a hook.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#207
  def project_hook(project, id); end

  # Gets a list of project hooks.
  #
  # @example
  #   Gitlab.project_hooks(42)
  #   Gitlab.project_hooks('gitlab')
  # @option options
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#194
  def project_hooks(project, options = T.unsafe(nil)); end

  # Search for projects by name.
  #
  # @example
  #   Gitlab.project_search('gitlab')
  #   Gitlab.project_search('gitlab', { order_by: 'last_activity_at' })
  #   Gitlab.search_projects('gitlab', { order_by: 'name', sort: 'asc' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#35
  def project_search(query, options = T.unsafe(nil)); end

  # Get one project template of a particular type
  #
  # @example
  #   Gitlab.project_template(1, 'dockerfiles', 'dockey')
  #   Gitlab.project_template(1, 'licenses', 'gpl', { project: 'some project', fullname: 'Holder Holding' })
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @param type [String] The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses) of the template
  # @param project [Integer, String] The ID or URL-encoded path of the project.
  # @param key [String] The key of the template, as obtained from the collection endpoint
  # @return [Gitlab::ObjectifiedHash]
  # @see https://docs.gitlab.com/ce/api/project_templates.html
  #
  # source://gitlab//lib/gitlab/client/projects.rb#621
  def project_template(project, type, key, options = T.unsafe(nil)); end

  # Get all project templates of a particular type
  #
  # @example
  #   Gitlab.project_templates(1, 'dockerfiles')
  #   Gitlab.project_templates(1, 'licenses')
  # @param id [Integer, String] The ID or URL-encoded path of the project.
  # @param type [String] The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses) of the template
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/project_templates.html
  #
  # source://gitlab//lib/gitlab/client/projects.rb#603
  def project_templates(project, type); end

  # Gets a list of projects owned by the authenticated user.
  #
  # (Any provided options will be passed to Gitlab. See {https://docs.gitlab.com/ce/api/projects.html#list-all-projects Gitlab docs} for all valid options)
  #
  # @example
  #   Gitlab.projects
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#18
  def projects(options = T.unsafe(nil)); end

  # Gets a project push rule.
  #
  # @example
  #   Gitlab.push_rule(42)
  # @param id [Integer] The ID of a project.
  # @return [Gitlab::ObjectifiedHash]
  # @see https://docs.gitlab.com/ee/api/projects.html#show-project-push-rules
  #
  # source://gitlab//lib/gitlab/client/projects.rb#268
  def push_rule(id); end

  # Remove a forked_from relationship for a project.
  #
  # @example
  #   Gitlab.remove_forked(42)
  # @param project [Integer, String] The ID or path of a project.
  # @param project [Integer] The ID of the project it is forked from
  # @return [Gitlab::ObjectifiedHash] Information about the forked project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#334
  def remove_forked(project); end

  # Removes a user from project team.
  #
  # @example
  #   Gitlab.remove_team_member('gitlab', 2)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a user.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about removed team member.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#179
  def remove_team_member(project, id); end

  # Search for projects by name.
  #
  # @example
  #   Gitlab.project_search('gitlab')
  #   Gitlab.project_search('gitlab', { order_by: 'last_activity_at' })
  #   Gitlab.search_projects('gitlab', { order_by: 'name', sort: 'asc' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#35
  def search_projects(query, options = T.unsafe(nil)); end

  # Share project with group.
  #
  # @example
  #   Gitlab.share_project_with_group('gitlab', 2, 40)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a group.
  # @param group_access [Integer] The access level to project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#487
  def share_project_with_group(project, id, group_access); end

  # Stars a project.
  #
  # @example
  #   Gitlab.star_project(42)
  #   Gitlab.star_project('gitlab-org/gitlab-ce')
  # @param id [Integer, String] The ID or path of a project.
  # @return [Gitlab::ObjectifiedHash] Information about starred project.
  # @see https://docs.gitlab.com/ce/api/projects.html#star-a-project
  #
  # source://gitlab//lib/gitlab/client/projects.rb#524
  def star_project(id); end

  # Gets a project team member.
  #
  # @example
  #   Gitlab.team_member('gitlab', 2)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a project team member.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#132
  def team_member(project, id); end

  # Gets a list of project team members.
  #
  # @example
  #   Gitlab.team_members(42)
  #   Gitlab.team_members('gitlab')
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or path of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/projects.rb#104
  def team_members(project, options = T.unsafe(nil)); end

  # Transfer a project to a new namespace.
  #
  # @example
  #   Gitlab.transfer_project(42, 'yolo')
  # @param project [Integer, String] The ID or path of a project
  # @param namespace [Integer, String] The ID or path of the namespace to transfer to project to
  # @return [Gitlab::ObjectifiedHash] Information about transfered project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#511
  def transfer_project(project, namespace); end

  # Unarchives a project.
  #
  # @example
  #   Gitlab.unarchive_project(4)
  # @param id [Integer, String] The ID or path of a project.
  # @return [Gitlab::ObjectifiedHash] Information about unarchived project.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#643
  def unarchive_project(id); end

  # Unshare project with group.
  #
  # @example
  #   Gitlab.unshare_project_with_group('gitlab', 2)
  # @param project [Integer, String] The ID or path of a project.
  # @param id [Integer] The ID of a group.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/projects.rb#499
  def unshare_project_with_group(project, id); end

  # Unstars a project.
  #
  # @example
  #   Gitlab.unstar_project(42)
  #   Gitlab.unstar_project('gitlab-org/gitlab-ce')
  # @param id [Integer, String] The ID or path of a project.
  # @return [Gitlab::ObjectifiedHash] Information about unstarred project.
  # @see https://docs.gitlab.com/ce/api/projects.html#unstar-a-project
  #
  # source://gitlab//lib/gitlab/client/projects.rb#537
  def unstar_project(id); end

  # Uploads a file to the specified project to be used in an issue or
  # merge request description, or a comment.
  #
  # @example
  #   Gitlab.upload_file(1, '/full/path/to/avatar.jpg')
  # @param id [Integer, String] The ID or path of a project.
  # @param file_fullpath [String] The fullpath of the file you are interested to upload.
  # @return [Gitlab::ObjectifiedHash]
  # @see https://docs.gitlab.com/ee/api/projects.html#upload-a-file
  #
  # source://gitlab//lib/gitlab/client/projects.rb#589
  def upload_file(id, file_fullpath); end

  # Get a list of visible projects for the given user.
  #
  # @example
  #   Gitlab.user_projects(1)
  #   Gitlab.user_projects(1, { order_by: 'last_activity_at' })
  #   Gitlab.user_projects('username', { order_by: 'name', sort: 'asc' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param user_id [Integer, String] The ID or username of the user.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ee/api/projects.html#list-user-projects
  #
  # source://gitlab//lib/gitlab/client/projects.rb#575
  def user_projects(user_id, options = T.unsafe(nil)); end

  # Get a list of visible projects that the given user has starred.
  #
  # @example
  #   Gitlab.user_starred_projects(1)
  #   Gitlab.user_starred_projects(1, { order_by: 'last_activity_at' })
  #   Gitlab.user_starred_projects('username', { order_by: 'name', sort: 'asc' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param user_id [Integer, String] The ID or username of the user.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ee/api/projects.html#list-projects-starred-by-a-user
  #
  # source://gitlab//lib/gitlab/client/projects.rb#556
  def user_starred_projects(user_id, options = T.unsafe(nil)); end
end

# Defines methods related to Protected Tags.
#
# @see https://docs.gitlab.com/ce/api/protected_tags.html
#
# source://gitlab//lib/gitlab/client/protected_tags.rb#6
module Gitlab::Client::ProtectedTags
  # Protects a single repository tag or several project repository tags using a wildcard protected tag.
  #
  # @example
  #   Gitlab.protect_repository_tag(1, 'release-1-0')
  #   Gitlab.protect_repository_tag(1, 'release-1-0', create_access_level: 30)
  # @option options
  # @param project(required) [Integer, String] The ID or name of a project.
  # @param name(required) [String] The name of the tag or wildcard
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Information about the protected repository tag
  #
  # source://gitlab//lib/gitlab/client/protected_tags.rb#42
  def protect_repository_tag(project, name, options = T.unsafe(nil)); end

  # Gets a single protected tag or wildcard protected tag.
  #
  # @example
  #   Gitlab.protected_tag(1, 'release-1-0')
  # @param project(required) [Integer, String] The ID or name of a project.
  # @param name(required) [String] The name of the tag or wildcard
  # @return [Gitlab::ObjectifiedHash] Information about the requested protected tag
  #
  # source://gitlab//lib/gitlab/client/protected_tags.rb#28
  def protected_tag(project, name); end

  # Gets a list of protected tags from a project
  #
  # @example
  #   Gitlab.protected_tags(1)
  # @option options
  # @option options
  # @param project(required) [Integer, String] The ID or name of a project.
  # @param options [Hash] a customizable set of options
  # @return [Array<Gitlab::ObjectifiedHash>] List of all protected tags requested
  #
  # source://gitlab//lib/gitlab/client/protected_tags.rb#16
  def protected_tags(project, options = T.unsafe(nil)); end

  # Unprotects the given protected tag or wildcard protected tag.
  #
  # @example
  #   Gitlab.unprotect_repository_tag(1, 'release-1-0')
  # @param project(required) [Integer, String] The ID or name of a project.
  # @param name(required) [String] The name of the tag or wildcard
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/protected_tags.rb#55
  def unprotect_repository_tag(project, name); end
end

# Defines methods related to remote mirrors.
#
# @see https://docs.gitlab.com/ee/api/remote_mirrors.html
#
# source://gitlab//lib/gitlab/client/remote_mirrors.rb#6
module Gitlab::Client::RemoteMirrors
  # Create a remote mirror
  #
  # @example
  #   Gitlab.create_remote_mirror(42, 'https://mirror-bot@gitlab.com/gitlab-org/gitlab.git', enabled: true)
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param url [String] The full URL of the remote repository.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/remote_mirrors.rb#31
  def create_remote_mirror(project, url, options = T.unsafe(nil)); end

  # Update a remote mirror's attributes
  #
  # @example
  #   Gitlab.edit_remote_mirror(42, 66, only_protected_branches: true)
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of the remote mirror.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/remote_mirrors.rb#47
  def edit_remote_mirror(project, id, options = T.unsafe(nil)); end

  # List a project's remote mirrors
  #
  # @example
  #   Gitlab.remote_mirrors(42)
  #   Gitlab.remote_mirrors('gitlab-org/gitlab')
  # @param project [Integer, String] The ID or name of a project.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/remote_mirrors.rb#15
  def remote_mirrors(project); end
end

# Defines methods related to repositories.
#
# @see https://docs.gitlab.com/ce/api/repositories.html
#
# source://gitlab//lib/gitlab/client/repositories.rb#6
module Gitlab::Client::Repositories
  # Compares branches, tags or commits.
  #
  # @example
  #   Gitlab.compare(42, 'master', 'feature/branch')
  #   Gitlab.repo_compare(42, 'master', 'feature/branch')
  # @param project [Integer] The ID of a project.
  # @param from [String] The commit SHA or branch name of from branch.
  # @param to [String] The commit SHA or branch name of to branch.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#58
  def compare(project, from, to); end

  # Get project repository contributors.
  #
  # @example
  #   Gitlab.contributors(42)
  #   Gitlab.contributors(42, { order: 'name' })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#87
  def contributors(project, options = T.unsafe(nil)); end

  # Generate changelog data
  #
  # @example
  #   Gitlab.generate_changelog(42, 'v1.0.0')
  #   Gitlab.generate_changelog(42, 'v1.0.0', branch: 'main')
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project
  # @param version [String] The version to generate the changelog for
  # @param options [Hash] A customizable set of options
  # @return [bool]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#109
  def generate_changelog(project, version, options = T.unsafe(nil)); end

  # Get changelog data
  #
  # @example
  #   Gitlab.get_changelog(42, 'v1.0.0')
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project
  # @param version [String] The version to generate the changelog for
  # @param options [Hash] A customizable set of options
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#126
  def get_changelog(project, version, options = T.unsafe(nil)); end

  # Get the common ancestor for 2 refs (commit SHAs, branch names or tags).
  #
  # @example
  #   Gitlab.merge_base(42, ['master', 'feature/branch'])
  #   Gitlab.merge_base(42, ['master', 'feature/branch'])
  # @param project [Integer, String] The ID or URL-encoded path of the project.
  # @param refs [Array] Array containing 2 commit SHAs, branch names, or tags.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#72
  def merge_base(project, refs); end

  # Get project repository archive
  #
  # @example
  #   Gitlab.repo_archive(42)
  #   Gitlab.repo_archive(42, 'deadbeef')
  # @param project [Integer, String] The ID or name of a project.
  # @param ref [String] The commit sha, branch, or tag to download.
  # @param format [String] The archive format. Options are: tar.gz (default), tar.bz2, tbz, tbz2, tb2, bz2, tar, and zip
  # @return [Gitlab::FileResponse]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#34
  def repo_archive(project, ref = T.unsafe(nil), format = T.unsafe(nil)); end

  # Compares branches, tags or commits.
  #
  # @example
  #   Gitlab.compare(42, 'master', 'feature/branch')
  #   Gitlab.repo_compare(42, 'master', 'feature/branch')
  # @param project [Integer] The ID of a project.
  # @param from [String] The commit SHA or branch name of from branch.
  # @param to [String] The commit SHA or branch name of to branch.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#58
  def repo_compare(project, from, to); end

  # Get project repository contributors.
  #
  # @example
  #   Gitlab.contributors(42)
  #   Gitlab.contributors(42, { order: 'name' })
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#87
  def repo_contributors(project, options = T.unsafe(nil)); end

  # Get file tree project (root level).
  #
  # @example
  #   Gitlab.tree(42)
  #   Gitlab.tree(42, { path: 'Gemfile' })
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#19
  def repo_tree(project, options = T.unsafe(nil)); end

  # Get file tree project (root level).
  #
  # @example
  #   Gitlab.tree(42)
  #   Gitlab.tree(42, { path: 'Gemfile' })
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repositories.rb#19
  def tree(project, options = T.unsafe(nil)); end
end

# Defines methods related to repository files.
#
# @see https://docs.gitlab.com/ce/api/repository_files.html
#
# source://gitlab//lib/gitlab/client/repository_files.rb#8
module Gitlab::Client::RepositoryFiles
  # Creates a new repository file.
  #
  # @example
  #   Gitlab.create_file(42, "path", "branch", "content", "commit message")
  # @option options
  # @option options
  # @param content [String] file content.
  # @param commit_message [String] ...commit message.
  # @param options [Hash] Optional additional details for commit
  # @param branch [String] the name of the branch.
  # @param project [Integer, String] The ID or name of a project.
  # @param path [String] full path to new file.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repository_files.rb#73
  def create_file(project, path, branch, content, commit_message, options = T.unsafe(nil)); end

  # Edits an existing repository file.
  #
  # @example
  #   Gitlab.edit_file(42, "path", "branch", "content", "commit message")
  # @option options
  # @option options
  # @param content [String] new file content.
  # @param commit_message [String] ...commit message.
  # @param options [Hash] Optional additional details for commit
  # @param branch [String] the name of the branch to commit changes to.
  # @param project [Integer, String] The ID or name of a project.
  # @param path [String] full path of file to update.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repository_files.rb#94
  def edit_file(project, path, branch, content, commit_message, options = T.unsafe(nil)); end

  # Get the contents of a file
  #
  # @example
  #   Gitlab.file_contents(42, 'Gemfile')
  #   Gitlab.repo_file_contents(3, 'Gemfile', 'ed899a2f4b50b4370feeea94676502b42383c746')
  # @param project [Integer, String] The ID or name of a project.
  # @param filepath [String] The relative path of the file in the repository
  # @param ref [String] The name of a repository branch or tag or if not given the default branch.
  # @return [String]
  #
  # source://gitlab//lib/gitlab/client/repository_files.rb#19
  def file_contents(project, filepath, ref = T.unsafe(nil)); end

  # Gets a repository file.
  #
  # @example
  #   Gitlab.get_file(42, "README.md", "master")
  # @param project [Integer, String] The ID or name of a project.
  # @param file_path [String] The full path of the file.
  # @param ref [String] The name of branch, tag or commit.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repository_files.rb#53
  def get_file(project, file_path, ref); end

  # Get file blame from repository
  #
  # @example
  #   Gitlab.get_file_blame(42, "README.md", "master")
  # @param project [Integer, String] The ID or name of a project.
  # @param file_path [String] The full path of the file.
  # @param ref [String] The name of branch, tag or commit.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repository_files.rb#38
  def get_file_blame(project, file_path, ref); end

  # Removes an existing repository file.
  #
  # @example
  #   Gitlab.remove_file(42, "path", "branch", "commit message")
  # @option options
  # @option options
  # @param commit_message [String] ...a commit message ;)
  # @param options [Hash] Optional additional details for commit
  # @param path [String] full path of file to delete.
  # @param project [Integer, String] The ID or name of a project.
  # @param branch [String] the name of the branch to commit the deletion to.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repository_files.rb#114
  def remove_file(project, path, branch, commit_message, options = T.unsafe(nil)); end

  # Get the contents of a file
  #
  # @example
  #   Gitlab.file_contents(42, 'Gemfile')
  #   Gitlab.repo_file_contents(3, 'Gemfile', 'ed899a2f4b50b4370feeea94676502b42383c746')
  # @param project [Integer, String] The ID or name of a project.
  # @param filepath [String] The relative path of the file in the repository
  # @param ref [String] The name of a repository branch or tag or if not given the default branch.
  # @return [String]
  #
  # source://gitlab//lib/gitlab/client/repository_files.rb#19
  def repo_file_contents(project, filepath, ref = T.unsafe(nil)); end

  private

  # source://gitlab//lib/gitlab/client/repository_files.rb#124
  def encoded_content_attributes(content); end
end

# Defines methods related to repository submodules.
#
# @see https://docs.gitlab.com/ce/api/repository_submodules.html
#
# source://gitlab//lib/gitlab/client/repository_submodules.rb#6
module Gitlab::Client::RepositorySubmodules
  # Edits an existing repository submodule.
  #
  # @example
  #   Gitlab.edit_file(42, "submodule", {
  #   branch: "branch",
  #   commit_sha: "3ddec28ea23acc5caa5d8331a6ecb2a65fc03e88",
  #   commit_message: "commit message"
  #   })
  # @param project [Integer, String] The ID or name of a project.
  # @param submodule [String] full path of submodule to update.
  # @param options [Hash] A customizable set of options.
  # @param options [String] :commit_sha commit SHA to update the submodule to.
  # @param options [String] :commit_message commit message text.
  # @param options [String] :branch the name of the branch to commit changes to.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/repository_submodules.rb#23
  def edit_submodule(project, submodule, options = T.unsafe(nil)); end
end

# Defines methods related to resource label events.
#
# @see https://docs.gitlab.com/ee/api/resource_label_events.html
#
# source://gitlab//lib/gitlab/client/resource_label_events.rb#6
module Gitlab::Client::ResourceLabelEvents
  # Returns a single label event for a specific group epic
  #
  # @example
  #   Gitlab.epic_label_event(5, 42, 1)
  # @param group [Integer, String] The ID or name of a group.
  # @param epic_id [Integer] The ID of an epic.
  # @param id [Integer] The ID of a label event.
  # @return Gitlab::ObjectifiedHash
  #
  # source://gitlab//lib/gitlab/client/resource_label_events.rb#53
  def epic_label_event(group, epic_id, id); end

  # Gets a list of all label events for a single epic.
  #
  # @example
  #   Gitlab.epic_label_events(5, 42)
  # @param group [Integer, String] The ID or name of a group.
  # @param epic_id [Integer] The ID of an epic.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/resource_label_events.rb#40
  def epic_label_events(group, epic_id); end

  # Returns a single label event for a specific project issue
  #
  # @example
  #   Gitlab.issue_label_event(5, 42, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param issue_iid [Integer] The IID of an issue.
  # @param id [Integer] The ID of a label event.
  # @return Gitlab::ObjectifiedHash
  #
  # source://gitlab//lib/gitlab/client/resource_label_events.rb#28
  def issue_label_event(project, issue_iid, id); end

  # Gets a list of all label events for a single issue.
  #
  # @example
  #   Gitlab.issue_label_events(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param issue_iid [Integer] The IID of an issue.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/resource_label_events.rb#15
  def issue_label_events(project, issue_iid); end

  # Returns a single label event for a specific project merge request
  #
  # @example
  #   Gitlab.merge_request_label_event(5, 42, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param merge_request_iid [Integer] The IID of an merge request.
  # @param id [Integer] The ID of a label event.
  # @return Gitlab::ObjectifiedHash
  #
  # source://gitlab//lib/gitlab/client/resource_label_events.rb#78
  def merge_request_label_event(project, merge_request_iid, id); end

  # Gets a list of all label events for a single merge request.
  #
  # @example
  #   Gitlab.merge_request_label_events(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param merge_request_iid [Integer] The IID of a merge request.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/resource_label_events.rb#65
  def merge_request_label_events(project, merge_request_iid); end
end

# Defines methods related to resource state events.
#
# @see https://docs.gitlab.com/ee/api/resource_state_events.html
#
# source://gitlab//lib/gitlab/client/resource_state_events.rb#6
module Gitlab::Client::ResourceStateEvents
  # Returns a single state event for a specific project issue
  #
  # @example
  #   Gitlab.issue_state_event(5, 42, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param issue_iid [Integer] The IID of an issue.
  # @param id [Integer] The ID of a resource event.
  # @return Gitlab::ObjectifiedHash
  #
  # source://gitlab//lib/gitlab/client/resource_state_events.rb#28
  def issue_state_event(project, issue_iid, id); end

  # Gets a list of all state events for a single issue.
  #
  # @example
  #   Gitlab.issue_state_events(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param issue_iid [Integer] The IID of an issue.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/resource_state_events.rb#15
  def issue_state_events(project, issue_iid); end

  # Returns a single state event for a specific project merge request
  #
  # @example
  #   Gitlab.merge_request_state_event(5, 42, 1)
  # @param project [Integer, String] The ID or name of a project.
  # @param merge_request_iid [Integer] The IID of an merge request.
  # @param id [Integer] The ID of a state event.
  # @return Gitlab::ObjectifiedHash
  #
  # source://gitlab//lib/gitlab/client/resource_state_events.rb#53
  def merge_request_state_event(project, merge_request_iid, id); end

  # Gets a list of all state events for a single merge request.
  #
  # @example
  #   Gitlab.merge_request_state_events(5, 42)
  # @param project [Integer, String] The ID or name of a project.
  # @param merge_request_iid [Integer] The IID of a merge request.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/resource_state_events.rb#40
  def merge_request_state_events(project, merge_request_iid); end
end

# Defines methods related to runners.
#
# @see https://docs.gitlab.com/ce/api/runners.html
#
# source://gitlab//lib/gitlab/client/runners.rb#6
module Gitlab::Client::Runners
  # Get a list of all runners in the GitLab instance (specific and shared). Access is restricted to users with admin privileges.
  #
  # @example
  #   Gitlab.all_runners
  #   Gitlab.all_runners(type: 'instance_type', status: 'active')
  #   Gitlab.all_runners(tag_list: 'tag1,tag2')
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/runners.html#list-all-runners
  #
  # source://gitlab//lib/gitlab/client/runners.rb#37
  def all_runners(options = T.unsafe(nil)); end

  # Creates a new group runner with the new Gitlab approach (v16.0+) and returns the id/token information
  # https://docs.gitlab.com/ee/api/users.html#create-a-runner
  # You must use an access token with the create_runner scope
  #
  # @example
  #   Gitlab.create_group_runner(9, tag_list: ['one', 'two'])
  #   Gitlab.create_group_runner(9, paused: false, description: 'A note', run_untagged: true)
  # @param group(required) [String] Group ID.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Response against runner registration
  #
  # source://gitlab//lib/gitlab/client/runners.rb#222
  def create_group_runner(group, options = T.unsafe(nil)); end

  # Creates a new instance runner with the new Gitlab approach (v16.0+) and returns the id/token information
  # You must be an administrator of the GitLab instance
  # You must use an access token with the create_runner scope
  # https://docs.gitlab.com/ee/api/users.html#create-a-runner
  #
  # @example
  #   Gitlab.create_instance_runner(tag_list: ['one', 'two'])
  #   Gitlab.create_instance_runner(paused: false, description: 'A note', run_untagged: true)
  # @param group(required) [String] Project ID.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Response against runner registration
  #
  # source://gitlab//lib/gitlab/client/runners.rb#253
  def create_instance_runner(options = T.unsafe(nil)); end

  # Creates a new project runner with the new Gitlab approach (v16.0+) and returns the id/token information
  # https://docs.gitlab.com/ee/api/users.html#create-a-runner
  # You must use an access token with the create_runner scope
  #
  # @example
  #   Gitlab.create_project_runner(12, tag_list: ['one', 'two'])
  #   Gitlab.create_project_runner(12, paused: false, description: 'A note', run_untagged: true)
  # @param project(required) [String] Project ID.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Response against runner registration
  #
  # source://gitlab//lib/gitlab/client/runners.rb#237
  def create_project_runner(project, options = T.unsafe(nil)); end

  # Deletes a registed Runner.
  #
  # @example
  #   Gitlab.delete_registered_runner('9142c16ea169eaaea3d752313a434a6e')
  # @param token [String] Runner authentication token.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/runners.rb#194
  def delete_registered_runner(token); end

  # Remove a runner.
  #
  # @example
  #   Gitlab.delete_runner(42)
  # @param id [Integer, String] The ID of a runner
  # @return [nil] This API call returns an empty response body.
  # @see https://docs.gitlab.com/ce/api/runners.html#remove-a-runner
  #
  # source://gitlab//lib/gitlab/client/runners.rb#82
  def delete_runner(id); end

  # List all runners (specific and shared) available in the group as well its ancestor groups. Shared runners are listed if at least one shared runner is defined.
  #
  # @example
  #   Gitlab.group_runners(9)
  #   Gitlab.group_runners(9, type: 'instance_type', status: 'active')
  #   Gitlab.group_runners(9, tag_list: 'tag1,tag2')
  # @option options
  # @option options
  # @option options
  # @param id [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ee/api/runners.html#list-groups-runners
  #
  # source://gitlab//lib/gitlab/client/runners.rb#162
  def group_runners(group, options = T.unsafe(nil)); end

  # Disable a specific runner from the project. It works only if the project isn't the only project associated with the specified runner.
  #
  # @example
  #   Gitlab.project_disable_runner(2, 42)
  # @param id [Integer, String] The ID or name of a project.
  # @param runner_id [Integer, String] The ID of a runner.
  # @return [Gitlab::ObjectifiedHash]
  # @see https://docs.gitlab.com/ce/api/runners.html#disable-a-runner-from-project
  #
  # source://gitlab//lib/gitlab/client/runners.rb#144
  def project_disable_runner(id, runner_id); end

  # Enable an available specific runner in the project.
  #
  # @example
  #   Gitlab.project_enable_runner(2, 42)
  # @param id [Integer, String] The ID or name of a project.
  # @param id [Integer, String] The ID of a runner.
  # @return [Gitlab::ObjectifiedHash]
  # @see https://docs.gitlab.com/ce/api/runners.html#enable-a-runner-in-project
  #
  # source://gitlab//lib/gitlab/client/runners.rb#130
  def project_enable_runner(project_id, id); end

  # List all runners (specific and shared) available in the project. Shared runners are listed if at least one shared runner is defined and shared runners usage is enabled in the project's settings.
  #
  # @example
  #   Gitlab.project_runners(42)
  #   Gitlab.project_runners(42, type: 'instance_type', status: 'active')
  #   Gitlab.project_runners(42, tag_list: 'tag1,tag2')
  # @option options
  # @option options
  # @option options
  # @param id [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/runners.html#list-projects-runners
  #
  # source://gitlab//lib/gitlab/client/runners.rb#117
  def project_runners(project_id, options = T.unsafe(nil)); end

  # Register a new Runner for the instance.
  #
  # @example
  #   Gitlab.register_runner('9142c16ea169eaaea3d752313a434a6e')
  #   Gitlab.register_runner('9142c16ea169eaaea3d752313a434a6e', description: 'Some Description', active: true, locked: false)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param token(required) [String] Registration token.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Response against runner registration
  #
  # source://gitlab//lib/gitlab/client/runners.rb#182
  def register_runner(token, options = T.unsafe(nil)); end

  # Get details of a runner..
  #
  # @example
  #   Gitlab.runner(42)
  # @param id [Integer, String] The ID of a runner
  # @return [Gitlab::ObjectifiedHash]
  # @see https://docs.gitlab.com/ce/api/runners.html#get-runners-details
  #
  # source://gitlab//lib/gitlab/client/runners.rb#49
  def runner(id); end

  # List jobs that are being processed or were processed by specified runner.
  #
  # @example
  #   Gitlab.runner_jobs(1)
  #   Gitlab.runner_jobs(1, status: 'success')
  #   Gitlab.runner_jobs(1, sort: 'desc')
  # @option options
  # @option options
  # @option options
  # @param id [Integer] The ID of a runner.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/runners.rb#99
  def runner_jobs(runner_id, options = T.unsafe(nil)); end

  # Get a list of specific runners available to the user.
  #
  # @example
  #   Gitlab.runners
  #   Gitlab.runners(type: 'instance_type', status: 'active')
  #   Gitlab.runners(tag_list: 'tag1,tag2')
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/runners.html#list-owned-runners
  #
  # source://gitlab//lib/gitlab/client/runners.rb#20
  def runners(options = T.unsafe(nil)); end

  # Update details of a runner.
  #
  # @example
  #   Gitlab.update_runner(42, { description: 'Awesome runner' })
  #   Gitlab.update_runner(42, { active: false })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer, String] The ID of a runner
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  # @see https://docs.gitlab.com/ce/api/runners.html#update-runners-details
  #
  # source://gitlab//lib/gitlab/client/runners.rb#70
  def update_runner(id, options = T.unsafe(nil)); end

  # Validates authentication credentials for a registered Runner.
  #
  # @example
  #   Gitlab.verify_auth_registered_runner('9142c16ea169eaaea3d752313a434a6e')
  # @param token [String] Runner authentication token.
  # @return [nil] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/runners.rb#206
  def verify_auth_registered_runner(token); end

  private

  # Creates a runner linked to the current user.
  # You must use an access token with the create_runner scope
  # https://docs.gitlab.com/ee/api/users.html#create-a-runner
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options(required) [Hash] A customizable set of options.
  # @param options [Hash] a customizable set of options
  # @return [Gitlab::ObjectifiedHash] Response against runner registration {"id": 1, "token": foo "token_expires_at": null}
  #
  # source://gitlab//lib/gitlab/client/runners.rb#274
  def create_runner(options); end
end

# Defines methods related to global searches, searching in projects and searching in groups.
#
# @see https://docs.gitlab.com/ce/api/search.html
#
# source://gitlab//lib/gitlab/client/search.rb#6
module Gitlab::Client::Search
  # Search globally across the GitLab instance.
  #
  # @example
  #   Gitlab.search_globally('projects', 'gitlab')
  #   Gitlab.search_globally('issues', 'gitlab')
  #   Gitlab.search_globally('merge_requests', 'gitlab')
  #   Gitlab.search_globally('milestones', 'gitlab')
  #   Gitlab.search_globally('snippet_titles', 'gitlab')
  #   Gitlab.search_globally('snippet_blobs', 'gitlab')
  # @param scope [String] The scope to search in. Currently these scopes are supported: projects, issues, merge_requests, milestones, snippet_titles, snippet_blobs.
  # @param search [String] The search query.
  # @return [Array<Gitlab::ObjectifiedHash>] Returns a list of responses depending on the requested scope.
  #
  # source://gitlab//lib/gitlab/client/search.rb#20
  def search_globally(scope, search); end

  # Search within the specified group.
  #
  # @example
  #   Gitlab.search_in_group(1, 'projects', 'gitlab')
  #   Gitlab.search_in_group(1, 'issues', 'gitlab')
  #   Gitlab.search_in_group(1, 'merge_requests', 'gitlab')
  #   Gitlab.search_in_group(1, 'milestones', 'gitlab')
  # @param group [Integer, String] The ID or name of a group.
  # @param scope [String] The scope to search in. Currently these scopes are supported: projects, issues, merge_requests, milestones.
  # @param search [String] The search query.
  # @return [Array<Gitlab::ObjectifiedHash>] Returns a list of responses depending on the requested scope.
  #
  # source://gitlab//lib/gitlab/client/search.rb#37
  def search_in_group(group, scope, search); end

  # Search within the specified project.
  #
  # @example
  #   Gitlab.search_in_project(1, 'issues', 'gitlab')
  #   Gitlab.search_in_project(1, 'merge_requests', 'gitlab')
  #   Gitlab.search_in_project(1, 'milestones', 'gitlab')
  #   Gitlab.search_in_project(1, 'notes', 'gitlab')
  #   Gitlab.search_in_project(1, 'wiki_blobs', 'gitlab')
  #   Gitlab.search_in_project(1, 'commits', 'gitlab')
  #   Gitlab.search_in_project(1, 'blobs', 'gitlab')
  # @param project [Integer, String] The ID or name of a project.
  # @param scope [String] The scope to search in. Currently these scopes are supported: issues, merge_requests, milestones, notes, wiki_blobs, commits, blobs.
  # @param search [String] The search query.
  # @return [Array<Gitlab::ObjectifiedHash>] Returns a list of responses depending on the requested scope.
  #
  # source://gitlab//lib/gitlab/client/search.rb#57
  def search_in_project(project, scope, search, ref = T.unsafe(nil)); end
end

# Third party services connected to a project.
#
# @see https://docs.gitlab.com/ce/api/services.html
#
# source://gitlab//lib/gitlab/client/services.rb#6
module Gitlab::Client::Services
  # Create/Edit service
  # Full service params documentation: https://github.com/gitlabhq/gitlabhq/blob/master/doc/api/services.md
  #
  # @example
  #   Gitlab.change_service(42, :redmine, { new_issue_url: 'https://example.com/projects/test_project/issues/new',
  #   project_url: 'https://example.com/projects/test_project/issues',
  #   issues_url: 'https://example.com/issues/:id' })
  # @param project [Integer, String] The ID or name of a project.
  # @param service [String] A service code name.
  # @param params [Hash] A service parameters.
  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/client/services.rb#19
  def change_service(project, service, params); end

  # Delete service
  #
  # @example
  #   Gitlab.delete_service(42, :redmine)
  # @param project [Integer, String] The ID or name of a project.
  # @param service [String] A service code name.
  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/client/services.rb#31
  def delete_service(project, service); end

  # Get service
  #
  # @example
  #   Gitlab.service(42, :redmine)
  # @param project [Integer, String] The ID or name of a project.
  # @param service [String] A service code name.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/services.rb#43
  def service(project, service); end

  private

  # source://gitlab//lib/gitlab/client/services.rb#49
  def correct_service_name(service); end
end

# Defines methods related to sidekiq metrics.
#
# @see https://docs.gitlab.com/ce/api/sidekiq_metrics.html
#
# source://gitlab//lib/gitlab/client/sidekiq.rb#6
module Gitlab::Client::Sidekiq
  # Get a compound response of all the previously mentioned metrics
  #
  # @example
  #   Gitlab.sidekiq_compound_metrics
  #
  # source://gitlab//lib/gitlab/client/sidekiq.rb#35
  def sidekiq_compound_metrics; end

  # Get the current Job Statistics
  #
  # @example
  #   Gitlab.sidekiq_job_stats
  #
  # source://gitlab//lib/gitlab/client/sidekiq.rb#27
  def sidekiq_job_stats; end

  # Get the current Process Metrics
  #
  # @example
  #   Gitlab.sidekiq_process_metrics
  #
  # source://gitlab//lib/gitlab/client/sidekiq.rb#19
  def sidekiq_process_metrics; end

  # Get the current Queue Metrics
  #
  # @example
  #   Gitlab.sidekiq_queue_metrics
  #
  # source://gitlab//lib/gitlab/client/sidekiq.rb#11
  def sidekiq_queue_metrics; end
end

# Defines methods related to snippets.
#
# @see https://docs.gitlab.com/ce/api/project_snippets.html
#
# source://gitlab//lib/gitlab/client/snippets.rb#6
module Gitlab::Client::Snippets
  # Creates a new snippet.
  #
  # @example
  #   Gitlab.create_snippet(42, { title: 'REST', file_name: 'api.rb', code: 'some code', visibility: 'public'})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created snippet.
  #
  # source://gitlab//lib/gitlab/client/snippets.rb#46
  def create_snippet(project, options = T.unsafe(nil)); end

  # Deletes a snippet.
  #
  # @example
  #   Gitlab.delete_snippet(2, 14)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a snippet.
  # @return [Gitlab::ObjectifiedHash] Information about deleted snippet.
  #
  # source://gitlab//lib/gitlab/client/snippets.rb#76
  def delete_snippet(project, id); end

  # Updates a snippet.
  #
  # @example
  #   Gitlab.edit_snippet(42, 34, { file_name: 'README.txt' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a snippet.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated snippet.
  #
  # source://gitlab//lib/gitlab/client/snippets.rb#64
  def edit_snippet(project, id, options = T.unsafe(nil)); end

  # Gets information about a snippet.
  #
  # @example
  #   Gitlab.snippet(2, 14)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a snippet.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/snippets.rb#29
  def snippet(project, id); end

  # Returns raw project snippet content as plain text.
  #
  # @example
  #   Gitlab.snippet_content(2, 14)
  # @param project [Integer, String] The ID or name of a project.
  # @param id [Integer] The ID of a snippet.
  # @return [Gitlab::ObjectifiedHash] Information about deleted snippet.
  #
  # source://gitlab//lib/gitlab/client/snippets.rb#88
  def snippet_content(project, id); end

  # Gets a list of project's snippets.
  #
  # @example
  #   Gitlab.snippets(42)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/snippets.rb#17
  def snippets(project, options = T.unsafe(nil)); end
end

# Defines methods related to system hooks.
#
# @see https://docs.gitlab.com/ce/api/system_hooks.html
#
# source://gitlab//lib/gitlab/client/system_hooks.rb#6
module Gitlab::Client::SystemHooks
  # Adds a new system hook.
  #
  # @example
  #   Gitlab.add_hook('http://example.com/hook')
  #   Gitlab.add_system_hook('https://api.example.net/v1/hook')
  # @option options
  # @option options
  # @param url [String] The hook URL.
  # @param options [Hash] Additional options, as allowed by Gitlab API, including but not limited to:
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#33
  def add_hook(url, options = T.unsafe(nil)); end

  # Adds a new system hook.
  #
  # @example
  #   Gitlab.add_hook('http://example.com/hook')
  #   Gitlab.add_system_hook('https://api.example.net/v1/hook')
  # @option options
  # @option options
  # @param url [String] The hook URL.
  # @param options [Hash] Additional options, as allowed by Gitlab API, including but not limited to:
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#33
  def add_system_hook(url, options = T.unsafe(nil)); end

  # Deletes a new system hook.
  #
  # @example
  #   Gitlab.delete_hook(3)
  #   Gitlab.delete_system_hook(12)
  # @param id [Integer] The ID of a system hook.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#59
  def delete_hook(id); end

  # Deletes a new system hook.
  #
  # @example
  #   Gitlab.delete_hook(3)
  #   Gitlab.delete_system_hook(12)
  # @param id [Integer] The ID of a system hook.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#59
  def delete_system_hook(id); end

  # Tests a system hook.
  #
  # @example
  #   Gitlab.hook(3)
  #   Gitlab.system_hook(12)
  # @param id [Integer] The ID of a system hook.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#46
  def hook(id); end

  # Gets a list of system hooks.
  #
  # @example
  #   Gitlab.hooks
  #   Gitlab.system_hooks
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#17
  def hooks(options = T.unsafe(nil)); end

  # Tests a system hook.
  #
  # @example
  #   Gitlab.hook(3)
  #   Gitlab.system_hook(12)
  # @param id [Integer] The ID of a system hook.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#46
  def system_hook(id); end

  # Gets a list of system hooks.
  #
  # @example
  #   Gitlab.hooks
  #   Gitlab.system_hooks
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/system_hooks.rb#17
  def system_hooks(options = T.unsafe(nil)); end
end

# Defines methods related to tags.
#
# @see https://docs.gitlab.com/ce/api/tags.html
#
# source://gitlab//lib/gitlab/client/tags.rb#6
module Gitlab::Client::Tags
  # Adds release notes to an existing repository tag.  Requires Gitlab >= 8.2.0
  #
  # @example
  #   Gitlab.create_release(3, '1.0.0', 'This is ready for production')
  #   Gitlab.repo_create_release(5, '1.0.0', 'This is ready for production')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the new tag.
  # @param description [String] Release notes with markdown support
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#77
  def create_release(project, tag, description); end

  # Creates a new project repository tag.
  #
  # @example
  #   Gitlab.create_tag(42, 'new_tag', 'master')
  #   Gitlab.create_tag(42, 'v1.0', 'master', 'Release 1.0')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The name of the new tag.
  # @param ref [String] The ref (commit sha, branch name, or another tag) the tag will point to.
  # @param message [String] Optional message for tag, creates annotated tag if specified.
  # @param description [String] Optional release notes for tag.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#34
  def create_tag(project, tag_name, ref, message = T.unsafe(nil), description = T.unsafe(nil)); end

  # Deletes a repository tag.  Requires Gitlab >= 6.8.x
  #
  # @example
  #   Gitlab.delete_tag(3, 'api')
  #   Gitlab.repo_delete_tag(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the tag to delete
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#62
  def delete_tag(project, tag); end

  # Adds release notes to an existing repository tag.  Requires Gitlab >= 8.2.0
  #
  # @example
  #   Gitlab.create_release(3, '1.0.0', 'This is ready for production')
  #   Gitlab.repo_create_release(5, '1.0.0', 'This is ready for production')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the new tag.
  # @param description [String] Release notes with markdown support
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#77
  def repo_create_release(project, tag, description); end

  # Creates a new project repository tag.
  #
  # @example
  #   Gitlab.create_tag(42, 'new_tag', 'master')
  #   Gitlab.create_tag(42, 'v1.0', 'master', 'Release 1.0')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag_name [String] The name of the new tag.
  # @param ref [String] The ref (commit sha, branch name, or another tag) the tag will point to.
  # @param message [String] Optional message for tag, creates annotated tag if specified.
  # @param description [String] Optional release notes for tag.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#34
  def repo_create_tag(project, tag_name, ref, message = T.unsafe(nil), description = T.unsafe(nil)); end

  # Deletes a repository tag.  Requires Gitlab >= 6.8.x
  #
  # @example
  #   Gitlab.delete_tag(3, 'api')
  #   Gitlab.repo_delete_tag(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the tag to delete
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#62
  def repo_delete_tag(project, tag); end

  # Gets information about a repository tag.
  #
  # @example
  #   Gitlab.tag(3, 'api')
  #   Gitlab.repo_tag(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the tag.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#48
  def repo_tag(project, tag); end

  # Gets a list of project repository tags.
  #
  # @example
  #   Gitlab.tags(42)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#17
  def repo_tags(project, options = T.unsafe(nil)); end

  # Updates the release notes of a given release.  Requires Gitlab >= 8.2.0
  #
  # @example
  #   Gitlab.update_release(3, '1.0.0', 'This is even more ready for production')
  #   Gitlab.repo_update_release(5, '1.0.0', 'This is even more ready for production')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the new tag.
  # @param description [String] Release notes with markdown support
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#92
  def repo_update_release(project, tag, description); end

  # Gets information about a repository tag.
  #
  # @example
  #   Gitlab.tag(3, 'api')
  #   Gitlab.repo_tag(5, 'master')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the tag.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#48
  def tag(project, tag); end

  # Gets a list of project repository tags.
  #
  # @example
  #   Gitlab.tags(42)
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#17
  def tags(project, options = T.unsafe(nil)); end

  # Updates the release notes of a given release.  Requires Gitlab >= 8.2.0
  #
  # @example
  #   Gitlab.update_release(3, '1.0.0', 'This is even more ready for production')
  #   Gitlab.repo_update_release(5, '1.0.0', 'This is even more ready for production')
  # @param project [Integer, String] The ID or name of a project.
  # @param tag [String] The name of the new tag.
  # @param description [String] Release notes with markdown support
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/tags.rb#92
  def update_release(project, tag, description); end
end

# Defines methods related to templates.
#
# @see https://docs.gitlab.com/ce/api/templates/dockerfiles.html
# @see https://docs.gitlab.com/ce/api/templates/gitignores.html
# @see https://docs.gitlab.com/ce/api/templates/gitlab_ci_ymls.html
# @see https://docs.gitlab.com/ce/api/templates/licenses.html
#
# source://gitlab//lib/gitlab/client/templates.rb#9
module Gitlab::Client::Templates
  # Get a single Dockerfile template.
  #
  # @example
  #   Gitlab.dockerfile_template('Binary')
  # @param key [String] The key of the Dockerfile template
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/templates.rb#27
  def dockerfile_template(key); end

  # Get all Dockerfile templates.
  #
  # @example
  #   Gitlab.dockerfile_templates
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/templates.rb#16
  def dockerfile_templates; end

  # Get a single gitignore template.
  #
  # @example
  #   Gitlab.gitignore_template('Ruby')
  # @param key [String] The key of the gitignore template
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/templates.rb#48
  def gitignore_template(key); end

  # Get all gitignore templates.
  #
  # @example
  #   Gitlab.gitignore_templates
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/templates.rb#37
  def gitignore_templates; end

  # Get a single `gitlab_ci.yml` template.
  #
  # @example
  #   Gitlab.gitlab_ci_yml_template('Ruby')
  # @param key [String] The key of the gitlab_ci_yml template
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/templates.rb#69
  def gitlab_ci_yml_template(key); end

  # Get all `gitlab_ci.yml` templates.
  #
  # @example
  #   Gitlab.gitlab_ci_yml_templates
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/templates.rb#58
  def gitlab_ci_yml_templates; end

  # source://gitlab//lib/gitlab/client/templates.rb#96
  def license_template(key, options = T.unsafe(nil)); end

  # source://gitlab//lib/gitlab/client/templates.rb#82
  def license_templates(options = T.unsafe(nil)); end
end

# Defines methods related to todos
#
# @see https://docs.gitlab.com/ce/api/todos.html
#
# source://gitlab//lib/gitlab/client/todos.rb#6
module Gitlab::Client::Todos
  # Marks all todos for the current user as done
  #
  # @example
  #   Gitlab.mark_all_todos_as_done
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/todos.rb#42
  def mark_all_todos_as_done; end

  # Marks a single pending todo for the current user as done.
  #
  # @example
  #   Gitlab.mark_todo_as_done(42)
  # @param id [Integer] The ID of the todo.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/todos.rb#32
  def mark_todo_as_done(id); end

  # Gets a list of todos.
  #
  # @example
  #   Gitlab.todos
  #   Gitlab.todos({ action: 'assigned' })
  #   Gitlab.todos({ state: 'pending' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/todos.rb#21
  def todos(options = T.unsafe(nil)); end
end

# Defines methods related to user snippets.
#
# @see https://docs.gitlab.com/ce/api/snippets.html
#
# source://gitlab//lib/gitlab/client/user_snippets.rb#6
module Gitlab::Client::UserSnippets
  # Create a new snippet.
  #
  # @example
  #   Gitlab.create_user_snippet({ title: 'REST', file_name: 'api.rb', content: 'some code', description: 'Hello World snippet', visibility: 'public'})
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created snippet.
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#54
  def create_user_snippet(options = T.unsafe(nil)); end

  # Delete an existing snippet.
  #
  # @example
  #   Gitlab.delete_user_snippet(14)
  # @param id [Integer] ID of snippet to delete.
  # @return [void] This API call returns an empty response body.
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#83
  def delete_user_snippet(id); end

  # Update an existing snippet.
  #
  # @example
  #   Gitlab.edit_user_snippet(34, { file_name: 'README.txt' })
  #   Gitlab.edit_user_snippet(34, { file_name: 'README.txt', title: 'New title' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer] ID of snippet to update.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated snippet.
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#72
  def edit_user_snippet(id, options = T.unsafe(nil)); end

  # List all public snippets.
  #
  # @example
  #   Gitlab.public_snippets
  #   Gitlab.public_snippets(per_page: 2, page: 1)
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>] List of all public snippets
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#98
  def public_snippets(options = T.unsafe(nil)); end

  # Get user agent details for a snippet.
  #
  # @example
  #   Gitlab.snippet_user_agent_details(1)
  # @param id [Integer] ID of snippet to delete.
  # @return [Array<Gitlab::ObjectifiedHash>] Details of the user agent
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#110
  def snippet_user_agent_details(id); end

  # Get a single snippet.
  #
  # @example
  #   Gitlab.user_snippet(1)
  # @param id [Integer] ID of snippet to retrieve.
  # @return [Gitlab::ObjectifiedHash] Information about the user snippet
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#24
  def user_snippet(id); end

  # Get raw contents of a single snippet.
  #
  # @example
  #   Gitlab.user_snippet_raw(1)
  # @param id [Integer] ID of snippet to retrieve.
  # @return [String] User snippet text
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#35
  def user_snippet_raw(id); end

  # Get a list of the snippets of the current user.
  #
  # @example
  #   Gitlab.user_snippets
  # @return [Array<Gitlab::ObjectifiedHash>] List of snippets of current user
  #
  # source://gitlab//lib/gitlab/client/user_snippets.rb#13
  def user_snippets; end
end

# Defines methods related to users.
#
# @see https://docs.gitlab.com/ce/api/users.html
# @see https://docs.gitlab.com/ce/api/session.html
#
# source://gitlab//lib/gitlab/client/users.rb#7
module Gitlab::Client::Users
  # Activate the specified user. Available only for admin.
  #
  # @example
  #   Gitlab.activate_user(15)
  # @param user_id [Integer] The Id of user
  # @return [Boolean] success or not
  #
  # source://gitlab//lib/gitlab/client/users.rb#147
  def activate_user(user_id); end

  # Gets a list of user activities (for admin access only).
  #
  # @example
  #   Gitlab.activities
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/users.rb#185
  def activities(options = T.unsafe(nil)); end

  # Creates a new email
  # Will create a new email an authorized user if no user ID passed.
  #
  # @example
  #   Gitlab.add_email('email@example.com')
  #   Gitlab.add_email('email@example.com', 2)
  # @param email [String] Email address
  # @param user_id [Integer] The ID of a user.
  # @param skip_confirmation [Boolean] Skip confirmation and assume e-mail is verified
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#293
  def add_email(email, user_id = T.unsafe(nil), skip_confirmation = T.unsafe(nil)); end

  # Creates a new custom_attribute
  #
  # @example
  #   Gitlab.add_custom_attribute('some_new_key', 'some_new_value', 2)
  # @param key [String] The custom_attributes key
  # @param value [String] The custom_attributes value
  # @param user_id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#377
  def add_user_custom_attribute(key, value, user_id); end

  # Approves the specified user. Available only for admin.
  #
  # @example
  #   Gitlab.approve_user(15)
  # @param user_id [Integer] The Id of user
  # @return [Boolean] success or not
  #
  # source://gitlab//lib/gitlab/client/users.rb#158
  def approve_user(user_id); end

  # Blocks the specified user. Available only for admin.
  #
  # @example
  #   Gitlab.block_user(15)
  # @param user_id [Integer] The Id of user
  # @return [Boolean] success or not
  #
  # source://gitlab//lib/gitlab/client/users.rb#114
  def block_user(user_id); end

  # Create personal access token
  #
  # @example
  #   Gitlab.create_personal_access_token(2, "token", ["api", "read_user"])
  #   Gitlab.create_personal_access_token(2, "token", ["api", "read_user"], "1970-01-01")
  # @param user_id [Integer] The ID of the user.
  # @param name [String] Name of the personal access token.
  # @param scopes [Array<String>] Array of scopes for the impersonation token
  # @param expires_at [String] Date for impersonation token expiration in ISO format.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#458
  def create_personal_access_token(user_id, name, scopes, expires_at = T.unsafe(nil)); end

  # Creates a service account.
  # Requires authentication from an admin account.
  #
  # @example
  #   Gitlab.create_service_account('service_account_6018816a18e515214e0c34c2b33523fc', 'Service account user')
  # @param name [String] (required) The email of the service account.
  # @param username [String] (required) The username of the service account.
  # @raise [ArgumentError]
  # @return [Gitlab::ObjectifiedHash] Information about created service account.
  #
  # source://gitlab//lib/gitlab/client/users.rb#70
  def create_service_account(*args); end

  # Creates a new SSH key.
  #
  # @example
  #   Gitlab.create_ssh_key('key title', 'key body')
  # @option options
  # @param title [String] The title of an SSH key.
  # @param key [String] The SSH key body.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created SSH key.
  #
  # source://gitlab//lib/gitlab/client/users.rb#230
  def create_ssh_key(title, key, options = T.unsafe(nil)); end

  # Creates a new user.
  # Requires authentication from an admin account.
  #
  # @example
  #   Gitlab.create_user('joe@foo.org', 'secret', 'joe', { name: 'Joe Smith' })
  #   or
  #   Gitlab.create_user('joe@foo.org', 'secret', 'joe')
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param email(required) [String] The email of a user.
  # @param password(required) [String] The password of a user.
  # @param username(required) [String] The username of a user.
  # @param options [Hash] A customizable set of options.
  # @raise [ArgumentError]
  # @return [Gitlab::ObjectifiedHash] Information about created user.
  #
  # source://gitlab//lib/gitlab/client/users.rb#52
  def create_user(*args); end

  # Create impersonation token
  #
  # @example
  #   Gitlab.create_user_impersonation_token(2, "token", ["api", "read_user"])
  #   Gitlab.create_user_impersonation_token(2, "token", ["api", "read_user"], "1970-01-01")
  # @param user_id [Integer] The ID of the user.
  # @param name [String] Name for impersonation token.
  # @param scopes [Array<String>] Array of scopes for the impersonation token
  # @param expires_at [String] Date for impersonation token expiration in ISO format.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#430
  def create_user_impersonation_token(user_id, name, scopes, expires_at = T.unsafe(nil)); end

  # Deactivates the specified user. Available only for admin.
  #
  # @example
  #   Gitlab.deactivate_user(15)
  # @param user_id [Integer] The Id of user
  # @return [Boolean] success or not
  #
  # source://gitlab//lib/gitlab/client/users.rb#136
  def deactivate_user(user_id); end

  # Delete email
  # Will delete a email an authorized user if no user ID passed.
  #
  # @example
  #   Gitlab.delete_email(2)
  #   Gitlab.delete_email(3, 2)
  # @param id [Integer] Email address ID
  # @param user_id [Integer] The ID of a user.
  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/client/users.rb#312
  def delete_email(id, user_id = T.unsafe(nil)); end

  # Deletes an SSH key.
  #
  # @example
  #   Gitlab.delete_ssh_key(1)
  # @option options
  # @param id [Integer] The ID of a user's SSH key.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about deleted SSH key.
  #
  # source://gitlab//lib/gitlab/client/users.rb#248
  def delete_ssh_key(id, options = T.unsafe(nil)); end

  # Deletes a user.
  #
  # @example
  #   Gitlab.delete_user(1)
  # @param id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash] Information about deleted user.
  #
  # source://gitlab//lib/gitlab/client/users.rb#103
  def delete_user(user_id); end

  # Delete custom_attribute
  # Will delete a custom_attribute
  #
  # @example
  #   Gitlab.delete_user_custom_attribute('somekey', 2)
  # @param key [String] The custom_attribute key to delete
  # @param user_id [Integer] The ID of a user.
  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/client/users.rb#391
  def delete_user_custom_attribute(key, user_id); end

  # Disables two factor authentication (2FA) for the specified user.
  #
  # @example
  #   Gitlab.disable_two_factor(1)
  # @param id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#517
  def disable_two_factor(user_id); end

  # Updates a user.
  #
  # @example
  #   Gitlab.edit_user(15, { email: 'joe.smith@foo.org', projects_limit: 20 })
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param id [Integer] The ID of a user.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created user.
  #
  # source://gitlab//lib/gitlab/client/users.rb#92
  def edit_user(user_id, options = T.unsafe(nil)); end

  # Get a single email.
  #
  # @example
  #   Gitlab.email(3)
  # @param id [Integer] The ID of a email.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#278
  def email(id); end

  # Gets user emails.
  # Will return emails an authorized user if no user ID passed.
  #
  # @example
  #   Gitlab.emails
  #   Gitlab.emails(2)
  # @param user_id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#266
  def emails(user_id = T.unsafe(nil)); end

  # Lists all projects and groups a user is a member of
  #
  # @example
  #   Gitlab.memberships(2)
  # @param user_id [Integer] The ID of the user.
  #
  # source://gitlab//lib/gitlab/client/users.rb#495
  def memberships(user_id); end

  # Revoke a personal access token
  #
  # @example
  #   Gitlab.revoke_personal_access_token(1)
  # @param personal_access_token_id [Integer] ID of the personal access token.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#506
  def revoke_personal_access_token(personal_access_token_id); end

  # Revoke an impersonation token
  #
  # @example
  #   Gitlab.revoke_user_impersonation_token(1, 1)
  # @param user_id [Integer] The ID of the user.
  # @param impersonation_token_id [Integer] ID of the impersonation token.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#485
  def revoke_user_impersonation_token(user_id, impersonation_token_id); end

  # Rotate a personal access token
  #
  # @example
  #   Gitlab.rotate_personal_access_token(1)
  # @param personal_access_token_id [Integer] ID of the personal access token.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#471
  def rotate_personal_access_token(personal_access_token_id, expires_at = T.unsafe(nil)); end

  # Creates a new user session.
  #
  # @example
  #   Gitlab.session('jack@example.com', 'secret12345')
  # @note This method doesn't require private_token to be set.
  # @param email [String] The email of a user.
  # @param password [String] The password of a user.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#171
  def session(email, password); end

  # Gets information about SSH key.
  #
  # @example
  #   Gitlab.ssh_key(1)
  # @param id [Integer] The ID of a user's SSH key.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#216
  def ssh_key(id); end

  # Gets a list of user's SSH keys.
  #
  # @example
  #   Gitlab.ssh_keys
  #   Gitlab.ssh_keys({ user_id: 2 })
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/users.rb#200
  def ssh_keys(options = T.unsafe(nil)); end

  # Unblocks the specified user. Available only for admin.
  #
  # @example
  #   Gitlab.unblock_user(15)
  # @param user_id [Integer] The Id of user
  # @return [Boolean] success or not
  #
  # source://gitlab//lib/gitlab/client/users.rb#125
  def unblock_user(user_id); end

  # Gets information about a user.
  # Will return information about an authorized user if no ID passed.
  #
  # @example
  #   Gitlab.user
  #   Gitlab.user(2)
  # @param id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#30
  def user(id = T.unsafe(nil)); end

  # Get user by username
  #
  # @example
  #   Gitlab.user_by_username('gitlab')
  # @param username [String] A username to get.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/users.rb#340
  def user_by_username(username, options = T.unsafe(nil)); end

  # Gets single user custom_attribute.
  #
  # @example
  #   Gitlab.user_custom_attribute(key, 2)
  # @param key [String] The custom_attributes key
  # @param user_id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#364
  def user_custom_attribute(key, user_id); end

  # Gets user custom_attributes.
  #
  # @example
  #   Gitlab.user_custom_attributes(2)
  # @param user_id [Integer] The ID of a user.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#352
  def user_custom_attributes(user_id); end

  # Get impersonation token information
  #
  # @example
  #   Gitlab.user_impersonation_token(1, 1)
  # @param user_id [Integer] The ID of the user.
  # @param impersonation_token_id [Integer] ID of the impersonation token.
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/users.rb#415
  def user_impersonation_token(user_id, impersonation_token_id); end

  # Get all impersonation tokens for a user
  #
  # @example
  #   Gitlab.user_impersonation_tokens(1)
  # @param user_id [Integer] The ID of the user.
  # @param state [String] Filter impersonation tokens by state {}
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/users.rb#403
  def user_impersonation_tokens(user_id); end

  # Get all personal access tokens for a user
  #
  # @example
  #   Gitlab.user_personal_access_tokens(1)
  # @param user_id [Integer] The ID of the user.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/users.rb#443
  def user_personal_access_tokens(user_id); end

  # Search for users by name
  #
  # @example
  #   Gitlab.user_search('gitlab')
  # @option options
  # @option options
  # @param search [String] A string to search for in user names and paths.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/users.rb#327
  def user_search(search, options = T.unsafe(nil)); end

  # Gets a list of users.
  #
  # @example
  #   Gitlab.users
  # @option options
  # @option options
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/users.rb#17
  def users(options = T.unsafe(nil)); end
end

# Defines methods related to version
#
# @see https://docs.gitlab.com/ce/api/version.html
#
# source://gitlab//lib/gitlab/client/versions.rb#6
module Gitlab::Client::Versions
  # Returns server version.
  #
  # @example
  #   Gitlab.version
  # @return [Array<Gitlab::ObjectifiedHash>]
  # @see https://docs.gitlab.com/ce/api/version.html
  #
  # source://gitlab//lib/gitlab/client/versions.rb#14
  def version; end
end

# Defines methods related to wikis.
#
# @see https://docs.gitlab.com/ce/api/wikis.html
#
# source://gitlab//lib/gitlab/client/wikis.rb#6
module Gitlab::Client::Wikis
  # Creates a new wiki page for the given repository with the given title, slug, and content.
  #
  # @example
  #   Gitlab.create_wiki(3, 'Some Title', 'Some Content')
  #   Gitlab.create_wiki(3, 'Some Title', 'Some Content', { format: 'rdoc' })
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param content [String] The content of the wiki page.
  # @param title [String] The title of the wiki page.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about created wiki page.
  #
  # source://gitlab//lib/gitlab/client/wikis.rb#45
  def create_wiki(project, title, content, options = T.unsafe(nil)); end

  # Deletes a wiki page with a given slug.
  #
  # @example
  #   Gitlab.delete_wiki(42, 'foo')
  # @param project [Integer, String] The ID or name of a project.
  # @param slug [String] The slug (a unique string) of the wiki page.
  # @return [Gitlab::ObjectifiedHash] An empty objectified hash
  #
  # source://gitlab//lib/gitlab/client/wikis.rb#75
  def delete_wiki(project, slug); end

  # Updates an existing wiki page. At least one parameter is required to update the wiki page.
  #
  # @example
  #   Gitlab.update_wiki(6, 'home', { title: 'New title' })
  #   Gitlab.update_wiki(6, 'home', { title: 'New title', content: 'New Message', format: 'rdoc' })
  # @option options
  # @option options
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param slug [String] The slug (a unique string) of the wiki page.
  # @param options [Hash] A customizable set of options.
  # @return [Gitlab::ObjectifiedHash] Information about updated wiki page.
  #
  # source://gitlab//lib/gitlab/client/wikis.rb#63
  def update_wiki(project, slug, options = T.unsafe(nil)); end

  # Get a wiki page for a given project.
  #
  # @example
  #   Gitlab.wiki(3, 'home')
  # @param project [Integer, String] The ID or name of a project.
  # @param slug [String] The slug (a unique string) of the wiki page
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://gitlab//lib/gitlab/client/wikis.rb#29
  def wiki(project, slug); end

  # Get all wiki pages for a given project.
  #
  # @example
  #   Gitlab.wikis(3)
  #   Gitlab.wikis(3, {with_content: 'Some wiki content'})
  # @option options
  # @param project [Integer, String] The ID or name of a project.
  # @param options [Hash] A customizable set of options.
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://gitlab//lib/gitlab/client/wikis.rb#17
  def wikis(project, options = T.unsafe(nil)); end
end

# Defines constants and methods related to configuration.
#
# source://gitlab//lib/gitlab/configuration.rb#6
module Gitlab::Configuration
  # @private
  def auth_token=(_arg0); end

  # Convenience method to allow configuration options to be set in a block.
  #
  # @yield [_self]
  # @yieldparam _self [Gitlab::Configuration] the object that the method was called on
  #
  # source://gitlab//lib/gitlab/configuration.rb#25
  def configure; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def endpoint; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def endpoint=(_arg0); end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def httparty; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def httparty=(_arg0); end

  # Creates a hash of options and their values.
  #
  # source://gitlab//lib/gitlab/configuration.rb#30
  def options; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def private_token; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def private_token=(_arg0); end

  # Resets all configuration options to the defaults.
  #
  # source://gitlab//lib/gitlab/configuration.rb#37
  def reset; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def sudo; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def sudo=(_arg0); end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def user_agent; end

  # source://gitlab//lib/gitlab/configuration.rb#14
  def user_agent=(_arg0); end

  private

  # Allows HTTParty config to be specified in ENV using YAML hash.
  #
  # @raise [ArgumentError]
  #
  # source://gitlab//lib/gitlab/configuration.rb#48
  def get_httparty_config(options); end

  class << self
    # Sets all configuration options to their default values
    # when this module is extended.
    #
    # source://gitlab//lib/gitlab/configuration.rb#20
    def extended(base); end
  end
end

# The user agent that will be sent to the API endpoint if none is set.
#
# source://gitlab//lib/gitlab/configuration.rb#11
Gitlab::Configuration::DEFAULT_USER_AGENT = T.let(T.unsafe(nil), String)

# An array of valid keys in the options hash when configuring a Gitlab::API.
#
# source://gitlab//lib/gitlab/configuration.rb#8
Gitlab::Configuration::VALID_OPTIONS_KEYS = T.let(T.unsafe(nil), Array)

# source://gitlab//lib/gitlab/error.rb#4
module Gitlab::Error
  class << self
    # Returns error class that should be raised for this response. Returns nil
    # if the response status code is not 4xx or 5xx.
    #
    # @param response [HTTParty::Response] The response object.
    # @return [Class<Error::ResponseError>, nil]
    #
    # source://gitlab//lib/gitlab/error.rb#163
    def klass(response); end
  end
end

# Raised when API endpoint returns the HTTP status code 502.
#
# source://gitlab//lib/gitlab/error.rb#133
class Gitlab::Error::BadGateway < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 400.
#
# source://gitlab//lib/gitlab/error.rb#103
class Gitlab::Error::BadRequest < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 409.
#
# source://gitlab//lib/gitlab/error.rb#121
class Gitlab::Error::Conflict < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 522.
#
# source://gitlab//lib/gitlab/error.rb#139
class Gitlab::Error::ConnectionTimedOut < ::Gitlab::Error::ResponseError; end

# Custom error class for rescuing from all Gitlab errors.
#
# source://gitlab//lib/gitlab/error.rb#6
class Gitlab::Error::Error < ::StandardError; end

# Raised when API endpoint returns the HTTP status code 403.
#
# source://gitlab//lib/gitlab/error.rb#109
class Gitlab::Error::Forbidden < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 500.
#
# source://gitlab//lib/gitlab/error.rb#130
class Gitlab::Error::InternalServerError < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 405.
#
# source://gitlab//lib/gitlab/error.rb#115
class Gitlab::Error::MethodNotAllowed < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint credentials not configured.
#
# source://gitlab//lib/gitlab/error.rb#9
class Gitlab::Error::MissingCredentials < ::Gitlab::Error::Error; end

# Raised when API endpoint returns the HTTP status code 406.
#
# source://gitlab//lib/gitlab/error.rb#118
class Gitlab::Error::NotAcceptable < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 404.
#
# source://gitlab//lib/gitlab/error.rb#112
class Gitlab::Error::NotFound < ::Gitlab::Error::ResponseError; end

# Raised when impossible to parse response body.
#
# source://gitlab//lib/gitlab/error.rb#12
class Gitlab::Error::Parsing < ::Gitlab::Error::Error; end

# Custom error class for rescuing from HTTP response errors.
#
# source://gitlab//lib/gitlab/error.rb#15
class Gitlab::Error::ResponseError < ::Gitlab::Error::Error
  # @return [ResponseError] a new instance of ResponseError
  #
  # source://gitlab//lib/gitlab/error.rb#18
  def initialize(response); end

  # Additional error context returned by some API endpoints
  #
  # @return [String]
  #
  # source://gitlab//lib/gitlab/error.rb#40
  def error_code; end

  # Body content returned in the HTTP response
  #
  # @return [String]
  #
  # source://gitlab//lib/gitlab/error.rb#33
  def response_message; end

  # Status code returned in the HTTP response.
  #
  # @return [Integer]
  #
  # source://gitlab//lib/gitlab/error.rb#26
  def response_status; end

  private

  # Human friendly message.
  #
  # @return [String]
  #
  # source://gitlab//lib/gitlab/error.rb#53
  def build_error_message; end

  # Error keys vary across the API, find the first key that the parsed_response
  # object responds to and return that, otherwise return the original.
  #
  # source://gitlab//lib/gitlab/error.rb#63
  def check_error_keys(resp); end

  # Parse the body based on the classification of the body content type
  #
  # @return parsed response
  #
  # source://gitlab//lib/gitlab/error.rb#71
  def classified_response; end

  # Handle error response message in case of nested hashes
  #
  # source://gitlab//lib/gitlab/error.rb#88
  def handle_message(message); end
end

# source://gitlab//lib/gitlab/error.rb#16
Gitlab::Error::ResponseError::POSSIBLE_MESSAGE_KEYS = T.let(T.unsafe(nil), Array)

# HTTP status codes mapped to error classes.
#
# source://gitlab//lib/gitlab/error.rb#142
Gitlab::Error::STATUS_MAPPINGS = T.let(T.unsafe(nil), Hash)

# Raised when API endpoint returns the HTTP status code 503.
#
# source://gitlab//lib/gitlab/error.rb#136
class Gitlab::Error::ServiceUnavailable < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 429.
#
# source://gitlab//lib/gitlab/error.rb#127
class Gitlab::Error::TooManyRequests < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 401.
#
# source://gitlab//lib/gitlab/error.rb#106
class Gitlab::Error::Unauthorized < ::Gitlab::Error::ResponseError; end

# Raised when API endpoint returns the HTTP status code 422.
#
# source://gitlab//lib/gitlab/error.rb#124
class Gitlab::Error::Unprocessable < ::Gitlab::Error::ResponseError; end

# Wrapper class of file response.
#
# source://gitlab//lib/gitlab/file_response.rb#5
class Gitlab::FileResponse
  # @return [FileResponse] a new instance of FileResponse
  #
  # source://gitlab//lib/gitlab/file_response.rb#10
  def initialize(file); end

  # @return [bool] Always false
  #
  # source://gitlab//lib/gitlab/file_response.rb#15
  def empty?; end

  # Returns the value of attribute filename.
  #
  # source://gitlab//lib/gitlab/file_response.rb#8
  def filename; end

  # @return [String] Formatted string with the class name, object id and filename.
  #
  # source://gitlab//lib/gitlab/file_response.rb#26
  def inspect; end

  # source://gitlab//lib/gitlab/file_response.rb#30
  def method_missing(name, *args, &block); end

  # Parse filename from the 'Content Disposition' header.
  #
  # source://gitlab//lib/gitlab/file_response.rb#43
  def parse_headers!(headers); end

  # @return [Hash] A hash consisting of filename and io object
  #
  # source://gitlab//lib/gitlab/file_response.rb#20
  def to_h; end

  # @return [Hash] A hash consisting of filename and io object
  #
  # source://gitlab//lib/gitlab/file_response.rb#20
  def to_hash; end

  private

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/file_response.rb#38
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://gitlab//lib/gitlab/file_response.rb#6
Gitlab::FileResponse::HEADER_CONTENT_DISPOSITION = T.let(T.unsafe(nil), String)

# source://gitlab//lib/gitlab/headers/page_links.rb#4
module Gitlab::Headers; end

# Parses link header.
#
# @private
#
# source://gitlab//lib/gitlab/headers/page_links.rb#8
class Gitlab::Headers::PageLinks
  # @return [PageLinks] a new instance of PageLinks
  #
  # source://gitlab//lib/gitlab/headers/page_links.rb#16
  def initialize(headers); end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def first; end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def first=(_arg0); end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def last; end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def last=(_arg0); end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def next; end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def next=(_arg0); end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def prev; end

  # source://gitlab//lib/gitlab/headers/page_links.rb#14
  def prev=(_arg0); end

  private

  # source://gitlab//lib/gitlab/headers/page_links.rb#24
  def extract_links(header); end
end

# source://gitlab//lib/gitlab/headers/page_links.rb#10
Gitlab::Headers::PageLinks::DELIM_LINKS = T.let(T.unsafe(nil), String)

# source://gitlab//lib/gitlab/headers/page_links.rb#9
Gitlab::Headers::PageLinks::HEADER_LINK = T.let(T.unsafe(nil), String)

# source://gitlab//lib/gitlab/headers/page_links.rb#11
Gitlab::Headers::PageLinks::LINK_REGEX = T.let(T.unsafe(nil), Regexp)

# source://gitlab//lib/gitlab/headers/page_links.rb#12
Gitlab::Headers::PageLinks::METAS = T.let(T.unsafe(nil), Array)

# Parses total header.
#
# @private
#
# source://gitlab//lib/gitlab/headers/total.rb#8
class Gitlab::Headers::Total
  # @return [Total] a new instance of Total
  #
  # source://gitlab//lib/gitlab/headers/total.rb#14
  def initialize(headers); end

  # Returns the value of attribute total.
  #
  # source://gitlab//lib/gitlab/headers/total.rb#12
  def total; end

  # Sets the attribute total
  #
  # @param value the value to set the attribute total to.
  #
  # source://gitlab//lib/gitlab/headers/total.rb#12
  def total=(_arg0); end

  private

  # source://gitlab//lib/gitlab/headers/total.rb#22
  def extract_total(header_total); end
end

# source://gitlab//lib/gitlab/headers/total.rb#9
Gitlab::Headers::Total::HEADER_TOTAL = T.let(T.unsafe(nil), String)

# source://gitlab//lib/gitlab/headers/total.rb#10
Gitlab::Headers::Total::TOTAL_REGEX = T.let(T.unsafe(nil), Regexp)

# Converts hashes to the objects.
#
# source://gitlab//lib/gitlab/objectified_hash.rb#5
class Gitlab::ObjectifiedHash
  # Creates a new ObjectifiedHash object.
  #
  # @return [ObjectifiedHash] a new instance of ObjectifiedHash
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#7
  def initialize(hash); end

  # source://gitlab//lib/gitlab/objectified_hash.rb#27
  def [](key); end

  # @return [String] Formatted string with the class name, object id and original hash.
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#23
  def inspect; end

  # @return [Hash] The original hash.
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#17
  def to_h; end

  # @return [Hash] The original hash.
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#17
  def to_hash; end

  private

  # Returns the value of attribute data.
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#33
  def data; end

  # Returns the value of attribute hash.
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#33
  def hash; end

  # Respond to messages for which `self.data` has a key
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#36
  def method_missing(method_name, *args, &block); end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/objectified_hash.rb#47
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# Wrapper class of paginated response.
#
# source://gitlab//lib/gitlab/paginated_response.rb#5
class Gitlab::PaginatedResponse
  # @return [PaginatedResponse] a new instance of PaginatedResponse
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#8
  def initialize(array); end

  # source://gitlab//lib/gitlab/paginated_response.rb#12
  def ==(other); end

  # source://gitlab//lib/gitlab/paginated_response.rb#50
  def auto_paginate(&block); end

  # Returns the value of attribute client.
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#6
  def client; end

  # Sets the attribute client
  #
  # @param value the value to set the attribute client to.
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#6
  def client=(_arg0); end

  # source://gitlab//lib/gitlab/paginated_response.rb#110
  def client_relative_path(link); end

  # @yield [current]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#37
  def each_page; end

  # source://gitlab//lib/gitlab/paginated_response.rb#82
  def first_page; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#77
  def first_page?; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#77
  def has_first_page?; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#66
  def has_last_page?; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#88
  def has_next_page?; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#99
  def has_prev_page?; end

  # source://gitlab//lib/gitlab/paginated_response.rb#16
  def inspect; end

  # source://gitlab//lib/gitlab/paginated_response.rb#71
  def last_page; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#66
  def last_page?; end

  # source://gitlab//lib/gitlab/paginated_response.rb#46
  def lazy_paginate; end

  # source://gitlab//lib/gitlab/paginated_response.rb#20
  def method_missing(name, *args, &block); end

  # source://gitlab//lib/gitlab/paginated_response.rb#93
  def next_page; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#88
  def next_page?; end

  # source://gitlab//lib/gitlab/paginated_response.rb#56
  def paginate_with_limit(limit, &block); end

  # source://gitlab//lib/gitlab/paginated_response.rb#32
  def parse_headers!(headers); end

  # source://gitlab//lib/gitlab/paginated_response.rb#104
  def prev_page; end

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#99
  def prev_page?; end

  # source://gitlab//lib/gitlab/paginated_response.rb#62
  def total; end

  private

  # @return [Boolean]
  #
  # source://gitlab//lib/gitlab/paginated_response.rb#28
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# @private
#
# source://gitlab//lib/gitlab/request.rb#8
class Gitlab::Request
  include ::HTTParty
  include ::HTTParty::ModuleInheritableAttributes
  extend ::HTTParty::ClassMethods
  extend ::HTTParty::ModuleInheritableAttributes::ClassMethods

  # source://gitlab//lib/gitlab/request.rb#42
  def delete(path, options = T.unsafe(nil)); end

  # Returns the value of attribute endpoint.
  #
  # source://gitlab//lib/gitlab/request.rb#15
  def endpoint; end

  # Sets the attribute endpoint
  #
  # @param value the value to set the attribute endpoint to.
  #
  # source://gitlab//lib/gitlab/request.rb#15
  def endpoint=(_arg0); end

  # source://gitlab//lib/gitlab/request.rb#42
  def get(path, options = T.unsafe(nil)); end

  # source://gitlab//lib/gitlab/request.rb#42
  def patch(path, options = T.unsafe(nil)); end

  # source://gitlab//lib/gitlab/request.rb#42
  def post(path, options = T.unsafe(nil)); end

  # Returns the value of attribute private_token.
  #
  # source://gitlab//lib/gitlab/request.rb#15
  def private_token; end

  # Sets the attribute private_token
  #
  # @param value the value to set the attribute private_token to.
  #
  # source://gitlab//lib/gitlab/request.rb#15
  def private_token=(_arg0); end

  # source://gitlab//lib/gitlab/request.rb#42
  def put(path, options = T.unsafe(nil)); end

  # Sets a base_uri and default_params for requests.
  #
  # @raise [Error::MissingCredentials] if endpoint not set.
  #
  # source://gitlab//lib/gitlab/request.rb#81
  def request_defaults(sudo = T.unsafe(nil)); end

  # Checks the response code for common errors.
  # Returns parsed response for successful requests.
  #
  # @raise [error_klass]
  #
  # source://gitlab//lib/gitlab/request.rb#69
  def validate(response); end

  private

  # Returns an Authorization header hash
  #
  # @raise [Error::MissingCredentials] if private_token and auth_token are not set.
  #
  # source://gitlab//lib/gitlab/request.rb#93
  def authorization_header; end

  # Set HTTParty configuration
  #
  # @see https://github.com/jnunemaker/httparty
  #
  # source://gitlab//lib/gitlab/request.rb#105
  def httparty_config(options); end

  class << self
    # Decodes a JSON response into Ruby object.
    #
    # source://gitlab//lib/gitlab/request.rb#35
    def decode(response); end

    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#32
    def default_cookies; end

    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#32
    def default_cookies=(_arg0); end

    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#32
    def default_options; end

    # source://httparty/0.22.0/lib/httparty/module_inheritable_attributes.rb#32
    def default_options=(_arg0); end

    # Converts the response body to an ObjectifiedHash.
    #
    # source://gitlab//lib/gitlab/request.rb#18
    def parse(body); end
  end
end

# source://gitlab//lib/gitlab/version.rb#4
Gitlab::VERSION = T.let(T.unsafe(nil), String)
