# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `protobug_sigstore_protos` gem.
# Please instead update this file by running `bin/tapioca gem protobug_sigstore_protos`.


# source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#28
module Sigstore; end

# source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#38
module Sigstore::Bundle; end

# source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#39
module Sigstore::Bundle::V1
  class << self
    # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#233
    def register_sigstore_bundle_protos(registry); end
  end
end

# source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#169
class Sigstore::Bundle::V1::Bundle
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#219
  def clear_dsse_envelope; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#181
  def clear_media_type; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#205
  def clear_message_signature; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#197
  def clear_verification_material; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#205
  def content; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#219
  def dsse_envelope; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#219
  def dsse_envelope=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#219
  def dsse_envelope?; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#181
  def media_type; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#181
  def media_type=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#181
  def media_type?; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#205
  def message_signature; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#205
  def message_signature=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#205
  def message_signature?; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#197
  def verification_material; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#197
  def verification_material=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#197
  def verification_material?; end
end

# Various timestamped counter signatures over the artifacts signature.
# Currently only RFC3161 signatures are provided. More formats may be added
# in the future.
#
# source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#50
class Sigstore::Bundle::V1::TimestampVerificationData
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#60
  def add_rfc3161_timestamps(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#60
  def clear_rfc3161_timestamps; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#60
  def rfc3161_timestamps; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#60
  def rfc3161_timestamps=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#60
  def rfc3161_timestamps?; end
end

# VerificationMaterial captures details on the materials used to verify
# signatures. This message may be embedded in a DSSE envelope as a signature
# extension. Specifically, the `ext` field of the extension will expect this
# message when the signature extension is for Sigstore. This is identified by
# the `kind` field in the extension, which must be set to
# application/vnd.dev.sigstore.verificationmaterial;version=0.1 for Sigstore.
# When used as a DSSE extension, if the `public_key` field is used to indicate
# the key identifier, it MUST match the `keyid` field of the signature the
# extension is attached to.
#
# source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#78
class Sigstore::Bundle::V1::VerificationMaterial
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#150
  def add_tlog_entries(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#135
  def certificate; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#135
  def certificate=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#135
  def certificate?; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#135
  def clear_certificate; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#117
  def clear_public_key; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#159
  def clear_timestamp_verification_data; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#150
  def clear_tlog_entries; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#126
  def clear_x509_certificate_chain; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#117
  def content; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#117
  def public_key; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#117
  def public_key=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#117
  def public_key?; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#159
  def timestamp_verification_data; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#159
  def timestamp_verification_data=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#159
  def timestamp_verification_data?; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#150
  def tlog_entries; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#150
  def tlog_entries=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#150
  def tlog_entries?; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#126
  def x509_certificate_chain; end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#126
  def x509_certificate_chain=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/bundle/v1/sigstore_bundle_pb.rb#126
  def x509_certificate_chain?; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#35
module Sigstore::Common; end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#36
module Sigstore::Common::V1
  class << self
    # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#419
    def register_sigstore_common_protos(registry); end
  end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#294
class Sigstore::Common::V1::DistinguishedName
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#300
  def clear_common_name; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#299
  def clear_organization; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#300
  def common_name; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#300
  def common_name=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#300
  def common_name?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#299
  def organization; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#299
  def organization=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#299
  def organization?; end
end

# Only a subset of the secure hash standard algorithms are supported.
# See <https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf> for more
# details.
# UNSPECIFIED SHOULD not be used, primary reason for inclusion is to force
# any proto JSON serialization to emit the used hash algorithm, as default
# option is to *omit* the default value of an enum (which is the first
# value, represented by '0'.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#47
class Sigstore::Common::V1::HashAlgorithm
  include ::Protobug::Enum::InstanceMethods
  extend ::Protobug::Enum
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#48
  def name; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#48
  def value; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#52
Sigstore::Common::V1::HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED = T.let(T.unsafe(nil), Sigstore::Common::V1::HashAlgorithm)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#53
Sigstore::Common::V1::HashAlgorithm::SHA2_256 = T.let(T.unsafe(nil), Sigstore::Common::V1::HashAlgorithm)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#54
Sigstore::Common::V1::HashAlgorithm::SHA2_384 = T.let(T.unsafe(nil), Sigstore::Common::V1::HashAlgorithm)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#55
Sigstore::Common::V1::HashAlgorithm::SHA2_512 = T.let(T.unsafe(nil), Sigstore::Common::V1::HashAlgorithm)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#56
Sigstore::Common::V1::HashAlgorithm::SHA3_256 = T.let(T.unsafe(nil), Sigstore::Common::V1::HashAlgorithm)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#57
Sigstore::Common::V1::HashAlgorithm::SHA3_384 = T.let(T.unsafe(nil), Sigstore::Common::V1::HashAlgorithm)

# HashOutput captures a digest of a 'message' (generic octet sequence)
# and the corresponding hash algorithm used.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#145
class Sigstore::Common::V1::HashOutput
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#150
  def algorithm; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#150
  def algorithm=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#150
  def algorithm?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#150
  def clear_algorithm; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#159
  def clear_digest; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#159
  def digest; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#159
  def digest=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#159
  def digest?; end
end

# LogId captures the identity of a transparency log.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#191
class Sigstore::Common::V1::LogId
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#197
  def clear_key_id; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#197
  def key_id; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#197
  def key_id=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#197
  def key_id?; end
end

# MessageSignature stores the computed signature over a message.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#163
class Sigstore::Common::V1::MessageSignature
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#171
  def clear_message_digest; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#187
  def clear_signature; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#171
  def message_digest; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#171
  def message_digest=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#171
  def message_digest?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#187
  def signature; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#187
  def signature=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#187
  def signature?; end
end

# An ASN.1 OBJECT IDENTIFIER
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#270
class Sigstore::Common::V1::ObjectIdentifier
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#275
  def add_id(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#275
  def clear_id; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#275
  def id; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#275
  def id=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#275
  def id?; end
end

# An OID and the corresponding (byte) value.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#279
class Sigstore::Common::V1::ObjectIdentifierValuePair
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#284
  def clear_oid; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#291
  def clear_value; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#284
  def oid; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#284
  def oid=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#284
  def oid?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#291
  def value; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#291
  def value=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#291
  def value?; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#223
class Sigstore::Common::V1::PublicKey
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#232
  def clear_key_details; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#230
  def clear_raw_bytes; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#241
  def clear_valid_for; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#232
  def key_details; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#232
  def key_details=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#232
  def key_details?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#230
  def raw_bytes; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#230
  def raw_bytes=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#230
  def raw_bytes?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#241
  def valid_for; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#241
  def valid_for=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#241
  def valid_for?; end
end

# Details of a specific public key, capturing the the key encoding method,
# and signature algorithm.
#
# PublicKeyDetails captures the public key/hash algorithm combinations
# recommended in the Sigstore ecosystem.
#
# This is modelled as a linear set as we want to provide a small number of
# opinionated options instead of allowing every possible permutation.
#
# Any changes to this enum MUST be reflected in the algorithm registry.
# See: docs/algorithm-registry.md
#
# To avoid the possibility of contradicting formats such as PKCS1 with
# ED25519 the valid permutations are listed as a linear set instead of a
# cartesian set (i.e one combined variable instead of two, one for encoding
# and one for the signature algorithm).
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#76
class Sigstore::Common::V1::PublicKeyDetails
  include ::Protobug::Enum::InstanceMethods
  extend ::Protobug::Enum
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#77
  def name; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#77
  def value; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#138
Sigstore::Common::V1::PublicKeyDetails::LMOTS_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# LMS and LM-OTS
#
# These keys and signatures may be used by private Sigstore
# deployments, but are not currently supported by the public
# good instance.
#
# USER WARNING: LMS and LM-OTS are both stateful signature schemes.
# Using them correctly requires discretion and careful consideration
# to ensure that individual secret keys are not used more than once.
# In addition, LM-OTS is a single-use scheme, meaning that it
# MUST NOT be used for more than one signature per LM-OTS key.
# If you cannot maintain these invariants, you MUST NOT use these
# schemes.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#137
Sigstore::Common::V1::PublicKeyDetails::LMS_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# RSA
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#86
Sigstore::Common::V1::PublicKeyDetails::PKCS1_RSA_PKCS1V5 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# See RFC8017
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#87
Sigstore::Common::V1::PublicKeyDetails::PKCS1_RSA_PSS = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# ECDSA
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#111
Sigstore::Common::V1::PublicKeyDetails::PKIX_ECDSA_P256_HMAC_SHA_256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# See RFC6979
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#115
Sigstore::Common::V1::PublicKeyDetails::PKIX_ECDSA_P256_SHA_256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# See NIST FIPS 186-4
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#119
Sigstore::Common::V1::PublicKeyDetails::PKIX_ECDSA_P384_SHA_384 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#120
Sigstore::Common::V1::PublicKeyDetails::PKIX_ECDSA_P521_SHA_512 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# Ed 25519
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#122
Sigstore::Common::V1::PublicKeyDetails::PKIX_ED25519 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#123
Sigstore::Common::V1::PublicKeyDetails::PKIX_ED25519_PH = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# RSA public key in PKIX format, PKCS#1v1.5 signature
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#91
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PKCS1V15_2048_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#95
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PKCS1V15_3072_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#99
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PKCS1V15_4096_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#88
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PKCS1V5 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#89
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PSS = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# RSA public key in PKIX format, RSASSA-PSS signature
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#104
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PSS_2048_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# See RFC4055
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#108
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PSS_3072_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#109
Sigstore::Common::V1::PublicKeyDetails::PKIX_RSA_PSS_4096_SHA256 = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#81
Sigstore::Common::V1::PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED = T.let(T.unsafe(nil), Sigstore::Common::V1::PublicKeyDetails)

# PublicKeyIdentifier can be used to identify an (out of band) delivered
# key, to verify a signature.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#252
class Sigstore::Common::V1::PublicKeyIdentifier
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#266
  def clear_hint; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#266
  def hint; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#266
  def hint=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#266
  def hint?; end
end

# This message holds a RFC 3161 timestamp.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#207
class Sigstore::Common::V1::RFC3161SignedTimestamp
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#214
  def clear_signed_timestamp; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#214
  def signed_timestamp; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#214
  def signed_timestamp=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#214
  def signed_timestamp?; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#341
class Sigstore::Common::V1::SubjectAlternativeName
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#355
  def clear_regexp; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#346
  def clear_type; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#363
  def clear_value; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#355
  def identity; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#355
  def regexp; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#355
  def regexp=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#355
  def regexp?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#346
  def type; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#346
  def type=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#346
  def type?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#363
  def value; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#363
  def value=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#363
  def value?; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#324
class Sigstore::Common::V1::SubjectAlternativeNameType
  include ::Protobug::Enum::InstanceMethods
  extend ::Protobug::Enum
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#325
  def name; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#325
  def value; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#333
Sigstore::Common::V1::SubjectAlternativeNameType::EMAIL = T.let(T.unsafe(nil), Sigstore::Common::V1::SubjectAlternativeNameType)

# OID 1.3.6.1.4.1.57264.1.7
# See https://github.com/sigstore/fulcio/blob/main/docs/oid-info.md#1361415726417--othername-san
# for more details.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#338
Sigstore::Common::V1::SubjectAlternativeNameType::OTHER_NAME = T.let(T.unsafe(nil), Sigstore::Common::V1::SubjectAlternativeNameType)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#329
Sigstore::Common::V1::SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Sigstore::Common::V1::SubjectAlternativeNameType)

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#334
Sigstore::Common::V1::SubjectAlternativeNameType::URI = T.let(T.unsafe(nil), Sigstore::Common::V1::SubjectAlternativeNameType)

# The time range is closed and includes both the start and end times,
# (i.e., [start, end]).
# End is optional to be able to capture a period that has started but
# has no known end.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#399
class Sigstore::Common::V1::TimeRange
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#411
  def clear_end; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#404
  def clear_start; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#411
  def end; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#411
  def end=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#411
  def end?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#404
  def start; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#404
  def start=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#404
  def start?; end
end

# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#309
class Sigstore::Common::V1::X509Certificate
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#315
  def clear_raw_bytes; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#315
  def raw_bytes; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#315
  def raw_bytes=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#315
  def raw_bytes?; end
end

# A collection of X.509 certificates.
#
# This "chain" can be used in multiple contexts, such as providing a root CA
# certificate within a TUF root of trust or multiple untrusted certificates for
# the purpose of chain building.
#
# source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#377
class Sigstore::Common::V1::X509CertificateChain
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#387
  def add_certificates(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#387
  def certificates; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#387
  def certificates=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#387
  def certificates?; end

  # source://protobug_sigstore_protos//lib/sigstore/common/v1/sigstore_common_pb.rb#387
  def clear_certificates; end
end

# source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#29
module Sigstore::DSSE
  class << self
    # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#72
    def register_envelope_protos(registry); end
  end
end

# An authenticated message of arbitrary type.
#
# source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#31
class Sigstore::DSSE::Envelope
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#51
  def add_signatures(value); end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#38
  def clear_payload; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#41
  def clear_payloadType; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#51
  def clear_signatures; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#38
  def payload; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#38
  def payload=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#38
  def payload?; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#41
  def payloadType; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#41
  def payloadType=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#41
  def payloadType?; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#51
  def signatures; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#51
  def signatures=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#51
  def signatures?; end
end

# source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#59
class Sigstore::DSSE::Signature
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#69
  def clear_keyid; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#66
  def clear_sig; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#69
  def keyid; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#69
  def keyid=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#69
  def keyid?; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#66
  def sig; end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#66
  def sig=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/dsse/envelope_pb.rb#66
  def sig?; end
end

# source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#41
module Sigstore::Events
  class << self
    # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#186
    def register_events_protos(registry); end
  end
end

# source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#42
class Sigstore::Events::CloudEvent
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#66
  def add_attributes(msg); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#66
  def attributes; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#66
  def attributes=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#66
  def attributes?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#76
  def binary_data; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#76
  def binary_data=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#76
  def binary_data?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#66
  def clear_attributes; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#76
  def clear_binary_data; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#50
  def clear_id; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#92
  def clear_proto_data; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#51
  def clear_source; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#57
  def clear_spec_version; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#84
  def clear_text_data; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#64
  def clear_type; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#76
  def data; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#50
  def id; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#50
  def id=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#50
  def id?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#92
  def proto_data; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#92
  def proto_data=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#92
  def proto_data?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#51
  def source; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#51
  def source=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#51
  def source?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#57
  def spec_version; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#57
  def spec_version=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#57
  def spec_version?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#84
  def text_data; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#84
  def text_data=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#84
  def text_data?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#64
  def type; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#64
  def type=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#64
  def type?; end
end

# *
#  The CloudEvent specification defines
#  seven attribute value types...
#
# source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#105
class Sigstore::Events::CloudEvent::CloudEventAttributeValue
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#110
  def attr; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#110
  def ce_boolean; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#110
  def ce_boolean=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#110
  def ce_boolean?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#134
  def ce_bytes; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#134
  def ce_bytes=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#134
  def ce_bytes?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#118
  def ce_integer; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#118
  def ce_integer=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#118
  def ce_integer?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#126
  def ce_string; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#126
  def ce_string=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#126
  def ce_string?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#158
  def ce_timestamp; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#158
  def ce_timestamp=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#158
  def ce_timestamp?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#142
  def ce_uri; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#142
  def ce_uri=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#142
  def ce_uri?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#150
  def ce_uri_ref; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#150
  def ce_uri_ref=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#150
  def ce_uri_ref?; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#110
  def clear_ce_boolean; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#134
  def clear_ce_bytes; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#118
  def clear_ce_integer; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#126
  def clear_ce_string; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#158
  def clear_ce_timestamp; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#142
  def clear_ce_uri; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#150
  def clear_ce_uri_ref; end
end

# *
#  CloudEvent Protobuf Batch Format
#
# source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#173
class Sigstore::Events::CloudEventBatch
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#178
  def add_events(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#178
  def clear_events; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#178
  def events; end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#178
  def events=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/events/events_pb.rb#178
  def events?; end
end

# source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#36
module Sigstore::Rekor; end

# source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#37
module Sigstore::Rekor::V1
  class << self
    # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#241
    def register_sigstore_rekor_protos(registry); end
  end
end

# The checkpoint MUST contain an origin string as a unique log identifier,
# the tree size, and the root hash. It MAY also be followed by optional data,
# and clients MUST NOT assume optional data. The checkpoint MUST also contain
# a signature over the root hash (tree head). The checkpoint MAY contain additional
# signatures, but the first SHOULD be the signature from the log. Checkpoint contents
# are concatenated with newlines into a single string.
# The checkpoint format is described in
# https://github.com/transparency-dev/formats/blob/main/log/README.md
# and https://github.com/C2SP/C2SP/blob/main/tlog-checkpoint.md.
# An example implementation can be found in https://github.com/sigstore/rekor/blob/main/pkg/util/signed_note.go
#
# source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#61
class Sigstore::Rekor::V1::Checkpoint
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#66
  def clear_envelope; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#66
  def envelope; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#66
  def envelope=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#66
  def envelope?; end
end

# The inclusion promise is calculated by Rekor. It's calculated as a
# signature over a canonical JSON serialization of the persisted entry, the
# log ID, log index and the integration timestamp.
# See https://github.com/sigstore/rekor/blob/a6e58f72b6b18cc06cefe61808efd562b9726330/pkg/api/entries.go#L54
# The format of the signature depends on the transparency log's public key.
# If the signature algorithm requires a hash function and/or a signature
# scheme (e.g. RSA) those has to be retrieved out-of-band from the log's
# operators, together with the public key.
# This is used to verify the integration timestamp's value and that the log
# has promised to include the entry.
#
# source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#128
class Sigstore::Rekor::V1::InclusionPromise
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#133
  def clear_signed_entry_timestamp; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#133
  def signed_entry_timestamp; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#133
  def signed_entry_timestamp=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#133
  def signed_entry_timestamp?; end
end

# InclusionProof is the proof returned from the transparency log. Can
# be used for offline or online verification against the log.
#
# source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#71
class Sigstore::Rekor::V1::InclusionProof
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#106
  def add_hashes(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#109
  def checkpoint; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#109
  def checkpoint=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#109
  def checkpoint?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#109
  def clear_checkpoint; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#106
  def clear_hashes; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#77
  def clear_log_index; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#86
  def clear_root_hash; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#94
  def clear_tree_size; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#106
  def hashes; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#106
  def hashes=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#106
  def hashes?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#77
  def log_index; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#77
  def log_index=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#77
  def log_index?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#86
  def root_hash; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#86
  def root_hash=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#86
  def root_hash?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#94
  def tree_size; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#94
  def tree_size=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#94
  def tree_size?; end
end

# KindVersion contains the entry's kind and api version.
#
# source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#39
class Sigstore::Rekor::V1::KindVersion
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#46
  def clear_kind; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#48
  def clear_version; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#46
  def kind; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#46
  def kind=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#46
  def kind?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#48
  def version; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#48
  def version=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#48
  def version?; end
end

# TransparencyLogEntry captures all the details required from Rekor to
# reconstruct an entry, given that the payload is provided via other means.
# This type can easily be created from the existing response from Rekor.
# Future iterations could rely on Rekor returning the minimal set of
# attributes (excluding the payload) that are required for verifying the
# inclusion promise. The inclusion promise (called SignedEntryTimestamp in
# the response from Rekor) is similar to a Signed Certificate Timestamp
# as described here https://www.rfc-editor.org/rfc/rfc6962.html#section-3.2.
#
# source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#150
class Sigstore::Rekor::V1::TransparencyLogEntry
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#232
  def canonicalized_body; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#232
  def canonicalized_body=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#232
  def canonicalized_body?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#232
  def clear_canonicalized_body; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#195
  def clear_inclusion_promise; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#206
  def clear_inclusion_proof; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#184
  def clear_integrated_time; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#175
  def clear_kind_version; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#164
  def clear_log_id; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#156
  def clear_log_index; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#195
  def inclusion_promise; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#195
  def inclusion_promise=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#195
  def inclusion_promise?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#206
  def inclusion_proof; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#206
  def inclusion_proof=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#206
  def inclusion_proof?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#184
  def integrated_time; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#184
  def integrated_time=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#184
  def integrated_time?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#175
  def kind_version; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#175
  def kind_version=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#175
  def kind_version?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#164
  def log_id; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#164
  def log_id=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#164
  def log_id?; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#156
  def log_index; end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#156
  def log_index=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/rekor/v1/sigstore_rekor_pb.rb#156
  def log_index?; end
end

# source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#36
module Sigstore::TrustRoot; end

# source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#37
module Sigstore::TrustRoot::V1
  class << self
    # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#335
    def register_sigstore_trustroot_protos(registry); end
  end
end

# CertificateAuthority enlists the information required to identify which
# CA to use and perform signature verification.
#
# source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#116
class Sigstore::TrustRoot::V1::CertificateAuthority
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#140
  def cert_chain; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#140
  def cert_chain=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#140
  def cert_chain?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#140
  def clear_cert_chain; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#123
  def clear_subject; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#136
  def clear_uri; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#155
  def clear_valid_for; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#123
  def subject; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#123
  def subject=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#123
  def subject?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#136
  def uri; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#136
  def uri=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#136
  def uri?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#155
  def valid_for; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#155
  def valid_for=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#155
  def valid_for?; end
end

# ClientTrustConfig describes the complete state needed by a client
# to perform both signing and verification operations against a particular
# instance of Sigstore.
#
# source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#302
class Sigstore::TrustRoot::V1::ClientTrustConfig
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#308
  def clear_media_type; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#325
  def clear_signing_config; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#316
  def clear_trusted_root; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#308
  def media_type; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#308
  def media_type=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#308
  def media_type?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#325
  def signing_config; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#325
  def signing_config=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#325
  def signing_config?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#316
  def trusted_root; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#316
  def trusted_root=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#316
  def trusted_root?; end
end

# SigningConfig represents the trusted entities/state needed by Sigstore
# signing. In particular, it primarily contains service URLs that a Sigstore
# signer may need to connect to for the online aspects of signing.
#
# source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#254
class Sigstore::TrustRoot::V1::SigningConfig
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#290
  def add_tlog_urls(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#296
  def add_tsa_urls(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#268
  def ca_url; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#268
  def ca_url=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#268
  def ca_url?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#268
  def clear_ca_url; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#279
  def clear_oidc_url; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#290
  def clear_tlog_urls; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#296
  def clear_tsa_urls; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#279
  def oidc_url; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#279
  def oidc_url=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#279
  def oidc_url?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#290
  def tlog_urls; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#290
  def tlog_urls=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#290
  def tlog_urls?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#296
  def tsa_urls; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#296
  def tsa_urls=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#296
  def tsa_urls?; end
end

# TransparencyLogInstance describes the immutable parameters from a
# transparency log.
# See https://www.rfc-editor.org/rfc/rfc9162.html#name-log-parameters
# for more details.
# The included parameters are the minimal set required to identify a log,
# and verify an inclusion proof/promise.
#
# source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#44
class Sigstore::TrustRoot::V1::TransparencyLogInstance
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#50
  def base_url; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#50
  def base_url=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#50
  def base_url?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#104
  def checkpoint_key_id; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#104
  def checkpoint_key_id=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#104
  def checkpoint_key_id?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#50
  def clear_base_url; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#104
  def clear_checkpoint_key_id; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#58
  def clear_hash_algorithm; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#81
  def clear_log_id; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#68
  def clear_public_key; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#58
  def hash_algorithm; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#58
  def hash_algorithm=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#58
  def hash_algorithm?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#81
  def log_id; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#81
  def log_id=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#81
  def log_id?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#68
  def public_key; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#68
  def public_key=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#68
  def public_key?; end
end

# TrustedRoot describes the client's complete set of trusted entities.
# How the TrustedRoot is populated is not specified, but can be a
# combination of many sources such as TUF repositories, files on disk etc.
#
# The TrustedRoot is not meant to be used for any artifact verification, only
# to capture the complete/global set of trusted verification materials.
# When verifying an artifact, based on the artifact and policies, a selection
# of keys/authorities are expected to be extracted and provided to the
# verification function. This way the set of keys/authorities can be kept to
# a minimal set by the policy to gain better control over what signatures
# that are allowed.
#
# The embedded transparency logs, CT logs, CAs and TSAs MUST include any
# previously used instance -- otherwise signatures made in the past cannot
# be verified.
#
# All the listed instances SHOULD be sorted by the 'valid_for' in ascending
# order, that is, the oldest instance first. Only the last instance is
# allowed to have their 'end' timestamp unset. All previous instances MUST
# have a closed interval of validity. The last instance MAY have a closed
# interval. Clients MUST accept instances that overlaps in time, if not
# clients may experience problems during rotations of verification
# materials.
#
# To be able to manage planned rotations of either transparency logs or
# certificate authorities, clienst MUST accept lists of instances where
# the last instance have a 'valid_for' that belongs to the future.
# This should not be a problem as clients SHOULD first seek the trust root
# for a suitable instance before creating a per artifact trust root (that
# is, a sub-set of the complete trust root) that is used for verification.
#
# source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#195
class Sigstore::TrustRoot::V1::TrustedRoot
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#227
  def add_certificate_authorities(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#235
  def add_ctlogs(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#242
  def add_timestamp_authorities(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#213
  def add_tlogs(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#227
  def certificate_authorities; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#227
  def certificate_authorities=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#227
  def certificate_authorities?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#227
  def clear_certificate_authorities; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#235
  def clear_ctlogs; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#205
  def clear_media_type; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#242
  def clear_timestamp_authorities; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#213
  def clear_tlogs; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#235
  def ctlogs; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#235
  def ctlogs=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#235
  def ctlogs?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#205
  def media_type; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#205
  def media_type=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#205
  def media_type?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#242
  def timestamp_authorities; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#242
  def timestamp_authorities=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#242
  def timestamp_authorities?; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#213
  def tlogs; end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#213
  def tlogs=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/trustroot/v1/sigstore_trustroot_pb.rb#213
  def tlogs?; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#36
module Sigstore::Verification; end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#37
module Sigstore::Verification::V1
  class << self
    # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#335
    def register_sigstore_verification_protos(registry); end
  end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#262
class Sigstore::Verification::V1::Artifact
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#277
  def artifact; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#277
  def artifact=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#277
  def artifact?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#268
  def artifact_uri; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#268
  def artifact_uri=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#268
  def artifact_uri?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#277
  def clear_artifact; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#268
  def clear_artifact_uri; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#268
  def data; end
end

# A light-weight set of options/policies for identifying trusted signers,
# used during verification of a single artifact.
#
# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#93
class Sigstore::Verification::V1::ArtifactVerificationOptions
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#172
  def certificate_identities; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#172
  def certificate_identities=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#172
  def certificate_identities?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#172
  def clear_certificate_identities; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#216
  def clear_ctlog_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#240
  def clear_integrated_ts_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#252
  def clear_observer_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#190
  def clear_public_keys; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#204
  def clear_tlog_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#228
  def clear_tsa_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#216
  def ctlog_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#216
  def ctlog_options=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#216
  def ctlog_options?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#240
  def integrated_ts_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#240
  def integrated_ts_options=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#240
  def integrated_ts_options?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#252
  def observer_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#252
  def observer_options=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#252
  def observer_options?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#190
  def public_keys; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#190
  def public_keys=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#190
  def public_keys?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#172
  def signers; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#204
  def tlog_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#204
  def tlog_options=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#204
  def tlog_options?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#228
  def tsa_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#228
  def tsa_options=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#228
  def tsa_options?; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#117
class Sigstore::Verification::V1::ArtifactVerificationOptions::CtlogOptions
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#126
  def clear_disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#124
  def clear_threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#126
  def disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#126
  def disable=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#126
  def disable?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#124
  def threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#124
  def threshold=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#124
  def threshold?; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#153
class Sigstore::Verification::V1::ArtifactVerificationOptions::ObserverTimestampOptions
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#165
  def clear_disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#163
  def clear_threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#165
  def disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#165
  def disable=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#165
  def disable?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#163
  def threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#163
  def threshold=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#163
  def threshold?; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#131
class Sigstore::Verification::V1::ArtifactVerificationOptions::TimestampAuthorityOptions
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#139
  def clear_disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#137
  def clear_threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#139
  def disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#139
  def disable=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#139
  def disable?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#137
  def threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#137
  def threshold=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#137
  def threshold?; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#142
class Sigstore::Verification::V1::ArtifactVerificationOptions::TlogIntegratedTimestampOptions
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#150
  def clear_disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#148
  def clear_threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#150
  def disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#150
  def disable=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#150
  def disable?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#148
  def threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#148
  def threshold=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#148
  def threshold?; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#98
class Sigstore::Verification::V1::ArtifactVerificationOptions::TlogOptions
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#114
  def clear_disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#106
  def clear_perform_online_verification; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#104
  def clear_threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#114
  def disable; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#114
  def disable=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#114
  def disable?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#106
  def perform_online_verification; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#106
  def perform_online_verification=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#106
  def perform_online_verification?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#104
  def threshold; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#104
  def threshold=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#104
  def threshold?; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#64
class Sigstore::Verification::V1::CertificateIdentities
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#69
  def add_identities(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#69
  def clear_identities; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#69
  def identities; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#69
  def identities=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#69
  def identities?; end
end

# The identity of a X.509 Certificate signer.
#
# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#39
class Sigstore::Verification::V1::CertificateIdentity
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#56
  def add_oids(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#45
  def clear_issuer; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#56
  def clear_oids; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#46
  def clear_san; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#45
  def issuer; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#45
  def issuer=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#45
  def issuer?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#56
  def oids; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#56
  def oids=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#56
  def oids?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#46
  def san; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#46
  def san=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#46
  def san?; end
end

# Input captures all that is needed to call the bundle verification method,
# to verify a single artifact referenced by the bundle.
#
# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#288
class Sigstore::Verification::V1::Input
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#327
  def artifact; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#327
  def artifact=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#327
  def artifact?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#301
  def artifact_trust_root; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#301
  def artifact_trust_root=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#301
  def artifact_trust_root?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#309
  def artifact_verification_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#309
  def artifact_verification_options=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#309
  def artifact_verification_options?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#318
  def bundle; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#318
  def bundle=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#318
  def bundle?; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#327
  def clear_artifact; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#301
  def clear_artifact_trust_root; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#309
  def clear_artifact_verification_options; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#318
  def clear_bundle; end
end

# source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#77
class Sigstore::Verification::V1::PublicKeyIdentities
  include ::Protobug::Message::InstanceMethods
  extend ::Protobug::Message
  extend ::Protobug::BaseDescriptor

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#82
  def add_public_keys(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#82
  def clear_public_keys; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#82
  def public_keys; end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#82
  def public_keys=(value); end

  # source://protobug_sigstore_protos//lib/sigstore/verification/v1/sigstore_verification_pb.rb#82
  def public_keys?; end
end
