name: Specs
on:  # yamllint disable-line rule:truthy
  pull_request:
  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite:
          - { path: bin, name: dry_run, ecosystem: common }
          - { path: bun, name: bun, ecosystem: bun }
          - { path: bundler, name: bundler, ecosystem: bundler }
          - { path: cargo, name: cargo, ecosystem: cargo }
          - { path: common, name: common, ecosystem: common}
          - { path: composer, name: composer, ecosystem: composer }
          - { path: conda, name: conda, ecosystem: conda }
          - { path: devcontainers, name: devcontainers, ecosystem: devcontainers }
          - { path: docker_compose, name: docker_compose, ecosystem: docker-compose }
          - { path: docker, name: docker, ecosystem: docker }
          - { path: dotnet_sdk, name: dotnet_sdk, ecosystem: dotnet-sdk }
          - { path: elm, name: elm, ecosystem: elm }
          - { path: git_submodules, name: git_submodules, ecosystem: gitsubmodule }
          - { path: github_actions, name: github_actions, ecosystem: github-actions }
          - { path: go_modules, name: go_module, ecosystem: gomod }
          - { path: gradle, name: gradle, ecosystem: gradle }
          - { path: helm, name: helm, ecosystem: helm }
          - { path: hex, name: hex, ecosystem: mix }
          - { path: maven, name: maven, ecosystem: maven }
          - { path: npm_and_yarn, name: npm_and_yarn, ecosystem: npm }
          - { path: nuget, name: nuget, ecosystem: nuget }
          - { path: pub, name: pub, ecosystem: pub }
          - { path: python, name: python_slow, ecosystem: pip }
          - { path: python, name: python, ecosystem: pip }
          - { path: rust_toolchain, name: rust_toolchain, ecosystem: rust-toolchain }
          - { path: swift, name: swift, ecosystem: swift }
          - { path: terraform, name: terraform, ecosystem: terraform }
          - { path: uv, name: uv, ecosystem: uv }
          - { path: vcpkg, name: vcpkg, ecosystem: vcpkg }

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: changes
        with:
          token: '' # use git commands to avoid excessive rate limit usage
          filters: .github/ci-filters.yml

      - name: Build ecosystem image
        if: steps.changes.outputs[matrix.suite.path] == 'true'
        run: script/build ${{ matrix.suite.path }}

      - name: Run ${{ matrix.suite.name }} tests
        if: steps.changes.outputs[matrix.suite.path] == 'true'
        run: |
          # Create coverage directory on host
          mkdir -p "${{ matrix.suite.path }}/coverage"
          
          docker run \
            --pull never \
            --env "CI=true" \
            --env "RAISE_ON_WARNINGS=true" \
            --env "DEPENDABOT_TEST_ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN }}" \
            --env "SUITE_NAME=${{ matrix.suite.name }}" \
            --volume "$(pwd)/${{ matrix.suite.path }}/coverage:/host-coverage" \
            --rm \
            ghcr.io/dependabot/dependabot-updater-${{ matrix.suite.ecosystem }} bash -c \
            "cd /home/dependabot/${{ matrix.suite.path }} && \
             ./script/ci-test && \
             if [ -d coverage ]; then \
               echo 'Copying coverage files to host...' && \
               cp -r coverage/* /host-coverage/ 2>/dev/null || true; \
             fi"

      - name: Verify coverage extraction
        if: steps.changes.outputs[matrix.suite.path] == 'true' && always()
        run: |
          echo "Coverage files for ${{ matrix.suite.name }}:"
          if [ -d "${{ matrix.suite.path }}/coverage" ]; then
            ls -la "${{ matrix.suite.path }}/coverage/" || echo "Coverage directory exists but no files found"
          else
            echo "No coverage directory created"
          fi

      - name: Upload coverage for ${{ matrix.suite.name }}
        if: steps.changes.outputs[matrix.suite.path] == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.suite.name }}
          path: ${{ matrix.suite.path }}/coverage/
          if-no-files-found: warn  # Changed to warn so we can see which ecosystems don't generate coverage
          retention-days: 1

  updater:
    env:
      DOCKER_BUILDKIT: 1
    name: Updater
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive
      # using bundler as the test updater
      - name: Build ecosystem image
        run: script/build bundler
      - name: Run updater tests
        env:
          DEPENDABOT_TEST_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: script/ci-test-updater

      - name: Upload updater coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-updater
          path: updater/coverage/
          if-no-files-found: ignore
          retention-days: 1

  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      BUNDLE_GEMFILE: updater/Gemfile
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: ruby/setup-ruby@829114fc20da43a41d27359103ec7a63020954d4 # v1.255.0
        with:
          bundler-cache: true
      - run: ./bin/lint
      # yamllint is installed in GitHub Actions base runner image: https://github.com/adrienverge/yamllint/pull/588
      - run: yamllint .

  integration:
    env:
      DOCKER_BUILDKIT: 1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive

      - name: Build ecosystem image
        run: script/build silent

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'silent/tests/go.mod'

      - name: Download Dependabot CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download --repo dependabot/cli -p "*linux-amd64.tar.gz"
          tar xzvf *.tar.gz >/dev/null 2>&1
          ./dependabot --version

      - name: Run integration tests
        env:
          PATH: ${{ github.workspace }}:$PATH
        run: |
          cd silent/tests
          go test ./...

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [ci, updater]
    if: always() && (needs.ci.result == 'success' || needs.ci.result == 'skipped') && (needs.updater.result == 'success' || needs.updater.result == 'skipped')
    permissions:
      contents: write
      pull-requests: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive

      # Download coverage artifacts from all test jobs
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: false
        continue-on-error: true

      # Simple reorganization for octocov auto-discovery
      - name: Organize coverage files for octocov
        run: |
          echo "Organizing coverage files for octocov auto-discovery..."
          
          # Process each downloaded artifact directory
          for artifact_dir in coverage-*/; do
            if [ -d "$artifact_dir" ]; then
              ecosystem=$(echo "$artifact_dir" | sed 's/coverage-//' | sed 's|/$||')
              echo "Processing $ecosystem coverage files..."
              
              # Create ecosystem directory and copy coverage files
              mkdir -p "$ecosystem/coverage"
              cp -r "$artifact_dir"* "$ecosystem/coverage/" 2>/dev/null || true
              
              echo "Files in $ecosystem/coverage:"
              ls -la "$ecosystem/coverage/" 2>/dev/null || echo "  No files found"
            fi
          done
          
          # Show what octocov will auto-discover
          echo -e "\nCoverage files available for octocov auto-discovery:"
          find . -name ".resultset.json" -type f | sort || echo "No SimpleCov files found"

      # Run octocov for coverage aggregation and reporting
      - name: Run octocov
        uses: k1LoW/octocov-action@v1
        with:
          config: .octocov.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # octocov auto-discovers SimpleCov files, aggregates coverage across
          # all ecosystems, and generates PR comments, badges, and job summaries
