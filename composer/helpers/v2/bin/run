#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace Dependabot\Composer;

require __DIR__ . '/../vendor/autoload.php';

// Get details of the process to run from STDIN. It will have a `function`
// and an `args` method, as passed in by UpdateCheckers::Php
$request = json_decode(file_get_contents('php://stdin'), true);

function memoryInBytes($value) {
    $unit = strtolower(substr($value, -1, 1));
    $value = (int) $value;
    if ($unit == 'g') {
        $value *= (1024 * 1024 * 1024);
    } elseif ($unit == 'm') {
        $value *= (1024 * 1024);
    } elseif ($unit == 'k') {
        $value *= 1024;
    }

    return $value;
}

// Increase the default memory limit the same way Composer does (but clearer)
if (function_exists('ini_set')) {
    $memoryLimit = trim(ini_get('memory_limit'));
    // Increase memory_limit if it is lower than 1900MB
    if ($memoryLimit != -1 && memoryInBytes($memoryLimit) < 1024 * 1024 * 1900) {
        @ini_set('memory_limit', '1900M');
    }

    // Set user defined memory limit
    if ($memoryLimit = getenv('COMPOSER_MEMORY_LIMIT')) {
        @ini_set('memory_limit', $memoryLimit);
    }
    unset($memoryInBytes, $memoryLimit);
}

date_default_timezone_set('Europe/London');

// This storage is freed on error (case of allowed memory exhausted)
$memory = str_repeat('*', 1024 * 1024);

register_shutdown_function(function (): void {
    global $memory;
    $memory = null;
    $error = error_get_last();
    if (null !== $error) {
        fwrite(STDOUT, json_encode(['error' => $error['message']]));
    }
});

if ($memoryAlloc = getenv('DEPENDABOT_TEST_MEMORY_ALLOCATION')) {
    str_repeat('*', memoryInBytes($memoryAlloc));
}

try {
    switch ($request['function']) {
        case 'update':
            $updatedFiles = Updater::update($request['args']);
            fwrite(STDOUT, json_encode(['result' => $updatedFiles]));
            error_clear_last();
            break;
        case 'get_latest_resolvable_version':
            $latestVersion = UpdateChecker::getLatestResolvableVersion($request['args']);
            fwrite(STDOUT, json_encode(['result' => $latestVersion]));
            error_clear_last();
            break;
        case 'get_content_hash':
            $content_hash = Hasher::getContentHash($request['args']);
            fwrite(STDOUT, json_encode(['result' => $content_hash]));
            error_clear_last();
            break;
        default:
            fwrite(STDOUT, json_encode(['error' => "Invalid function {$request['function']}"]));
            exit(1);
    }
} catch (\Exception $e) {
    fwrite(STDOUT, json_encode(['error' => $e->getMessage()]));
    error_clear_last();
    exit(1);
}
